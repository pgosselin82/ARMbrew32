
ARMbrew_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080001c8  080001c8  000081c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005ce8  08005ce8  0000dce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080060cc  080060cc  0000e0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080060d4  080060d4  0000e0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080060d8  080060d8  0000e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000540  20000000  080060dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000012c  20000540  0800661c  00010540  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000066c  0800661c  0001066c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f625  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000269d  00000000  00000000  0001fb95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e22  00000000  00000000  00022232  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b78  00000000  00000000  0002a058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011f8  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000598e  00000000  00000000  0002bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003a42  00000000  00000000  00031756  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000082  00000000  00000000  00035198  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000024e8  00000000  00000000  0003521c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000540 	.word	0x20000540
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005ccc 	.word	0x08005ccc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4903      	ldr	r1, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005ccc 	.word	0x08005ccc
 8000204:	20000544 	.word	0x20000544

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b94b      	cbnz	r3, 8000b12 <__aeabi_uldivmod+0x16>
 8000afe:	b942      	cbnz	r2, 8000b12 <__aeabi_uldivmod+0x16>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	d002      	beq.n	8000b0e <__aeabi_uldivmod+0x12>
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	f000 b83b 	b.w	8000b88 <__aeabi_idiv0>
 8000b12:	b082      	sub	sp, #8
 8000b14:	46ec      	mov	ip, sp
 8000b16:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000b1a:	f000 f81d 	bl	8000b58 <__gnu_uldivmod_helper>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	b002      	add	sp, #8
 8000b24:	bc0c      	pop	{r2, r3}
 8000b26:	4770      	bx	lr

08000b28 <__gnu_ldivmod_helper>:
 8000b28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b2c:	9e06      	ldr	r6, [sp, #24]
 8000b2e:	4614      	mov	r4, r2
 8000b30:	461d      	mov	r5, r3
 8000b32:	4680      	mov	r8, r0
 8000b34:	4689      	mov	r9, r1
 8000b36:	f000 f829 	bl	8000b8c <__divdi3>
 8000b3a:	fb04 f301 	mul.w	r3, r4, r1
 8000b3e:	fb00 3305 	mla	r3, r0, r5, r3
 8000b42:	fba4 4500 	umull	r4, r5, r4, r0
 8000b46:	441d      	add	r5, r3
 8000b48:	ebb8 0404 	subs.w	r4, r8, r4
 8000b4c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b50:	e9c6 4500 	strd	r4, r5, [r6]
 8000b54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b58 <__gnu_uldivmod_helper>:
 8000b58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b5c:	9e06      	ldr	r6, [sp, #24]
 8000b5e:	4614      	mov	r4, r2
 8000b60:	4680      	mov	r8, r0
 8000b62:	4689      	mov	r9, r1
 8000b64:	461d      	mov	r5, r3
 8000b66:	f000 f95d 	bl	8000e24 <__udivdi3>
 8000b6a:	fb00 f505 	mul.w	r5, r0, r5
 8000b6e:	fb04 5301 	mla	r3, r4, r1, r5
 8000b72:	fba0 4504 	umull	r4, r5, r0, r4
 8000b76:	441d      	add	r5, r3
 8000b78:	ebb8 0404 	subs.w	r4, r8, r4
 8000b7c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b80:	e9c6 4500 	strd	r4, r5, [r6]
 8000b84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__divdi3>:
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b92:	f2c0 809f 	blt.w	8000cd4 <__divdi3+0x148>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f2c0 8096 	blt.w	8000cca <__divdi3+0x13e>
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4606      	mov	r6, r0
 8000ba2:	460f      	mov	r7, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d13e      	bne.n	8000c26 <__divdi3+0x9a>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	d957      	bls.n	8000c5c <__divdi3+0xd0>
 8000bac:	fab2 f382 	clz	r3, r2
 8000bb0:	b14b      	cbz	r3, 8000bc6 <__divdi3+0x3a>
 8000bb2:	f1c3 0220 	rsb	r2, r3, #32
 8000bb6:	fa01 f703 	lsl.w	r7, r1, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	409d      	lsls	r5, r3
 8000bc0:	4317      	orrs	r7, r2
 8000bc2:	fa00 f603 	lsl.w	r6, r0, r3
 8000bc6:	0c29      	lsrs	r1, r5, #16
 8000bc8:	fbb7 f2f1 	udiv	r2, r7, r1
 8000bcc:	0c33      	lsrs	r3, r6, #16
 8000bce:	fb01 7c12 	mls	ip, r1, r2, r7
 8000bd2:	b2a8      	uxth	r0, r5
 8000bd4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000bd8:	fb00 f302 	mul.w	r3, r0, r2
 8000bdc:	42bb      	cmp	r3, r7
 8000bde:	d909      	bls.n	8000bf4 <__divdi3+0x68>
 8000be0:	197f      	adds	r7, r7, r5
 8000be2:	f102 3cff 	add.w	ip, r2, #4294967295
 8000be6:	f080 8101 	bcs.w	8000dec <__divdi3+0x260>
 8000bea:	42bb      	cmp	r3, r7
 8000bec:	f240 80fe 	bls.w	8000dec <__divdi3+0x260>
 8000bf0:	3a02      	subs	r2, #2
 8000bf2:	442f      	add	r7, r5
 8000bf4:	1aff      	subs	r7, r7, r3
 8000bf6:	fbb7 f3f1 	udiv	r3, r7, r1
 8000bfa:	b2b6      	uxth	r6, r6
 8000bfc:	fb01 7113 	mls	r1, r1, r3, r7
 8000c00:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000c04:	fb00 f003 	mul.w	r0, r0, r3
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	d908      	bls.n	8000c1e <__divdi3+0x92>
 8000c0c:	1949      	adds	r1, r1, r5
 8000c0e:	f103 37ff 	add.w	r7, r3, #4294967295
 8000c12:	f080 80ed 	bcs.w	8000df0 <__divdi3+0x264>
 8000c16:	4288      	cmp	r0, r1
 8000c18:	f240 80ea 	bls.w	8000df0 <__divdi3+0x264>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000c22:	2300      	movs	r3, #0
 8000c24:	e003      	b.n	8000c2e <__divdi3+0xa2>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d90a      	bls.n	8000c40 <__divdi3+0xb4>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	b114      	cbz	r4, 8000c3a <__divdi3+0xae>
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c3e:	4770      	bx	lr
 8000c40:	fab3 f883 	clz	r8, r3
 8000c44:	f1b8 0f00 	cmp.w	r8, #0
 8000c48:	f040 8084 	bne.w	8000d54 <__divdi3+0x1c8>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d302      	bcc.n	8000c56 <__divdi3+0xca>
 8000c50:	4282      	cmp	r2, r0
 8000c52:	f200 80de 	bhi.w	8000e12 <__divdi3+0x286>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2201      	movs	r2, #1
 8000c5a:	e7e8      	b.n	8000c2e <__divdi3+0xa2>
 8000c5c:	b912      	cbnz	r2, 8000c64 <__divdi3+0xd8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	fbb3 f5f2 	udiv	r5, r3, r2
 8000c64:	fab5 f285 	clz	r2, r5
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d139      	bne.n	8000ce0 <__divdi3+0x154>
 8000c6c:	1b7f      	subs	r7, r7, r5
 8000c6e:	0c28      	lsrs	r0, r5, #16
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	2301      	movs	r3, #1
 8000c76:	fbb7 f1f0 	udiv	r1, r7, r0
 8000c7a:	0c32      	lsrs	r2, r6, #16
 8000c7c:	fb00 7711 	mls	r7, r0, r1, r7
 8000c80:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c84:	fb0c f201 	mul.w	r2, ip, r1
 8000c88:	42ba      	cmp	r2, r7
 8000c8a:	d907      	bls.n	8000c9c <__divdi3+0x110>
 8000c8c:	197f      	adds	r7, r7, r5
 8000c8e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__divdi3+0x10e>
 8000c94:	42ba      	cmp	r2, r7
 8000c96:	f200 80c1 	bhi.w	8000e1c <__divdi3+0x290>
 8000c9a:	4641      	mov	r1, r8
 8000c9c:	1abf      	subs	r7, r7, r2
 8000c9e:	fbb7 f2f0 	udiv	r2, r7, r0
 8000ca2:	b2b6      	uxth	r6, r6
 8000ca4:	fb00 7012 	mls	r0, r0, r2, r7
 8000ca8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8000cac:	fb0c fc02 	mul.w	ip, ip, r2
 8000cb0:	4584      	cmp	ip, r0
 8000cb2:	d907      	bls.n	8000cc4 <__divdi3+0x138>
 8000cb4:	1940      	adds	r0, r0, r5
 8000cb6:	f102 37ff 	add.w	r7, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__divdi3+0x136>
 8000cbc:	4584      	cmp	ip, r0
 8000cbe:	f200 80ab 	bhi.w	8000e18 <__divdi3+0x28c>
 8000cc2:	463a      	mov	r2, r7
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	e7b1      	b.n	8000c2e <__divdi3+0xa2>
 8000cca:	43e4      	mvns	r4, r4
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	e764      	b.n	8000b9e <__divdi3+0x12>
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	f04f 34ff 	mov.w	r4, #4294967295
 8000cde:	e75b      	b.n	8000b98 <__divdi3+0xc>
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	fa27 f103 	lsr.w	r1, r7, r3
 8000cea:	0c28      	lsrs	r0, r5, #16
 8000cec:	fa26 f303 	lsr.w	r3, r6, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fbb1 f8f0 	udiv	r8, r1, r0
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fb00 1118 	mls	r1, r0, r8, r1
 8000cfe:	fa1f fc85 	uxth.w	ip, r5
 8000d02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d06:	fb0c f308 	mul.w	r3, ip, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa06 f602 	lsl.w	r6, r6, r2
 8000d10:	d908      	bls.n	8000d24 <__divdi3+0x198>
 8000d12:	1949      	adds	r1, r1, r5
 8000d14:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d18:	d279      	bcs.n	8000e0e <__divdi3+0x282>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d977      	bls.n	8000e0e <__divdi3+0x282>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4429      	add	r1, r5
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	fbb1 f3f0 	udiv	r3, r1, r0
 8000d2a:	b2bf      	uxth	r7, r7
 8000d2c:	fb00 1113 	mls	r1, r0, r3, r1
 8000d30:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d34:	fb0c f203 	mul.w	r2, ip, r3
 8000d38:	42ba      	cmp	r2, r7
 8000d3a:	d907      	bls.n	8000d4c <__divdi3+0x1c0>
 8000d3c:	197f      	adds	r7, r7, r5
 8000d3e:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d42:	d260      	bcs.n	8000e06 <__divdi3+0x27a>
 8000d44:	42ba      	cmp	r2, r7
 8000d46:	d95e      	bls.n	8000e06 <__divdi3+0x27a>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	442f      	add	r7, r5
 8000d4c:	1abf      	subs	r7, r7, r2
 8000d4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d52:	e790      	b.n	8000c76 <__divdi3+0xea>
 8000d54:	f1c8 0220 	rsb	r2, r8, #32
 8000d58:	fa03 fc08 	lsl.w	ip, r3, r8
 8000d5c:	fa25 f302 	lsr.w	r3, r5, r2
 8000d60:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d68:	fa21 f302 	lsr.w	r3, r1, r2
 8000d6c:	fa01 f708 	lsl.w	r7, r1, r8
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	fbb3 f1f9 	udiv	r1, r3, r9
 8000d78:	4317      	orrs	r7, r2
 8000d7a:	fb09 3311 	mls	r3, r9, r1, r3
 8000d7e:	0c3a      	lsrs	r2, r7, #16
 8000d80:	fa1f fb8c 	uxth.w	fp, ip
 8000d84:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d88:	fb0b fa01 	mul.w	sl, fp, r1
 8000d8c:	459a      	cmp	sl, r3
 8000d8e:	fa05 f008 	lsl.w	r0, r5, r8
 8000d92:	d908      	bls.n	8000da6 <__divdi3+0x21a>
 8000d94:	eb13 030c 	adds.w	r3, r3, ip
 8000d98:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d9c:	d235      	bcs.n	8000e0a <__divdi3+0x27e>
 8000d9e:	459a      	cmp	sl, r3
 8000da0:	d933      	bls.n	8000e0a <__divdi3+0x27e>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4463      	add	r3, ip
 8000da6:	ebca 0303 	rsb	r3, sl, r3
 8000daa:	fbb3 f2f9 	udiv	r2, r3, r9
 8000dae:	fb09 3312 	mls	r3, r9, r2, r3
 8000db2:	b2bf      	uxth	r7, r7
 8000db4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000db8:	fb0b f902 	mul.w	r9, fp, r2
 8000dbc:	45b9      	cmp	r9, r7
 8000dbe:	d908      	bls.n	8000dd2 <__divdi3+0x246>
 8000dc0:	eb17 070c 	adds.w	r7, r7, ip
 8000dc4:	f102 33ff 	add.w	r3, r2, #4294967295
 8000dc8:	d21b      	bcs.n	8000e02 <__divdi3+0x276>
 8000dca:	45b9      	cmp	r9, r7
 8000dcc:	d919      	bls.n	8000e02 <__divdi3+0x276>
 8000dce:	3a02      	subs	r2, #2
 8000dd0:	4467      	add	r7, ip
 8000dd2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8000dd6:	fba5 0100 	umull	r0, r1, r5, r0
 8000dda:	ebc9 0707 	rsb	r7, r9, r7
 8000dde:	428f      	cmp	r7, r1
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	d30a      	bcc.n	8000dfc <__divdi3+0x270>
 8000de6:	d005      	beq.n	8000df4 <__divdi3+0x268>
 8000de8:	462a      	mov	r2, r5
 8000dea:	e720      	b.n	8000c2e <__divdi3+0xa2>
 8000dec:	4662      	mov	r2, ip
 8000dee:	e701      	b.n	8000bf4 <__divdi3+0x68>
 8000df0:	463b      	mov	r3, r7
 8000df2:	e714      	b.n	8000c1e <__divdi3+0x92>
 8000df4:	fa06 f608 	lsl.w	r6, r6, r8
 8000df8:	4286      	cmp	r6, r0
 8000dfa:	d2f5      	bcs.n	8000de8 <__divdi3+0x25c>
 8000dfc:	1e6a      	subs	r2, r5, #1
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e715      	b.n	8000c2e <__divdi3+0xa2>
 8000e02:	461a      	mov	r2, r3
 8000e04:	e7e5      	b.n	8000dd2 <__divdi3+0x246>
 8000e06:	460b      	mov	r3, r1
 8000e08:	e7a0      	b.n	8000d4c <__divdi3+0x1c0>
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	e7cb      	b.n	8000da6 <__divdi3+0x21a>
 8000e0e:	4690      	mov	r8, r2
 8000e10:	e788      	b.n	8000d24 <__divdi3+0x198>
 8000e12:	4643      	mov	r3, r8
 8000e14:	4642      	mov	r2, r8
 8000e16:	e70a      	b.n	8000c2e <__divdi3+0xa2>
 8000e18:	3a02      	subs	r2, #2
 8000e1a:	e753      	b.n	8000cc4 <__divdi3+0x138>
 8000e1c:	3902      	subs	r1, #2
 8000e1e:	442f      	add	r7, r5
 8000e20:	e73c      	b.n	8000c9c <__divdi3+0x110>
 8000e22:	bf00      	nop

08000e24 <__udivdi3>:
 8000e24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e28:	4614      	mov	r4, r2
 8000e2a:	4605      	mov	r5, r0
 8000e2c:	460e      	mov	r6, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d143      	bne.n	8000eba <__udivdi3+0x96>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d953      	bls.n	8000ede <__udivdi3+0xba>
 8000e36:	fab2 f782 	clz	r7, r2
 8000e3a:	b157      	cbz	r7, 8000e52 <__udivdi3+0x2e>
 8000e3c:	f1c7 0620 	rsb	r6, r7, #32
 8000e40:	fa20 f606 	lsr.w	r6, r0, r6
 8000e44:	fa01 f307 	lsl.w	r3, r1, r7
 8000e48:	fa02 f407 	lsl.w	r4, r2, r7
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	fa00 f507 	lsl.w	r5, r0, r7
 8000e52:	0c21      	lsrs	r1, r4, #16
 8000e54:	fbb6 f2f1 	udiv	r2, r6, r1
 8000e58:	0c2b      	lsrs	r3, r5, #16
 8000e5a:	fb01 6712 	mls	r7, r1, r2, r6
 8000e5e:	b2a0      	uxth	r0, r4
 8000e60:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8000e64:	fb00 f302 	mul.w	r3, r0, r2
 8000e68:	42b3      	cmp	r3, r6
 8000e6a:	d909      	bls.n	8000e80 <__udivdi3+0x5c>
 8000e6c:	1936      	adds	r6, r6, r4
 8000e6e:	f102 37ff 	add.w	r7, r2, #4294967295
 8000e72:	f080 80f6 	bcs.w	8001062 <__udivdi3+0x23e>
 8000e76:	42b3      	cmp	r3, r6
 8000e78:	f240 80f3 	bls.w	8001062 <__udivdi3+0x23e>
 8000e7c:	3a02      	subs	r2, #2
 8000e7e:	4426      	add	r6, r4
 8000e80:	1af6      	subs	r6, r6, r3
 8000e82:	fbb6 f3f1 	udiv	r3, r6, r1
 8000e86:	b2ad      	uxth	r5, r5
 8000e88:	fb01 6113 	mls	r1, r1, r3, r6
 8000e8c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000e90:	fb00 f003 	mul.w	r0, r0, r3
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d908      	bls.n	8000eaa <__udivdi3+0x86>
 8000e98:	1909      	adds	r1, r1, r4
 8000e9a:	f103 36ff 	add.w	r6, r3, #4294967295
 8000e9e:	f080 80e2 	bcs.w	8001066 <__udivdi3+0x242>
 8000ea2:	4288      	cmp	r0, r1
 8000ea4:	f240 80df 	bls.w	8001066 <__udivdi3+0x242>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000eb8:	4770      	bx	lr
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d84a      	bhi.n	8000f54 <__udivdi3+0x130>
 8000ebe:	fab3 f683 	clz	r6, r3
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d14d      	bne.n	8000f62 <__udivdi3+0x13e>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d302      	bcc.n	8000ed0 <__udivdi3+0xac>
 8000eca:	4282      	cmp	r2, r0
 8000ecc:	f200 80d6 	bhi.w	800107c <__udivdi3+0x258>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000edc:	4770      	bx	lr
 8000ede:	b912      	cbnz	r2, 8000ee6 <__udivdi3+0xc2>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	fbb4 f4f2 	udiv	r4, r4, r2
 8000ee6:	fab4 f284 	clz	r2, r4
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d17c      	bne.n	8000fe8 <__udivdi3+0x1c4>
 8000eee:	1b09      	subs	r1, r1, r4
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	b2a7      	uxth	r7, r4
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	fbb1 f0f6 	udiv	r0, r1, r6
 8000efa:	0c2a      	lsrs	r2, r5, #16
 8000efc:	fb06 1110 	mls	r1, r6, r0, r1
 8000f00:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000f04:	fb07 f200 	mul.w	r2, r7, r0
 8000f08:	428a      	cmp	r2, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivdi3+0xf8>
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivdi3+0xf6>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	f200 80c3 	bhi.w	80010a0 <__udivdi3+0x27c>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	fbb1 f2f6 	udiv	r2, r1, r6
 8000f22:	b2ad      	uxth	r5, r5
 8000f24:	fb06 1112 	mls	r1, r6, r2, r1
 8000f28:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000f2c:	fb07 f702 	mul.w	r7, r7, r2
 8000f30:	42af      	cmp	r7, r5
 8000f32:	d908      	bls.n	8000f46 <__udivdi3+0x122>
 8000f34:	192c      	adds	r4, r5, r4
 8000f36:	f102 31ff 	add.w	r1, r2, #4294967295
 8000f3a:	f080 8096 	bcs.w	800106a <__udivdi3+0x246>
 8000f3e:	42a7      	cmp	r7, r4
 8000f40:	f240 8093 	bls.w	800106a <__udivdi3+0x246>
 8000f44:	3a02      	subs	r2, #2
 8000f46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f52:	4770      	bx	lr
 8000f54:	2300      	movs	r3, #0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f60:	4770      	bx	lr
 8000f62:	f1c6 0520 	rsb	r5, r6, #32
 8000f66:	fa22 f405 	lsr.w	r4, r2, r5
 8000f6a:	40b3      	lsls	r3, r6
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000f72:	fa21 f305 	lsr.w	r3, r1, r5
 8000f76:	fa01 f706 	lsl.w	r7, r1, r6
 8000f7a:	fa20 f505 	lsr.w	r5, r0, r5
 8000f7e:	fbb3 fcf8 	udiv	ip, r3, r8
 8000f82:	432f      	orrs	r7, r5
 8000f84:	fb08 331c 	mls	r3, r8, ip, r3
 8000f88:	0c3d      	lsrs	r5, r7, #16
 8000f8a:	fa1f fa84 	uxth.w	sl, r4
 8000f8e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8000f92:	fb0a f90c 	mul.w	r9, sl, ip
 8000f96:	4599      	cmp	r9, r3
 8000f98:	fa02 fb06 	lsl.w	fp, r2, r6
 8000f9c:	d904      	bls.n	8000fa8 <__udivdi3+0x184>
 8000f9e:	191b      	adds	r3, r3, r4
 8000fa0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000fa4:	d36d      	bcc.n	8001082 <__udivdi3+0x25e>
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	ebc9 0303 	rsb	r3, r9, r3
 8000fac:	fbb3 f5f8 	udiv	r5, r3, r8
 8000fb0:	fb08 3315 	mls	r3, r8, r5, r3
 8000fb4:	b2bf      	uxth	r7, r7
 8000fb6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000fba:	fb0a f805 	mul.w	r8, sl, r5
 8000fbe:	45b8      	cmp	r8, r7
 8000fc0:	d904      	bls.n	8000fcc <__udivdi3+0x1a8>
 8000fc2:	193f      	adds	r7, r7, r4
 8000fc4:	f105 33ff 	add.w	r3, r5, #4294967295
 8000fc8:	d361      	bcc.n	800108e <__udivdi3+0x26a>
 8000fca:	461d      	mov	r5, r3
 8000fcc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8000fd0:	fbac 230b 	umull	r2, r3, ip, fp
 8000fd4:	ebc8 0707 	rsb	r7, r8, r7
 8000fd8:	429f      	cmp	r7, r3
 8000fda:	f04f 0500 	mov.w	r5, #0
 8000fde:	d349      	bcc.n	8001074 <__udivdi3+0x250>
 8000fe0:	d045      	beq.n	800106e <__udivdi3+0x24a>
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e763      	b.n	8000eb0 <__udivdi3+0x8c>
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	f1c2 0320 	rsb	r3, r2, #32
 8000fee:	fa21 fc03 	lsr.w	ip, r1, r3
 8000ff2:	0c26      	lsrs	r6, r4, #16
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa01 f502 	lsl.w	r5, r1, r2
 8000ffc:	fbbc f8f6 	udiv	r8, ip, r6
 8001000:	ea43 0105 	orr.w	r1, r3, r5
 8001004:	0c0b      	lsrs	r3, r1, #16
 8001006:	fb06 cc18 	mls	ip, r6, r8, ip
 800100a:	b2a7      	uxth	r7, r4
 800100c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8001010:	fb07 f308 	mul.w	r3, r7, r8
 8001014:	4563      	cmp	r3, ip
 8001016:	fa00 f502 	lsl.w	r5, r0, r2
 800101a:	d909      	bls.n	8001030 <__udivdi3+0x20c>
 800101c:	eb1c 0c04 	adds.w	ip, ip, r4
 8001020:	f108 32ff 	add.w	r2, r8, #4294967295
 8001024:	d23a      	bcs.n	800109c <__udivdi3+0x278>
 8001026:	4563      	cmp	r3, ip
 8001028:	d938      	bls.n	800109c <__udivdi3+0x278>
 800102a:	f1a8 0802 	sub.w	r8, r8, #2
 800102e:	44a4      	add	ip, r4
 8001030:	ebc3 0c0c 	rsb	ip, r3, ip
 8001034:	fbbc f3f6 	udiv	r3, ip, r6
 8001038:	b289      	uxth	r1, r1
 800103a:	fb06 cc13 	mls	ip, r6, r3, ip
 800103e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001042:	fb07 f203 	mul.w	r2, r7, r3
 8001046:	428a      	cmp	r2, r1
 8001048:	d907      	bls.n	800105a <__udivdi3+0x236>
 800104a:	1909      	adds	r1, r1, r4
 800104c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001050:	d222      	bcs.n	8001098 <__udivdi3+0x274>
 8001052:	428a      	cmp	r2, r1
 8001054:	d920      	bls.n	8001098 <__udivdi3+0x274>
 8001056:	3b02      	subs	r3, #2
 8001058:	4421      	add	r1, r4
 800105a:	1a89      	subs	r1, r1, r2
 800105c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001060:	e749      	b.n	8000ef6 <__udivdi3+0xd2>
 8001062:	463a      	mov	r2, r7
 8001064:	e70c      	b.n	8000e80 <__udivdi3+0x5c>
 8001066:	4633      	mov	r3, r6
 8001068:	e71f      	b.n	8000eaa <__udivdi3+0x86>
 800106a:	460a      	mov	r2, r1
 800106c:	e76b      	b.n	8000f46 <__udivdi3+0x122>
 800106e:	40b0      	lsls	r0, r6
 8001070:	4290      	cmp	r0, r2
 8001072:	d2b6      	bcs.n	8000fe2 <__udivdi3+0x1be>
 8001074:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001078:	2300      	movs	r3, #0
 800107a:	e719      	b.n	8000eb0 <__udivdi3+0x8c>
 800107c:	4633      	mov	r3, r6
 800107e:	4632      	mov	r2, r6
 8001080:	e716      	b.n	8000eb0 <__udivdi3+0x8c>
 8001082:	4599      	cmp	r9, r3
 8001084:	d98f      	bls.n	8000fa6 <__udivdi3+0x182>
 8001086:	f1ac 0c02 	sub.w	ip, ip, #2
 800108a:	4423      	add	r3, r4
 800108c:	e78c      	b.n	8000fa8 <__udivdi3+0x184>
 800108e:	45b8      	cmp	r8, r7
 8001090:	d99b      	bls.n	8000fca <__udivdi3+0x1a6>
 8001092:	3d02      	subs	r5, #2
 8001094:	4427      	add	r7, r4
 8001096:	e799      	b.n	8000fcc <__udivdi3+0x1a8>
 8001098:	4603      	mov	r3, r0
 800109a:	e7de      	b.n	800105a <__udivdi3+0x236>
 800109c:	4690      	mov	r8, r2
 800109e:	e7c7      	b.n	8001030 <__udivdi3+0x20c>
 80010a0:	3802      	subs	r0, #2
 80010a2:	4421      	add	r1, r4
 80010a4:	e73a      	b.n	8000f1c <__udivdi3+0xf8>
 80010a6:	bf00      	nop

080010a8 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80010ac:	6805      	ldr	r5, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80010ae:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80010b0:	692a      	ldr	r2, [r5, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010b2:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80010b4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b8:	68a1      	ldr	r1, [r4, #8]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80010ba:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010bc:	69c2      	ldr	r2, [r0, #28]
 80010be:	6900      	ldr	r0, [r0, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80010c0:	612b      	str	r3, [r5, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80010c2:	68eb      	ldr	r3, [r5, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010c4:	4308      	orrs	r0, r1
 80010c6:	6961      	ldr	r1, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80010c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010cc:	4301      	orrs	r1, r0
 80010ce:	4311      	orrs	r1, r2

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80010d0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010d4:	430b      	orrs	r3, r1
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80010d6:	60eb      	str	r3, [r5, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80010d8:	6969      	ldr	r1, [r5, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80010da:	69a3      	ldr	r3, [r4, #24]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80010dc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80010e0:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 80010e6:	616b      	str	r3, [r5, #20]
 80010e8:	4b7d      	ldr	r3, [pc, #500]	; (80012e0 <UART_SetConfig+0x238>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010ea:	d17c      	bne.n	80011e6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010ec:	429d      	cmp	r5, r3
 80010ee:	d003      	beq.n	80010f8 <UART_SetConfig+0x50>
 80010f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010f4:	429d      	cmp	r5, r3
 80010f6:	d132      	bne.n	800115e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010f8:	f000 fe42 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	2719      	movs	r7, #25
 8001100:	4378      	muls	r0, r7
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fbb0 f9f3 	udiv	r9, r0, r3
 8001108:	f000 fe3a 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800110c:	6863      	ldr	r3, [r4, #4]
 800110e:	4378      	muls	r0, r7
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fbb0 f8f3 	udiv	r8, r0, r3
 8001116:	f000 fe33 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	4378      	muls	r0, r7
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2664      	movs	r6, #100	; 0x64
 8001122:	fbb0 f3f3 	udiv	r3, r0, r3
 8001126:	fbb3 f3f6 	udiv	r3, r3, r6
 800112a:	fb06 8813 	mls	r8, r6, r3, r8
 800112e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001132:	f000 fe25 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8001136:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	fbb8 f8f6 	udiv	r8, r8, r6
 8001140:	fbb9 f9f6 	udiv	r9, r9, r6
 8001144:	4378      	muls	r0, r7
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 800114c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001150:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001154:	fbb0 faf3 	udiv	sl, r0, r3
 8001158:	f000 fe12 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800115c:	e031      	b.n	80011c2 <UART_SetConfig+0x11a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800115e:	f000 fdf9 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	2719      	movs	r7, #25
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4378      	muls	r0, r7
 800116a:	fbb0 f9f3 	udiv	r9, r0, r3
 800116e:	f000 fdf1 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	4378      	muls	r0, r7
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fbb0 f8f3 	udiv	r8, r0, r3
 800117c:	f000 fdea 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	4378      	muls	r0, r7
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2664      	movs	r6, #100	; 0x64
 8001188:	fbb0 f3f3 	udiv	r3, r0, r3
 800118c:	fbb3 f3f6 	udiv	r3, r3, r6
 8001190:	fb06 8813 	mls	r8, r6, r3, r8
 8001194:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001198:	f000 fddc 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 800119c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80011a0:	6863      	ldr	r3, [r4, #4]
 80011a2:	fbb8 f8f6 	udiv	r8, r8, r6
 80011a6:	fbb9 f9f6 	udiv	r9, r9, r6
 80011aa:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80011ae:	4378      	muls	r0, r7
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80011b6:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80011ba:	fbb0 faf3 	udiv	sl, r0, r3
 80011be:	f000 fdc9 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 80011c2:	6863      	ldr	r3, [r4, #4]
 80011c4:	4378      	muls	r0, r7
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fbb0 f7f3 	udiv	r7, r0, r3
 80011cc:	fbb7 f7f6 	udiv	r7, r7, r6
 80011d0:	fb06 aa17 	mls	sl, r6, r7, sl
 80011d4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80011d8:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 80011dc:	fbba f6f6 	udiv	r6, sl, r6
 80011e0:	f006 0607 	and.w	r6, r6, #7
 80011e4:	e076      	b.n	80012d4 <UART_SetConfig+0x22c>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011e6:	429d      	cmp	r5, r3
 80011e8:	d002      	beq.n	80011f0 <UART_SetConfig+0x148>
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <UART_SetConfig+0x23c>)
 80011ec:	429d      	cmp	r5, r3
 80011ee:	d130      	bne.n	8001252 <UART_SetConfig+0x1aa>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011f0:	f000 fdc6 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 80011f4:	6863      	ldr	r3, [r4, #4]
 80011f6:	2719      	movs	r7, #25
 80011f8:	4378      	muls	r0, r7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fbb0 f8f3 	udiv	r8, r0, r3
 8001200:	f000 fdbe 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	4378      	muls	r0, r7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	fbb0 f9f3 	udiv	r9, r0, r3
 800120e:	f000 fdb7 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8001212:	6863      	ldr	r3, [r4, #4]
 8001214:	4378      	muls	r0, r7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	2664      	movs	r6, #100	; 0x64
 800121a:	fbb0 f3f3 	udiv	r3, r0, r3
 800121e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001222:	fb06 9913 	mls	r9, r6, r3, r9
 8001226:	f000 fdab 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800122a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800122e:	6863      	ldr	r3, [r4, #4]
 8001230:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001234:	fbb8 f8f6 	udiv	r8, r8, r6
 8001238:	fbb9 f9f6 	udiv	r9, r9, r6
 800123c:	4378      	muls	r0, r7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001244:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 8001248:	fbb0 faf3 	udiv	sl, r0, r3
 800124c:	f000 fd98 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 8001250:	e02f      	b.n	80012b2 <UART_SetConfig+0x20a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001252:	f000 fd7f 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001256:	6863      	ldr	r3, [r4, #4]
 8001258:	2719      	movs	r7, #25
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4378      	muls	r0, r7
 800125e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001262:	f000 fd77 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001266:	6863      	ldr	r3, [r4, #4]
 8001268:	4378      	muls	r0, r7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fbb0 f9f3 	udiv	r9, r0, r3
 8001270:	f000 fd70 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8001274:	6863      	ldr	r3, [r4, #4]
 8001276:	4378      	muls	r0, r7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	2664      	movs	r6, #100	; 0x64
 800127c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001280:	fbb3 f3f6 	udiv	r3, r3, r6
 8001284:	fb06 9913 	mls	r9, r6, r3, r9
 8001288:	f000 fd64 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 800128c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001290:	6863      	ldr	r3, [r4, #4]
 8001292:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001296:	fbb8 f8f6 	udiv	r8, r8, r6
 800129a:	fbb9 f9f6 	udiv	r9, r9, r6
 800129e:	4378      	muls	r0, r7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80012a6:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 80012aa:	fbb0 faf3 	udiv	sl, r0, r3
 80012ae:	f000 fd51 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	4378      	muls	r0, r7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80012bc:	fbb7 f7f6 	udiv	r7, r7, r6
 80012c0:	fb06 aa17 	mls	sl, r6, r7, sl
 80012c4:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 80012c8:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 80012cc:	fbba f6f6 	udiv	r6, sl, r6
 80012d0:	f006 060f 	and.w	r6, r6, #15
 80012d4:	444e      	add	r6, r9
 80012d6:	4446      	add	r6, r8
 80012d8:	60ae      	str	r6, [r5, #8]
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	bf00      	nop
 80012e0:	40011000 	.word	0x40011000
 80012e4:	40011400 	.word	0x40011400

080012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	4604      	mov	r4, r0
 80012ec:	460e      	mov	r6, r1
 80012ee:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012f0:	f000 ffc0 	bl	8002274 <HAL_GetTick>
 80012f4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	4033      	ands	r3, r6
 80012fc:	42b3      	cmp	r3, r6
 80012fe:	d023      	beq.n	8001348 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001300:	1c6b      	adds	r3, r5, #1
 8001302:	d0f9      	beq.n	80012f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x10>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001304:	b9d5      	cbnz	r5, 800133c <UART_WaitOnFlagUntilTimeout.constprop.0+0x54>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001306:	6823      	ldr	r3, [r4, #0]
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800130e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	f022 0220 	bic.w	r2, r2, #32
 8001316:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800131e:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	615a      	str	r2, [r3, #20]

          huart->gState= HAL_UART_STATE_READY;
 8001328:	2320      	movs	r3, #32
 800132a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	  	  huart->RxState= HAL_UART_STATE_READY;
 800132e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001332:	2300      	movs	r3, #0
 8001334:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

          return HAL_TIMEOUT;
 8001338:	2003      	movs	r0, #3
 800133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800133c:	f000 ff9a 	bl	8002274 <HAL_GetTick>
 8001340:	1bc0      	subs	r0, r0, r7
 8001342:	42a8      	cmp	r0, r5
 8001344:	d9d7      	bls.n	80012f6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xe>
 8001346:	e7de      	b.n	8001306 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001348:	2000      	movs	r0, #0
}
 800134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800134c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800134c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800134e:	4604      	mov	r4, r0
 8001350:	b340      	cbz	r0, 80013a4 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001352:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001356:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800135a:	b91b      	cbnz	r3, 8001364 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800135c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001360:	f001 f9b0 	bl	80026c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001364:	2324      	movs	r3, #36	; 0x24
 8001366:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001372:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fe97 	bl	80010a8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001382:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800138a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001392:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001394:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001396:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001398:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800139a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800139e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80013a2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80013a4:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80013a6:	bd10      	pop	{r4, pc}

080013a8 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80013a8:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80013aa:	4604      	mov	r4, r0
 80013ac:	b168      	cbz	r0, 80013ca <HAL_UART_DeInit+0x22>
  }
  
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80013ae:	2324      	movs	r3, #36	; 0x24
 80013b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80013b4:	f001 f9da 	bl	800276c <HAL_UART_MspDeInit>
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b8:	2000      	movs	r0, #0
 80013ba:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Lock */
  __HAL_UNLOCK(huart);
 80013bc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
  
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState = HAL_UART_STATE_RESET;
 80013c0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80013c4:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a

  /* Process Lock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80013c8:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80013ca:	2001      	movs	r0, #1

  /* Process Lock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 80013cc:	bd10      	pop	{r4, pc}

080013ce <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013ce:	b570      	push	{r4, r5, r6, lr}
 80013d0:	461e      	mov	r6, r3
  uint16_t* tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80013d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013d6:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
  uint16_t* tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80013dc:	d143      	bne.n	8001466 <HAL_UART_Transmit+0x98>
  {
    if((pData == NULL ) || (Size == 0U)) 
 80013de:	2900      	cmp	r1, #0
 80013e0:	d03f      	beq.n	8001462 <HAL_UART_Transmit+0x94>
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	d03d      	beq.n	8001462 <HAL_UART_Transmit+0x94>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80013e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d03b      	beq.n	8001466 <HAL_UART_Transmit+0x98>
 80013ee:	2301      	movs	r3, #1
 80013f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013f8:	2321      	movs	r3, #33	; 0x21
 80013fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    huart->TxXferSize = Size;
 80013fe:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001400:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001402:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001404:	b303      	cbz	r3, 8001448 <HAL_UART_Transmit+0x7a>
    {
      huart->TxXferCount--;
 8001406:	3b01      	subs	r3, #1
 8001408:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800140a:	68a3      	ldr	r3, [r4, #8]
 800140c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001410:	4620      	mov	r0, r4
 8001412:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001416:	4632      	mov	r2, r6
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001418:	d10d      	bne.n	8001436 <HAL_UART_Transmit+0x68>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800141a:	f7ff ff65 	bl	80012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800141e:	b108      	cbz	r0, 8001424 <HAL_UART_Transmit+0x56>
        { 
          return HAL_TIMEOUT;
 8001420:	2003      	movs	r0, #3
 8001422:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8001424:	882a      	ldrh	r2, [r5, #0]
 8001426:	6823      	ldr	r3, [r4, #0]
 8001428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800142c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800142e:	6923      	ldr	r3, [r4, #16]
 8001430:	b943      	cbnz	r3, 8001444 <HAL_UART_Transmit+0x76>
        {
          pData +=2U;
 8001432:	3502      	adds	r5, #2
 8001434:	e7e5      	b.n	8001402 <HAL_UART_Transmit+0x34>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001436:	f7ff ff57 	bl	80012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800143a:	2800      	cmp	r0, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_UART_Transmit+0x52>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	782a      	ldrb	r2, [r5, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	3501      	adds	r5, #1
 8001446:	e7dc      	b.n	8001402 <HAL_UART_Transmit+0x34>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8001448:	4620      	mov	r0, r4
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4632      	mov	r2, r6
 800144e:	f7ff ff4b 	bl	80012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001452:	2800      	cmp	r0, #0
 8001454:	d1e4      	bne.n	8001420 <HAL_UART_Transmit+0x52>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001456:	2320      	movs	r3, #32
 8001458:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800145c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8001460:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8001462:	2001      	movs	r0, #1
 8001464:	bd70      	pop	{r4, r5, r6, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001466:	2002      	movs	r0, #2
  }
}
 8001468:	bd70      	pop	{r4, r5, r6, pc}

0800146a <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 800146a:	b570      	push	{r4, r5, r6, lr}
 800146c:	461e      	mov	r6, r3
  uint16_t* tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800146e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001472:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
  uint16_t* tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001478:	d145      	bne.n	8001506 <HAL_UART_Receive+0x9c>
  { 
    if((pData == NULL ) || (Size == 0U)) 
 800147a:	2900      	cmp	r1, #0
 800147c:	d041      	beq.n	8001502 <HAL_UART_Receive+0x98>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d03f      	beq.n	8001502 <HAL_UART_Receive+0x98>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001482:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001486:	2b01      	cmp	r3, #1
 8001488:	d03d      	beq.n	8001506 <HAL_UART_Receive+0x9c>
 800148a:	2301      	movs	r3, #1
 800148c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001494:	2322      	movs	r3, #34	; 0x22
 8001496:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        
    huart->RxXferSize = Size; 
 800149a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800149c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800149e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 80014a0:	b348      	cbz	r0, 80014f6 <HAL_UART_Receive+0x8c>
    {
      huart->RxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014a2:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferCount = Size;
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 80014a4:	3801      	subs	r0, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 80014aa:	85e0      	strh	r0, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80014ac:	f04f 0120 	mov.w	r1, #32
 80014b0:	4620      	mov	r0, r4
 80014b2:	4632      	mov	r2, r6
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014b4:	d111      	bne.n	80014da <HAL_UART_Receive+0x70>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80014b6:	f7ff ff17 	bl	80012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80014ba:	b108      	cbz	r0, 80014c0 <HAL_UART_Receive+0x56>
        { 
          return HAL_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
 80014be:	bd70      	pop	{r4, r5, r6, pc}
 80014c0:	6823      	ldr	r3, [r4, #0]
        }
        tmp = (uint16_t*) pData;
        if(huart->Init.Parity == UART_PARITY_NONE)
 80014c2:	6922      	ldr	r2, [r4, #16]
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80014c4:	685b      	ldr	r3, [r3, #4]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
        }
        tmp = (uint16_t*) pData;
        if(huart->Init.Parity == UART_PARITY_NONE)
 80014c6:	b922      	cbnz	r2, 80014d2 <HAL_UART_Receive+0x68>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	f825 3b02 	strh.w	r3, [r5], #2
 80014d0:	e7e5      	b.n	800149e <HAL_UART_Receive+0x34>
          pData +=2U;
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f825 3b01 	strh.w	r3, [r5], #1
 80014d8:	e7e1      	b.n	800149e <HAL_UART_Receive+0x34>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80014da:	f7ff ff05 	bl	80012e8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d1ec      	bne.n	80014bc <HAL_UART_Receive+0x52>
 80014e2:	6822      	ldr	r2, [r4, #0]
        { 
          return HAL_TIMEOUT;
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80014e4:	6921      	ldr	r1, [r4, #16]
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80014e6:	6852      	ldr	r2, [r2, #4]
 80014e8:	1c6b      	adds	r3, r5, #1
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80014ea:	b109      	cbz	r1, 80014f0 <HAL_UART_Receive+0x86>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80014ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014f0:	702a      	strb	r2, [r5, #0]
 80014f2:	461d      	mov	r5, r3
 80014f4:	e7d3      	b.n	800149e <HAL_UART_Receive+0x34>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80014f6:	2320      	movs	r3, #32
 80014f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8001500:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  { 
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8001502:	2001      	movs	r0, #1
 8001504:	bd70      	pop	{r4, r5, r6, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 8001506:	2002      	movs	r0, #2
  }
}
 8001508:	bd70      	pop	{r4, r5, r6, pc}

0800150a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800150a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800150e:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001510:	b510      	push	{r4, lr}
 8001512:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001516:	d018      	beq.n	800154a <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800151c:	6803      	ldr	r3, [r0, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001524:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001526:	685c      	ldr	r4, [r3, #4]
 8001528:	680a      	ldr	r2, [r1, #0]
 800152a:	4322      	orrs	r2, r4
 800152c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001534:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001536:	689c      	ldr	r4, [r3, #8]
 8001538:	684a      	ldr	r2, [r1, #4]
 800153a:	4322      	orrs	r2, r4
 800153c:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800153e:	2301      	movs	r3, #1
 8001540:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001544:	2300      	movs	r3, #0
 8001546:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800154a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800154c:	bd10      	pop	{r4, pc}

0800154e <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800154e:	4770      	bx	lr

08001550 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001550:	4770      	bx	lr

08001552 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001552:	6803      	ldr	r3, [r0, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001564:	2000      	movs	r0, #0
 8001566:	4770      	bx	lr

08001568 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001568:	4770      	bx	lr

0800156a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800156a:	4770      	bx	lr

0800156c <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800156c:	4770      	bx	lr

0800156e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800156e:	4770      	bx	lr

08001570 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001570:	4770      	bx	lr

08001572 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001572:	6803      	ldr	r3, [r0, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001578:	b510      	push	{r4, lr}
 800157a:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800157c:	d514      	bpl.n	80015a8 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	0792      	lsls	r2, r2, #30
 8001582:	d511      	bpl.n	80015a8 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001584:	f06f 0202 	mvn.w	r2, #2
 8001588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800158a:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800158c:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800158e:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001590:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001592:	d002      	beq.n	800159a <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001594:	f7ff ffea 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 8001598:	e004      	b.n	80015a4 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	f7ff ffe6 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159e:	4620      	mov	r0, r4
 80015a0:	f7ff ffe5 	bl	800156e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a4:	2300      	movs	r3, #0
 80015a6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	0750      	lsls	r0, r2, #29
 80015ae:	d516      	bpl.n	80015de <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	0751      	lsls	r1, r2, #29
 80015b4:	d513      	bpl.n	80015de <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015b6:	f06f 0204 	mvn.w	r2, #4
 80015ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015bc:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015be:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c0:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015c4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015c8:	d002      	beq.n	80015d0 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015ca:	f7ff ffcf 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 80015ce:	e004      	b.n	80015da <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d0:	f7ff ffcb 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	4620      	mov	r0, r4
 80015d6:	f7ff ffca 	bl	800156e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	2300      	movs	r3, #0
 80015dc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	0712      	lsls	r2, r2, #28
 80015e4:	d515      	bpl.n	8001612 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	0710      	lsls	r0, r2, #28
 80015ea:	d512      	bpl.n	8001612 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015ec:	f06f 0208 	mvn.w	r2, #8
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f2:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f4:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f6:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015fc:	d002      	beq.n	8001604 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015fe:	f7ff ffb5 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 8001602:	e004      	b.n	800160e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001604:	f7ff ffb1 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff ffb0 	bl	800156e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	2300      	movs	r3, #0
 8001610:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	06d2      	lsls	r2, r2, #27
 8001618:	d516      	bpl.n	8001648 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	06d0      	lsls	r0, r2, #27
 800161e:	d513      	bpl.n	8001648 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001620:	f06f 0210 	mvn.w	r2, #16
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001626:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001628:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800162a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800162e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001630:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001632:	d002      	beq.n	800163a <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	f7ff ff9a 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 8001638:	e004      	b.n	8001644 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163a:	f7ff ff96 	bl	800156a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff ff95 	bl	800156e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001644:	2300      	movs	r3, #0
 8001646:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	07d1      	lsls	r1, r2, #31
 800164e:	d508      	bpl.n	8001662 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	07d2      	lsls	r2, r2, #31
 8001654:	d505      	bpl.n	8001662 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001656:	f06f 0201 	mvn.w	r2, #1
 800165a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff83 	bl	8001568 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	0610      	lsls	r0, r2, #24
 8001668:	d508      	bpl.n	800167c <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	0611      	lsls	r1, r2, #24
 800166e:	d505      	bpl.n	800167c <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001674:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff ff6a 	bl	8001550 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	0652      	lsls	r2, r2, #25
 8001682:	d508      	bpl.n	8001696 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	0650      	lsls	r0, r2, #25
 8001688:	d505      	bpl.n	8001696 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800168a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800168e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff ff6d 	bl	8001570 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	0691      	lsls	r1, r2, #26
 800169c:	d50a      	bpl.n	80016b4 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	0692      	lsls	r2, r2, #26
 80016a2:	d507      	bpl.n	80016b4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016a4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016a8:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80016ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80016b0:	f7ff bf4d 	b.w	800154e <HAL_TIMEx_CommutationCallback>
 80016b4:	bd10      	pop	{r4, pc}
	...

080016b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016b8:	4a2e      	ldr	r2, [pc, #184]	; (8001774 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 80016ba:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80016bc:	4290      	cmp	r0, r2
 80016be:	d012      	beq.n	80016e6 <TIM_Base_SetConfig+0x2e>
 80016c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016c4:	d00f      	beq.n	80016e6 <TIM_Base_SetConfig+0x2e>
 80016c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016ca:	4290      	cmp	r0, r2
 80016cc:	d00b      	beq.n	80016e6 <TIM_Base_SetConfig+0x2e>
 80016ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d007      	beq.n	80016e6 <TIM_Base_SetConfig+0x2e>
 80016d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016da:	4290      	cmp	r0, r2
 80016dc:	d003      	beq.n	80016e6 <TIM_Base_SetConfig+0x2e>
 80016de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016e2:	4290      	cmp	r0, r2
 80016e4:	d118      	bne.n	8001718 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016e6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016ec:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016ee:	4a21      	ldr	r2, [pc, #132]	; (8001774 <TIM_Base_SetConfig+0xbc>)
 80016f0:	4290      	cmp	r0, r2
 80016f2:	d037      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 80016f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f8:	d034      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <TIM_Base_SetConfig+0xc0>)
 80016fc:	4290      	cmp	r0, r2
 80016fe:	d031      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001700:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001704:	4290      	cmp	r0, r2
 8001706:	d02d      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170c:	4290      	cmp	r0, r2
 800170e:	d029      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001710:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001714:	4290      	cmp	r0, r2
 8001716:	d025      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <TIM_Base_SetConfig+0xc4>)
 800171a:	4290      	cmp	r0, r2
 800171c:	d022      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 800171e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001722:	4290      	cmp	r0, r2
 8001724:	d01e      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172a:	4290      	cmp	r0, r2
 800172c:	d01a      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 800172e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001732:	4290      	cmp	r0, r2
 8001734:	d016      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 8001736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173a:	4290      	cmp	r0, r2
 800173c:	d012      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
 800173e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001742:	4290      	cmp	r0, r2
 8001744:	d00e      	beq.n	8001764 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001746:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001748:	688b      	ldr	r3, [r1, #8]
 800174a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800174c:	680b      	ldr	r3, [r1, #0]
 800174e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <TIM_Base_SetConfig+0xbc>)
 8001752:	4298      	cmp	r0, r3
 8001754:	d00b      	beq.n	800176e <TIM_Base_SetConfig+0xb6>
 8001756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800175a:	4298      	cmp	r0, r3
 800175c:	d007      	beq.n	800176e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800175e:	2301      	movs	r3, #1
 8001760:	6143      	str	r3, [r0, #20]
 8001762:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001764:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800176a:	4313      	orrs	r3, r2
 800176c:	e7eb      	b.n	8001746 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800176e:	690b      	ldr	r3, [r1, #16]
 8001770:	6303      	str	r3, [r0, #48]	; 0x30
 8001772:	e7f4      	b.n	800175e <TIM_Base_SetConfig+0xa6>
 8001774:	40010000 	.word	0x40010000
 8001778:	40000400 	.word	0x40000400
 800177c:	40014000 	.word	0x40014000

08001780 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001780:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001782:	4604      	mov	r4, r0
 8001784:	b1a0      	cbz	r0, 80017b0 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001786:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800178a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800178e:	b91b      	cbnz	r3, 8001798 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001790:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001794:	f000 ff78 	bl	8002688 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001798:	2302      	movs	r3, #2
 800179a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800179e:	6820      	ldr	r0, [r4, #0]
 80017a0:	1d21      	adds	r1, r4, #4
 80017a2:	f7ff ff89 	bl	80016b8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80017ac:	2000      	movs	r0, #0
 80017ae:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 80017b2:	bd10      	pop	{r4, pc}

080017b4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	d403      	bmi.n	80017c8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	079d      	lsls	r5, r3, #30
 80017c4:	d44f      	bmi.n	8001866 <HAL_RCC_OscConfig+0xb2>
 80017c6:	e09a      	b.n	80018fe <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c8:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	f002 020c 	and.w	r2, r2, #12
 80017d0:	2a04      	cmp	r2, #4
 80017d2:	d010      	beq.n	80017f6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	f002 020c 	and.w	r2, r2, #12
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017da:	2a08      	cmp	r2, #8
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0258      	lsls	r0, r3, #9
 80017e2:	d408      	bmi.n	80017f6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e4:	4b84      	ldr	r3, [pc, #528]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ec:	2a0c      	cmp	r2, #12
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0259      	lsls	r1, r3, #9
 80017f4:	d508      	bpl.n	8001808 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	039a      	lsls	r2, r3, #14
 80017fc:	d5e0      	bpl.n	80017c0 <HAL_RCC_OscConfig+0xc>
 80017fe:	6863      	ldr	r3, [r4, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1dd      	bne.n	80017c0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
 8001806:	e169      	b.n	8001adc <HAL_RCC_OscConfig+0x328>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001808:	4d7c      	ldr	r5, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x248>)
 800180a:	2300      	movs	r3, #0
 800180c:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f000 fd31 	bl	8002274 <HAL_GetTick>
 8001812:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001814:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	039b      	lsls	r3, r3, #14
 800181a:	d506      	bpl.n	800182a <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181c:	f000 fd2a 	bl	8002274 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2864      	cmp	r0, #100	; 0x64
 8001824:	d9f6      	bls.n	8001814 <HAL_RCC_OscConfig+0x60>
        {
          return HAL_TIMEOUT;
 8001826:	2003      	movs	r0, #3
 8001828:	e158      	b.n	8001adc <HAL_RCC_OscConfig+0x328>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	7923      	ldrb	r3, [r4, #4]
 800182c:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800182e:	6863      	ldr	r3, [r4, #4]
 8001830:	b163      	cbz	r3, 800184c <HAL_RCC_OscConfig+0x98>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f000 fd1f 	bl	8002274 <HAL_GetTick>
 8001836:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	039f      	lsls	r7, r3, #14
 800183e:	d4bf      	bmi.n	80017c0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001840:	f000 fd18 	bl	8002274 <HAL_GetTick>
 8001844:	1b40      	subs	r0, r0, r5
 8001846:	2864      	cmp	r0, #100	; 0x64
 8001848:	d9f6      	bls.n	8001838 <HAL_RCC_OscConfig+0x84>
 800184a:	e7ec      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f000 fd12 	bl	8002274 <HAL_GetTick>
 8001850:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b69      	ldr	r3, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	039e      	lsls	r6, r3, #14
 8001858:	d5b2      	bpl.n	80017c0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185a:	f000 fd0b 	bl	8002274 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2864      	cmp	r0, #100	; 0x64
 8001862:	d9f6      	bls.n	8001852 <HAL_RCC_OscConfig+0x9e>
 8001864:	e7df      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	f012 0f0c 	tst.w	r2, #12
 800186e:	d010      	beq.n	8001892 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f002 020c 	and.w	r2, r2, #12
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001876:	2a08      	cmp	r2, #8
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0xcc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0258      	lsls	r0, r3, #9
 800187e:	d508      	bpl.n	8001892 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001880:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	f002 020c 	and.w	r2, r2, #12
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001888:	2a0c      	cmp	r2, #12
 800188a:	d10a      	bne.n	80018a2 <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	0259      	lsls	r1, r3, #9
 8001890:	d407      	bmi.n	80018a2 <HAL_RCC_OscConfig+0xee>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	0792      	lsls	r2, r2, #30
 8001898:	d515      	bpl.n	80018c6 <HAL_RCC_OscConfig+0x112>
 800189a:	68e2      	ldr	r2, [r4, #12]
 800189c:	2a01      	cmp	r2, #1
 800189e:	d1b1      	bne.n	8001804 <HAL_RCC_OscConfig+0x50>
 80018a0:	e011      	b.n	80018c6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a2:	68e2      	ldr	r2, [r4, #12]
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <HAL_RCC_OscConfig+0x24c>)
 80018a6:	b1e2      	cbz	r2, 80018e2 <HAL_RCC_OscConfig+0x12e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f000 fce2 	bl	8002274 <HAL_GetTick>
 80018b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	0797      	lsls	r7, r2, #30
 80018b8:	d405      	bmi.n	80018c6 <HAL_RCC_OscConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ba:	f000 fcdb 	bl	8002274 <HAL_GetTick>
 80018be:	1b40      	subs	r0, r0, r5
 80018c0:	2802      	cmp	r0, #2
 80018c2:	d9f6      	bls.n	80018b2 <HAL_RCC_OscConfig+0xfe>
 80018c4:	e7af      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	21f8      	movs	r1, #248	; 0xf8
 80018ca:	fa91 f1a1 	rbit	r1, r1
 80018ce:	6923      	ldr	r3, [r4, #16]
 80018d0:	fab1 f181 	clz	r1, r1
 80018d4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018d8:	408b      	lsls	r3, r1
 80018da:	4313      	orrs	r3, r2
 80018dc:	4a46      	ldr	r2, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e00d      	b.n	80018fe <HAL_RCC_OscConfig+0x14a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f000 fcc6 	bl	8002274 <HAL_GetTick>
 80018e8:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	079e      	lsls	r6, r3, #30
 80018f0:	d505      	bpl.n	80018fe <HAL_RCC_OscConfig+0x14a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f2:	f000 fcbf 	bl	8002274 <HAL_GetTick>
 80018f6:	1b40      	subs	r0, r0, r5
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d9f6      	bls.n	80018ea <HAL_RCC_OscConfig+0x136>
 80018fc:	e793      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	071d      	lsls	r5, r3, #28
 8001902:	d403      	bmi.n	800190c <HAL_RCC_OscConfig+0x158>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	0758      	lsls	r0, r3, #29
 8001908:	d54d      	bpl.n	80019a6 <HAL_RCC_OscConfig+0x1f2>
 800190a:	e01f      	b.n	800194c <HAL_RCC_OscConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190c:	6962      	ldr	r2, [r4, #20]
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_RCC_OscConfig+0x250>)
 8001910:	b172      	cbz	r2, 8001930 <HAL_RCC_OscConfig+0x17c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f000 fcad 	bl	8002274 <HAL_GetTick>
 800191a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	0799      	lsls	r1, r3, #30
 8001922:	d4ef      	bmi.n	8001904 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f000 fca6 	bl	8002274 <HAL_GetTick>
 8001928:	1b40      	subs	r0, r0, r5
 800192a:	2802      	cmp	r0, #2
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x168>
 800192e:	e77a      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001930:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f000 fc9f 	bl	8002274 <HAL_GetTick>
 8001936:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 800193a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193c:	079a      	lsls	r2, r3, #30
 800193e:	d5e1      	bpl.n	8001904 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001940:	f000 fc98 	bl	8002274 <HAL_GetTick>
 8001944:	1b40      	subs	r0, r0, r5
 8001946:	2802      	cmp	r0, #2
 8001948:	d9f6      	bls.n	8001938 <HAL_RCC_OscConfig+0x184>
 800194a:	e76c      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 8001952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001954:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x254>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800196c:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800196e:	f000 fc81 	bl	8002274 <HAL_GetTick>
 8001972:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_OscConfig+0x254>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	05db      	lsls	r3, r3, #23
 800197a:	d517      	bpl.n	80019ac <HAL_RCC_OscConfig+0x1f8>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800197c:	4d23      	ldr	r5, [pc, #140]	; (8001a0c <HAL_RCC_OscConfig+0x258>)
 800197e:	2300      	movs	r3, #0
 8001980:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001982:	f000 fc77 	bl	8002274 <HAL_GetTick>
 8001986:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	079f      	lsls	r7, r3, #30
 800198e:	d413      	bmi.n	80019b8 <HAL_RCC_OscConfig+0x204>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	7a23      	ldrb	r3, [r4, #8]
 8001992:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001994:	68a3      	ldr	r3, [r4, #8]
 8001996:	b1fb      	cbz	r3, 80019d8 <HAL_RCC_OscConfig+0x224>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f000 fc6c 	bl	8002274 <HAL_GetTick>
 800199c:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	079e      	lsls	r6, r3, #30
 80019a4:	d510      	bpl.n	80019c8 <HAL_RCC_OscConfig+0x214>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	69a3      	ldr	r3, [r4, #24]
 80019a8:	bb93      	cbnz	r3, 8001a10 <HAL_RCC_OscConfig+0x25c>
 80019aa:	e07c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f000 fc62 	bl	8002274 <HAL_GetTick>
 80019b0:	1b40      	subs	r0, r0, r5
 80019b2:	2802      	cmp	r0, #2
 80019b4:	d9de      	bls.n	8001974 <HAL_RCC_OscConfig+0x1c0>
 80019b6:	e736      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f000 fc5c 	bl	8002274 <HAL_GetTick>
 80019bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	4298      	cmp	r0, r3
 80019c4:	d9e0      	bls.n	8001988 <HAL_RCC_OscConfig+0x1d4>
 80019c6:	e72e      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f000 fc54 	bl	8002274 <HAL_GetTick>
 80019cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	4298      	cmp	r0, r3
 80019d4:	d9e3      	bls.n	800199e <HAL_RCC_OscConfig+0x1ea>
 80019d6:	e726      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f000 fc4c 	bl	8002274 <HAL_GetTick>
 80019dc:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x244>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	0798      	lsls	r0, r3, #30
 80019e4:	d5df      	bpl.n	80019a6 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f000 fc45 	bl	8002274 <HAL_GetTick>
 80019ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ee:	1b40      	subs	r0, r0, r5
 80019f0:	4298      	cmp	r0, r3
 80019f2:	d9f4      	bls.n	80019de <HAL_RCC_OscConfig+0x22a>
 80019f4:	e717      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40023802 	.word	0x40023802
 8001a00:	42470000 	.word	0x42470000
 8001a04:	42470e80 	.word	0x42470e80
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	40023870 	.word	0x40023870
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_RCC_OscConfig+0x330>)
 8001a12:	6892      	ldr	r2, [r2, #8]
 8001a14:	f002 020c 	and.w	r2, r2, #12
 8001a18:	2a08      	cmp	r2, #8
 8001a1a:	f43f aef3 	beq.w	8001804 <HAL_RCC_OscConfig+0x50>
 8001a1e:	4d32      	ldr	r5, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x334>)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f04f 0300 	mov.w	r3, #0
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	d14b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x30e>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f000 fc23 	bl	8002274 <HAL_GetTick>
 8001a2e:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_RCC_OscConfig+0x330>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	0199      	lsls	r1, r3, #6
 8001a36:	d438      	bmi.n	8001aaa <HAL_RCC_OscConfig+0x2f6>
 8001a38:	f647 78c0 	movw	r8, #32704	; 0x7fc0
 8001a3c:	fa98 f8a8 	rbit	r8, r8
 8001a40:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	fab8 f888 	clz	r8, r8
 8001a48:	fa9c fcac 	rbit	ip, ip
 8001a4c:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 8001a50:	fabc fc8c 	clz	ip, ip
 8001a54:	fa9e feae 	rbit	lr, lr
 8001a58:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8001a5c:	fabe fe8e 	clz	lr, lr
 8001a60:	fa97 f7a7 	rbit	r7, r7
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a66:	6a26      	ldr	r6, [r4, #32]
 8001a68:	69e0      	ldr	r0, [r4, #28]
 8001a6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a6e:	0852      	lsrs	r2, r2, #1
 8001a70:	4330      	orrs	r0, r6
 8001a72:	fa01 f108 	lsl.w	r1, r1, r8
 8001a76:	3a01      	subs	r2, #1
 8001a78:	fa02 f20c 	lsl.w	r2, r2, ip
 8001a7c:	4301      	orrs	r1, r0
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a82:	fa03 f30e 	lsl.w	r3, r3, lr
 8001a86:	fab7 f787 	clz	r7, r7
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	40ba      	lsls	r2, r7
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_RCC_OscConfig+0x330>)
 8001a92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	2301      	movs	r3, #1
 8001a96:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f000 fbec 	bl	8002274 <HAL_GetTick>
 8001a9c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	019a      	lsls	r2, r3, #6
 8001aa4:	d507      	bpl.n	8001ab6 <HAL_RCC_OscConfig+0x302>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e018      	b.n	8001adc <HAL_RCC_OscConfig+0x328>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f000 fbe3 	bl	8002274 <HAL_GetTick>
 8001aae:	1b80      	subs	r0, r0, r6
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9bd      	bls.n	8001a30 <HAL_RCC_OscConfig+0x27c>
 8001ab4:	e6b7      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f000 fbdd 	bl	8002274 <HAL_GetTick>
 8001aba:	1b00      	subs	r0, r0, r4
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9ee      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2ea>
 8001ac0:	e6b1      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f000 fbd7 	bl	8002274 <HAL_GetTick>
 8001ac6:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x330>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	d5ea      	bpl.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f000 fbd0 	bl	8002274 <HAL_GetTick>
 8001ad4:	1b00      	subs	r0, r0, r4
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d9f6      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x314>
 8001ada:	e6a4      	b.n	8001826 <HAL_RCC_OscConfig+0x72>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001adc:	b002      	add	sp, #8
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	42470060 	.word	0x42470060

08001aec <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	f002 020c 	and.w	r2, r2, #12
 8001af4:	2a08      	cmp	r2, #8
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af6:	b510      	push	{r4, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af8:	d007      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1e>
 8001afa:	2a0c      	cmp	r2, #12
 8001afc:	d036      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b00:	4835      	ldr	r0, [pc, #212]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b02:	2a04      	cmp	r2, #4
 8001b04:	bf18      	it	ne
 8001b06:	4618      	movne	r0, r3
 8001b08:	bd10      	pop	{r4, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0a:	6859      	ldr	r1, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0c:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b0e:	685c      	ldr	r4, [r3, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b10:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b14:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b18:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1c:	d00c      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x4c>
 8001b1e:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b22:	fab2 f382 	clz	r3, r2
 8001b26:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b2a:	4022      	ands	r2, r4
 8001b2c:	40da      	lsrs	r2, r3
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b34:	4353      	muls	r3, r2
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x64>
 8001b38:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b40:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	4023      	ands	r3, r4
 8001b48:	40d3      	lsrs	r3, r2
 8001b4a:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b4e:	434b      	muls	r3, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001b52:	6850      	ldr	r0, [r2, #4]
 8001b54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b58:	fa92 f2a2 	rbit	r2, r2
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001b64:	40d0      	lsrs	r0, r2
 8001b66:	3001      	adds	r0, #1
 8001b68:	0040      	lsls	r0, r0, #1
 8001b6a:	e02d      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	6859      	ldr	r1, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6e:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b70:	685c      	ldr	r4, [r3, #4]
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b72:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b7a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7e:	d00c      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0xae>
 8001b80:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b84:	fab2 f382 	clz	r3, r2
 8001b88:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b8c:	4022      	ands	r2, r4
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	4353      	muls	r3, r2
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xc6>
 8001b9a:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001b9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	4023      	ands	r3, r4
 8001baa:	40d3      	lsrs	r3, r2
 8001bac:	fbb0 f1f1 	udiv	r1, r0, r1
 8001bb0:	434b      	muls	r3, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8001bb4:	6850      	ldr	r0, [r2, #4]
 8001bb6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001bba:	fa92 f2a2 	rbit	r2, r2
 8001bbe:	fab2 f282 	clz	r2, r2
 8001bc2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001bc6:	40d0      	lsrs	r0, r2
      
      sysclockfreq = pllvco/pllr;
 8001bc8:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bcc:	bd10      	pop	{r4, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	; (8001d18 <HAL_RCC_ClockConfig+0x13c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f002 020f 	and.w	r2, r2, #15
 8001be4:	4291      	cmp	r1, r2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be6:	b570      	push	{r4, r5, r6, lr}
 8001be8:	4604      	mov	r4, r0
 8001bea:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bec:	d80a      	bhi.n	8001c04 <HAL_RCC_ClockConfig+0x28>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	0798      	lsls	r0, r3, #30
 8001bf2:	d510      	bpl.n	8001c16 <HAL_RCC_ClockConfig+0x3a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4a49      	ldr	r2, [pc, #292]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001bf6:	68a1      	ldr	r1, [r4, #8]
 8001bf8:	6890      	ldr	r0, [r2, #8]
 8001bfa:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8001bfe:	4301      	orrs	r1, r0
 8001c00:	6091      	str	r1, [r2, #8]
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_ClockConfig+0x3a>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c04:	b2ca      	uxtb	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	428b      	cmp	r3, r1
 8001c10:	d0ed      	beq.n	8001bee <HAL_RCC_ClockConfig+0x12>
    {
      return HAL_ERROR;
 8001c12:	2001      	movs	r0, #1
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	07d9      	lsls	r1, r3, #31
 8001c18:	d406      	bmi.n	8001c28 <HAL_RCC_ClockConfig+0x4c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_RCC_ClockConfig+0x13c>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f002 020f 	and.w	r2, r2, #15
 8001c22:	4295      	cmp	r5, r2
 8001c24:	d357      	bcc.n	8001cd6 <HAL_RCC_ClockConfig+0xfa>
 8001c26:	e05d      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	6863      	ldr	r3, [r4, #4]
 8001c2a:	4a3c      	ldr	r2, [pc, #240]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d103      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x5c>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001c38:	1e99      	subs	r1, r3, #2
 8001c3a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001c3e:	d802      	bhi.n	8001c46 <HAL_RCC_ClockConfig+0x6a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c40:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_ClockConfig+0x6e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c46:	f012 0f02 	tst.w	r2, #2
 8001c4a:	d0e2      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x36>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001c4e:	6891      	ldr	r1, [r2, #8]
 8001c50:	f021 0103 	bic.w	r1, r1, #3
 8001c54:	430b      	orrs	r3, r1
 8001c56:	6093      	str	r3, [r2, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c58:	f000 fb0c 	bl	8002274 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c60:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	d10e      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xa6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d0d4      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f000 fb00 	bl	8002274 <HAL_GetTick>
 8001c74:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c78:	1b80      	subs	r0, r0, r6
 8001c7a:	4298      	cmp	r0, r3
 8001c7c:	d9f2      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x88>
        {
          return HAL_TIMEOUT;
 8001c7e:	2003      	movs	r0, #3
 8001c80:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d0c3      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f000 faef 	bl	8002274 <HAL_GetTick>
 8001c96:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c9a:	1b80      	subs	r0, r0, r6
 8001c9c:	4298      	cmp	r0, r3
 8001c9e:	d9f2      	bls.n	8001c86 <HAL_RCC_ClockConfig+0xaa>
 8001ca0:	e7ed      	b.n	8001c7e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f013 0f0c 	tst.w	r3, #12
 8001cae:	d10a      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xea>
 8001cb0:	e7b3      	b.n	8001c1a <HAL_RCC_ClockConfig+0x3e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f000 fadd 	bl	8002274 <HAL_GetTick>
 8001cba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cbe:	1b80      	subs	r0, r0, r6
 8001cc0:	4298      	cmp	r0, r3
 8001cc2:	d9f6      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
 8001cc4:	e7db      	b.n	8001c7e <HAL_RCC_ClockConfig+0xa2>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f000 fad5 	bl	8002274 <HAL_GetTick>
 8001cca:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cce:	1b80      	subs	r0, r0, r6
 8001cd0:	4298      	cmp	r0, r3
 8001cd2:	d9e8      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0xca>
 8001cd4:	e7d3      	b.n	8001c7e <HAL_RCC_ClockConfig+0xa2>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	b2ea      	uxtb	r2, r5
 8001cd8:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	42ab      	cmp	r3, r5
 8001ce2:	d196      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x36>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	075a      	lsls	r2, r3, #29
 8001ce8:	d506      	bpl.n	8001cf8 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001cec:	68e1      	ldr	r1, [r4, #12]
 8001cee:	6890      	ldr	r0, [r2, #8]
 8001cf0:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	6091      	str	r1, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	071b      	lsls	r3, r3, #28
 8001cfa:	d507      	bpl.n	8001d0c <HAL_RCC_ClockConfig+0x130>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_RCC_ClockConfig+0x140>)
 8001cfe:	6921      	ldr	r1, [r4, #16]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001d0a:	609a      	str	r2, [r3, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 fa7c 	bl	800220a <HAL_InitTick>
  
  return HAL_OK;
 8001d12:	2000      	movs	r0, #0
}
 8001d14:	bd70      	pop	{r4, r5, r6, pc}
 8001d16:	bf00      	nop
 8001d18:	40023c00 	.word	0x40023c00
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d22:	f7ff fee3 	bl	8001aec <HAL_RCC_GetSysClockFreq>
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x28>)
 8001d28:	22f0      	movs	r2, #240	; 0xf0
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d38:	40d3      	lsrs	r3, r2
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	40d8      	lsrs	r0, r3
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x30>)
 8001d42:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8001d44:	bd08      	pop	{r3, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08005deb 	.word	0x08005deb
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001d54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001d56:	f7ff ffe3 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d5c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d6e:	40d3      	lsrs	r3, r2
 8001d70:	4a02      	ldr	r2, [pc, #8]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d74:	40d8      	lsrs	r0, r3
 8001d76:	bd08      	pop	{r3, pc}
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	08005deb 	.word	0x08005deb

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001d82:	f7ff ffcd 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d88:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d9a:	40d3      	lsrs	r3, r2
 8001d9c:	4a02      	ldr	r2, [pc, #8]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001da0:	40d8      	lsrs	r0, r3
 8001da2:	bd08      	pop	{r3, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08005deb 	.word	0x08005deb

08001dac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dac:	b513      	push	{r0, r1, r4, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_PWREx_EnableOverDrive+0x90>)
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dca:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de0:	f000 fa48 	bl	8002274 <HAL_GetTick>
 8001de4:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x94>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	03da      	lsls	r2, r3, #15
 8001dec:	d407      	bmi.n	8001dfe <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dee:	f000 fa41 	bl	8002274 <HAL_GetTick>
 8001df2:	1b00      	subs	r0, r0, r4
 8001df4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001df8:	d9f5      	bls.n	8001de6 <HAL_PWREx_EnableOverDrive+0x3a>
    {
      return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	e01b      	b.n	8001e36 <HAL_PWREx_EnableOverDrive+0x8a>
 8001dfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e02:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e0e:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e18:	f000 fa2c 	bl	8002274 <HAL_GetTick>
 8001e1c:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	039b      	lsls	r3, r3, #14
 8001e24:	d406      	bmi.n	8001e34 <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e26:	f000 fa25 	bl	8002274 <HAL_GetTick>
 8001e2a:	1b00      	subs	r0, r0, r4
 8001e2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e30:	d9f5      	bls.n	8001e1e <HAL_PWREx_EnableOverDrive+0x72>
 8001e32:	e7e2      	b.n	8001dfa <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001e34:	2000      	movs	r0, #0
}
 8001e36:	b002      	add	sp, #8
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e48:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e50:	ea02 0407 	and.w	r4, r2, r7

    if(iocurrent == ioposition)
 8001e54:	4294      	cmp	r4, r2
 8001e56:	f040 80c7 	bne.w	8001fe8 <HAL_GPIO_Init+0x1a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e5a:	684a      	ldr	r2, [r1, #4]
 8001e5c:	f022 0610 	bic.w	r6, r2, #16
 8001e60:	2e02      	cmp	r6, #2
 8001e62:	d116      	bne.n	8001e92 <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001e68:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001e6c:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001e74:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001e78:	f04f 090f 	mov.w	r9, #15
 8001e7c:	fa09 f908 	lsl.w	r9, r9, r8
 8001e80:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e84:	690d      	ldr	r5, [r1, #16]
 8001e86:	fa05 f808 	lsl.w	r8, r5, r8
 8001e8a:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	f8cc 5020 	str.w	r5, [ip, #32]
 8001e92:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e94:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9c:	fa0c fc05 	lsl.w	ip, ip, r5
 8001ea0:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea8:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eac:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb0:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb2:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb6:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001eb8:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	d810      	bhi.n	8001ee0 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec0:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec4:	68ce      	ldr	r6, [r1, #12]
 8001ec6:	40ae      	lsls	r6, r5
 8001ec8:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 8001ecc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed0:	ea26 0804 	bic.w	r8, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed4:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8001ed8:	409e      	lsls	r6, r3
 8001eda:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 8001ede:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ee0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee6:	688e      	ldr	r6, [r1, #8]
 8001ee8:	40ae      	lsls	r6, r5
 8001eea:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 8001eee:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef0:	00d5      	lsls	r5, r2, #3
 8001ef2:	d579      	bpl.n	8001fe8 <HAL_GPIO_Init+0x1a4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4e40      	ldr	r6, [pc, #256]	; (8001ff8 <HAL_GPIO_Init+0x1b4>)
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	9501      	str	r5, [sp, #4]
 8001efa:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 8001efe:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8001f02:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 8001f06:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8001f08:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001f0c:	9601      	str	r6, [sp, #4]
 8001f0e:	9e01      	ldr	r6, [sp, #4]
 8001f10:	f023 0603 	bic.w	r6, r3, #3
 8001f14:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001f18:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001f1c:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f20:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001f24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001f28:	f04f 080f 	mov.w	r8, #15
 8001f2c:	fa08 f80c 	lsl.w	r8, r8, ip
 8001f30:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f34:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002000 <HAL_GPIO_Init+0x1bc>
 8001f38:	4548      	cmp	r0, r9
 8001f3a:	d025      	beq.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f3c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8001f40:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 8001f44:	42a8      	cmp	r0, r5
 8001f46:	d016      	beq.n	8001f76 <HAL_GPIO_Init+0x132>
 8001f48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f4c:	42a8      	cmp	r0, r5
 8001f4e:	d014      	beq.n	8001f7a <HAL_GPIO_Init+0x136>
 8001f50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f54:	42a8      	cmp	r0, r5
 8001f56:	d012      	beq.n	8001f7e <HAL_GPIO_Init+0x13a>
 8001f58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f5c:	42a8      	cmp	r0, r5
 8001f5e:	d010      	beq.n	8001f82 <HAL_GPIO_Init+0x13e>
 8001f60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f64:	42a8      	cmp	r0, r5
 8001f66:	d00e      	beq.n	8001f86 <HAL_GPIO_Init+0x142>
 8001f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f6c:	42a8      	cmp	r0, r5
 8001f6e:	bf14      	ite	ne
 8001f70:	2508      	movne	r5, #8
 8001f72:	2506      	moveq	r5, #6
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f76:	2501      	movs	r5, #1
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f7a:	2502      	movs	r5, #2
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f7e:	2503      	movs	r5, #3
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f82:	2504      	movs	r5, #4
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x144>
 8001f86:	2505      	movs	r5, #5
 8001f88:	fa05 f50c 	lsl.w	r5, r5, ip
 8001f8c:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f92:	4e1a      	ldr	r6, [pc, #104]	; (8001ffc <HAL_GPIO_Init+0x1b8>)
 8001f94:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f9a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8001f9e:	bf14      	ite	ne
 8001fa0:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001fa8:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 8001fac:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 8001fb2:	bf14      	ite	ne
 8001fb4:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001fbc:	4e0f      	ldr	r6, [pc, #60]	; (8001ffc <HAL_GPIO_Init+0x1b8>)
 8001fbe:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8001fca:	bf14      	ite	ne
 8001fcc:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001fd4:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 8001fd8:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fda:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_GPIO_Init+0x1b8>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001fde:	bf54      	ite	pl
 8001fe0:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001fe4:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 8001fe6:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe8:	3301      	adds	r3, #1
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	f47f af2e 	bne.w	8001e4c <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001ff0:	b003      	add	sp, #12
 8001ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013c00 	.word	0x40013c00
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002008:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800200a:	2201      	movs	r2, #1
 800200c:	fa02 f503 	lsl.w	r5, r2, r3
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002010:	ea05 0401 	and.w	r4, r5, r1

    if(iocurrent == ioposition)
 8002014:	42ac      	cmp	r4, r5
 8002016:	d16d      	bne.n	80020f4 <HAL_GPIO_DeInit+0xf0>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002018:	f04f 0c03 	mov.w	ip, #3
 800201c:	fa03 f502 	lsl.w	r5, r3, r2
 8002020:	6806      	ldr	r6, [r0, #0]
 8002022:	fa0c f505 	lsl.w	r5, ip, r5
 8002026:	43ed      	mvns	r5, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002028:	fa23 f70c 	lsr.w	r7, r3, ip

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202c:	402e      	ands	r6, r5
 800202e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002032:	6006      	str	r6, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002034:	f003 0807 	and.w	r8, r3, #7
 8002038:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800203c:	260f      	movs	r6, #15
 800203e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002042:	fa06 f808 	lsl.w	r8, r6, r8
 8002046:	ea29 0808 	bic.w	r8, r9, r8
 800204a:	f8c7 8020 	str.w	r8, [r7, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800204e:	6887      	ldr	r7, [r0, #8]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002050:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8002108 <HAL_GPIO_DeInit+0x104>

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002054:	402f      	ands	r7, r5
 8002056:	6087      	str	r7, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	6847      	ldr	r7, [r0, #4]
 800205a:	43e4      	mvns	r4, r4
 800205c:	4027      	ands	r7, r4
 800205e:	6047      	str	r7, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002060:	68c7      	ldr	r7, [r0, #12]
 8002062:	403d      	ands	r5, r7
 8002064:	60c5      	str	r5, [r0, #12]
 8002066:	f023 0503 	bic.w	r5, r3, #3
 800206a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800206e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002072:	ea03 070c 	and.w	r7, r3, ip

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002076:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800207a:	00bf      	lsls	r7, r7, #2
 800207c:	40be      	lsls	r6, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800207e:	4548      	cmp	r0, r9
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002080:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_DeInit+0xb6>
 8002086:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800208a:	4548      	cmp	r0, r9
 800208c:	d01e      	beq.n	80020cc <HAL_GPIO_DeInit+0xc8>
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_GPIO_DeInit+0xfc>)
 8002090:	4290      	cmp	r0, r2
 8002092:	d014      	beq.n	80020be <HAL_GPIO_DeInit+0xba>
 8002094:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002098:	4290      	cmp	r0, r2
 800209a:	d012      	beq.n	80020c2 <HAL_GPIO_DeInit+0xbe>
 800209c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a0:	4290      	cmp	r0, r2
 80020a2:	d010      	beq.n	80020c6 <HAL_GPIO_DeInit+0xc2>
 80020a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a8:	4290      	cmp	r0, r2
 80020aa:	d00e      	beq.n	80020ca <HAL_GPIO_DeInit+0xc6>
 80020ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b0:	4290      	cmp	r0, r2
 80020b2:	bf14      	ite	ne
 80020b4:	2208      	movne	r2, #8
 80020b6:	2206      	moveq	r2, #6
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_DeInit+0xc8>
 80020ba:	2200      	movs	r2, #0
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_DeInit+0xc8>
 80020be:	2202      	movs	r2, #2
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_DeInit+0xc8>
 80020c2:	4662      	mov	r2, ip
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_DeInit+0xc8>
 80020c6:	2204      	movs	r2, #4
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_DeInit+0xc8>
 80020ca:	2205      	movs	r2, #5
 80020cc:	40ba      	lsls	r2, r7
 80020ce:	4590      	cmp	r8, r2
 80020d0:	d110      	bne.n	80020f4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020d2:	68aa      	ldr	r2, [r5, #8]
 80020d4:	ea22 0606 	bic.w	r6, r2, r6

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_GPIO_DeInit+0x100>)
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020da:	60ae      	str	r6, [r5, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020dc:	6815      	ldr	r5, [r2, #0]
 80020de:	4025      	ands	r5, r4
 80020e0:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020e2:	6855      	ldr	r5, [r2, #4]
 80020e4:	4025      	ands	r5, r4
 80020e6:	6055      	str	r5, [r2, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020e8:	6895      	ldr	r5, [r2, #8]
 80020ea:	4025      	ands	r5, r4
 80020ec:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020ee:	68d5      	ldr	r5, [r2, #12]
 80020f0:	402c      	ands	r4, r5
 80020f2:	60d4      	str	r4, [r2, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f4:	3301      	adds	r3, #1
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d187      	bne.n	800200a <HAL_GPIO_DeInit+0x6>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 80020fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020fe:	bf00      	nop
 8002100:	40020800 	.word	0x40020800
 8002104:	40013c00 	.word	0x40013c00
 8002108:	40020000 	.word	0x40020000

0800210c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800210c:	b902      	cbnz	r2, 8002110 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210e:	0409      	lsls	r1, r1, #16
 8002110:	6181      	str	r1, [r0, #24]
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002114:	6943      	ldr	r3, [r0, #20]
 8002116:	4059      	eors	r1, r3
 8002118:	6141      	str	r1, [r0, #20]
 800211a:	4770      	bx	lr

0800211c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800211e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002120:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002124:	041b      	lsls	r3, r3, #16
 8002126:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800212c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002134:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002138:	60d3      	str	r3, [r2, #12]
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_NVIC_SetPriority+0x5c>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002148:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	f1c3 0407 	rsb	r4, r3, #7
 8002150:	2c04      	cmp	r4, #4
 8002152:	bf28      	it	cs
 8002154:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002156:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215c:	bf8c      	ite	hi
 800215e:	3b03      	subhi	r3, #3
 8002160:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002162:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002166:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216a:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216e:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002176:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002178:	2800      	cmp	r0, #0
 800217a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800217e:	da05      	bge.n	800218c <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	b2da      	uxtb	r2, r3
 8002182:	f000 000f 	and.w	r0, r0, #15
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_NVIC_SetPriority+0x60>)
 8002188:	541a      	strb	r2, [r3, r0]
 800218a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002190:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 800219a:	bd70      	pop	{r4, r5, r6, pc}
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	e000ed14 	.word	0xe000ed14

080021a4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80021a4:	0942      	lsrs	r2, r0, #5
 80021a6:	2301      	movs	r3, #1
 80021a8:	f000 001f 	and.w	r0, r0, #31
 80021ac:	fa03 f000 	lsl.w	r0, r3, r0
 80021b0:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <HAL_NVIC_EnableIRQ+0x14>)
 80021b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80021b6:	4770      	bx	lr
 80021b8:	e000e100 	.word	0xe000e100

080021bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	3801      	subs	r0, #1
 80021be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021c2:	d20a      	bcs.n	80021da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	21f0      	movs	r1, #240	; 0xf0
 80021cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80021ea:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80021ec:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80021ee:	bf0c      	ite	eq
 80021f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80021f4:	f022 0204 	bicne.w	r2, r2, #4
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	4770      	bx	lr
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002200:	4770      	bx	lr

08002202 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002202:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002204:	f7ff fffc 	bl	8002200 <HAL_SYSTICK_Callback>
 8002208:	bd08      	pop	{r3, pc}

0800220a <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220a:	b510      	push	{r4, lr}
 800220c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800220e:	f7ff fd87 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	fbb0 f0f3 	udiv	r0, r0, r3
 800221a:	f7ff ffcf 	bl	80021bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
 8002222:	4621      	mov	r1, r4
 8002224:	2200      	movs	r2, #0
 8002226:	f7ff ff8b 	bl	8002140 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800222a:	2000      	movs	r0, #0
 800222c:	bd10      	pop	{r4, pc}
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_Init+0x30>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002242:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224c:	2003      	movs	r0, #3
 800224e:	f7ff ff65 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff ffd9 	bl	800220a <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002258:	f000 fa0a 	bl	8002670 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800225c:	2000      	movs	r0, #0
 800225e:	bd08      	pop	{r3, pc}
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002264:	4b02      	ldr	r3, [pc, #8]	; (8002270 <HAL_IncTick+0xc>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	3201      	adds	r2, #1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200005a0 	.word	0x200005a0

08002274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002274:	4b01      	ldr	r3, [pc, #4]	; (800227c <HAL_GetTick+0x8>)
 8002276:	6818      	ldr	r0, [r3, #0]
}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200005a0 	.word	0x200005a0

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002280:	b513      	push	{r0, r1, r4, lr}
 8002282:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8002284:	f7ff fff6 	bl	8002274 <HAL_GetTick>
 8002288:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800228a:	f7ff fff3 	bl	8002274 <HAL_GetTick>
 800228e:	9b01      	ldr	r3, [sp, #4]
 8002290:	1b00      	subs	r0, r0, r4
 8002292:	4298      	cmp	r0, r3
 8002294:	d3f9      	bcc.n	800228a <HAL_Delay+0xa>
  {
  }
}
 8002296:	b002      	add	sp, #8
 8002298:	bd10      	pop	{r4, pc}
	...

0800229c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <SystemInit+0x40>)
 800229e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80022a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <SystemInit+0x44>)
 80022ac:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022ae:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022b0:	f041 0101 	orr.w	r1, r1, #1
 80022b4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022b6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80022be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022c2:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <SystemInit+0x48>)
 80022c6:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80022ce:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022d0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	40023800 	.word	0x40023800
 80022e4:	24003010 	.word	0x24003010

080022e8 <uart_init>:

UART_HandleTypeDef huart5;

int uart_init(void) {
  return UART_SUCCESS;
}
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr

080022ec <uart_finit>:

void uart_finit(void) {
 80022ec:	4770      	bx	lr
	...

080022f0 <uart_setb>:
  //if(hSerial == INVALID_HANDLE_VALUE) return;

}

void uart_setb(uint32_t baud) {
 80022f0:	b538      	push	{r3, r4, r5, lr}
  //if(hSerial == INVALID_HANDLE_VALUE) return;

  HAL_UART_DeInit(&huart5);
 80022f2:	4c0a      	ldr	r4, [pc, #40]	; (800231c <uart_setb+0x2c>)
void uart_finit(void) {
  //if(hSerial == INVALID_HANDLE_VALUE) return;

}

void uart_setb(uint32_t baud) {
 80022f4:	4605      	mov	r5, r0
  //if(hSerial == INVALID_HANDLE_VALUE) return;

  HAL_UART_DeInit(&huart5);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff f856 	bl	80013a8 <HAL_UART_DeInit>

  huart5.Instance = UART5;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <uart_setb+0x30>)
  huart5.Init.BaudRate = baud;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022fe:	220c      	movs	r2, #12
  //if(hSerial == INVALID_HANDLE_VALUE) return;

  HAL_UART_DeInit(&huart5);

  huart5.Instance = UART5;
  huart5.Init.BaudRate = baud;
 8002300:	e884 0028 	stmia.w	r4, {r3, r5}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002304:	2300      	movs	r3, #0
 8002306:	60a3      	str	r3, [r4, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002308:	60e3      	str	r3, [r4, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800230a:	6123      	str	r3, [r4, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800230c:	6162      	str	r2, [r4, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	61a3      	str	r3, [r4, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002310:	61e3      	str	r3, [r4, #28]
  HAL_UART_Init(&huart5);
 8002312:	4620      	mov	r0, r4
  dcb.fOutxDsrFlow    = FALSE;
  dcb.fDsrSensitivity = FALSE;
  dcb.fAbortOnError   = TRUE;

  SetCommState(hSerial, &dcb);*/
}
 8002314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart5);
 8002318:	f7ff b818 	b.w	800134c <HAL_UART_Init>
 800231c:	200005a4 	.word	0x200005a4
 8002320:	40005000 	.word	0x40005000

08002324 <uart_putc>:
  dcb.fAbortOnError   = TRUE;

  SetCommState(hSerial, &dcb);*/
}

void uart_putc(uint8_t c){
 8002324:	b507      	push	{r0, r1, r2, lr}
 8002326:	a902      	add	r1, sp, #8

	HAL_UART_Transmit(&huart5,&c,1,1000);
 8002328:	2201      	movs	r2, #1
  dcb.fAbortOnError   = TRUE;

  SetCommState(hSerial, &dcb);*/
}

void uart_putc(uint8_t c){
 800232a:	f801 0d01 	strb.w	r0, [r1, #-1]!

	HAL_UART_Transmit(&huart5,&c,1,1000);
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <uart_putc+0x1c>)
 8002334:	f7ff f84b 	bl	80013ce <HAL_UART_Transmit>

}
 8002338:	b003      	add	sp, #12
 800233a:	f85d fb04 	ldr.w	pc, [sp], #4
 800233e:	bf00      	nop
 8002340:	200005a4 	.word	0x200005a4

08002344 <uart_getc>:

uint8_t uart_getc(void){
 8002344:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	HAL_UART_Receive(&huart5,&c,1,1000);
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	f10d 0107 	add.w	r1, sp, #7
 800234e:	2201      	movs	r2, #1
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <uart_getc+0x1c>)
 8002352:	f7ff f88a 	bl	800146a <HAL_UART_Receive>
	return c;
}
 8002356:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800235a:	b003      	add	sp, #12
 800235c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002360:	200005a4 	.word	0x200005a4

08002364 <TM_HD44780_Cmd4bit>:
	TM_HD44780_Cmd4bit(data >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
}

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8002364:	b538      	push	{r3, r4, r5, lr}
	/* Set output port */
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 8002366:	4c18      	ldr	r4, [pc, #96]	; (80023c8 <TM_HD44780_Cmd4bit+0x64>)
	TM_HD44780_Cmd4bit(data >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
}

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8002368:	4605      	mov	r5, r0
	/* Set output port */
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 800236a:	f005 0208 	and.w	r2, r5, #8
 800236e:	4620      	mov	r0, r4
 8002370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002374:	f7ff feca 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 8002378:	4620      	mov	r0, r4
 800237a:	f005 0204 	and.w	r2, r5, #4
 800237e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002382:	f7ff fec3 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 8002386:	4620      	mov	r0, r4
 8002388:	f005 0202 	and.w	r2, r5, #2
 800238c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002390:	f7ff febc 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 8002394:	4620      	mov	r0, r4
 8002396:	f005 0201 	and.w	r2, r5, #1
 800239a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800239e:	f7ff feb5 	bl	800210c <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 80023a2:	4620      	mov	r0, r4
 80023a4:	2104      	movs	r1, #4
 80023a6:	2201      	movs	r2, #1
 80023a8:	f7ff feb0 	bl	800210c <HAL_GPIO_WritePin>
 80023ac:	2014      	movs	r0, #20
 80023ae:	f7ff ff67 	bl	8002280 <HAL_Delay>
 80023b2:	4620      	mov	r0, r4
 80023b4:	2104      	movs	r1, #4
 80023b6:	2200      	movs	r2, #0
 80023b8:	f7ff fea8 	bl	800210c <HAL_GPIO_WritePin>
 80023bc:	2014      	movs	r0, #20
}
 80023be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	/* Set output port */
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
	HAL_GPIO_WritePin(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
	HD44780_E_BLINK;
 80023c2:	f7ff bf5d 	b.w	8002280 <HAL_Delay>
 80023c6:	bf00      	nop
 80023c8:	40020400 	.word	0x40020400

080023cc <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 80023cc:	b510      	push	{r4, lr}
	/* Command mode */
	HD44780_RS_LOW;
 80023ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 80023d2:	4604      	mov	r4, r0
	/* Command mode */
	HD44780_RS_LOW;
 80023d4:	2200      	movs	r2, #0
 80023d6:	4806      	ldr	r0, [pc, #24]	; (80023f0 <TM_HD44780_Cmd+0x24>)
 80023d8:	f7ff fe98 	bl	800210c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 80023dc:	0920      	lsrs	r0, r4, #4
 80023de:	f7ff ffc1 	bl	8002364 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 80023e2:	f004 000f 	and.w	r0, r4, #15
}
 80023e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HD44780_RS_LOW;
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 80023ea:	f7ff bfbb 	b.w	8002364 <TM_HD44780_Cmd4bit>
 80023ee:	bf00      	nop
 80023f0:	40020400 	.word	0x40020400

080023f4 <TM_HD44780_CursorSet>:
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
	HD44780_E_BLINK;
}

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <TM_HD44780_CursorSet+0x30>)
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
	HD44780_E_BLINK;
}

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 80023f6:	b082      	sub	sp, #8
 80023f8:	4602      	mov	r2, r0
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80023fa:	6818      	ldr	r0, [r3, #0]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <TM_HD44780_CursorSet+0x34>)
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
	HD44780_E_BLINK;
}

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80023fe:	9001      	str	r0, [sp, #4]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8002400:	78d8      	ldrb	r0, [r3, #3]
		row = 0;
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8002402:	715a      	strb	r2, [r3, #5]
static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
		row = 0;
 8002404:	4288      	cmp	r0, r1
 8002406:	bf98      	it	ls
 8002408:	2100      	movls	r1, #0
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
	HD44780_Opts.currentY = row;
 800240a:	7199      	strb	r1, [r3, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800240c:	ab02      	add	r3, sp, #8
 800240e:	4419      	add	r1, r3
 8002410:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8002414:	4402      	add	r2, r0
 8002416:	f062 007f 	orn	r0, r2, #127	; 0x7f
 800241a:	b2c0      	uxtb	r0, r0
}
 800241c:	b002      	add	sp, #8
	/* Set current column and row */
	HD44780_Opts.currentX = col;
	HD44780_Opts.currentY = row;
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800241e:	f7ff bfd5 	b.w	80023cc <TM_HD44780_Cmd>
 8002422:	bf00      	nop
 8002424:	08005ce8 	.word	0x08005ce8
 8002428:	2000055c 	.word	0x2000055c

0800242c <TM_HD44780_Data>:
	TM_HD44780_Cmd4bit(cmd >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
}

static void TM_HD44780_Data(uint8_t data) {
 800242c:	b510      	push	{r4, lr}
	/* Data mode */
	HD44780_RS_HIGH;
 800242e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	TM_HD44780_Cmd4bit(cmd >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
}

static void TM_HD44780_Data(uint8_t data) {
 8002432:	4604      	mov	r4, r0
	/* Data mode */
	HD44780_RS_HIGH;
 8002434:	2201      	movs	r2, #1
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <TM_HD44780_Data+0x24>)
 8002438:	f7ff fe68 	bl	800210c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 800243c:	0920      	lsrs	r0, r4, #4
 800243e:	f7ff ff91 	bl	8002364 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 8002442:	f004 000f 	and.w	r0, r4, #15
}
 8002446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HD44780_RS_HIGH;
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 800244a:	f7ff bf8b 	b.w	8002364 <TM_HD44780_Cmd4bit>
 800244e:	bf00      	nop
 8002450:	40020400 	.word	0x40020400

08002454 <TM_HD44780_Clear>:

	/* Delay */
	HD44780_Delay(45);
}

void TM_HD44780_Clear(void) {
 8002454:	b508      	push	{r3, lr}
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff ffb8 	bl	80023cc <TM_HD44780_Cmd>
	HD44780_Delay(30);
 800245c:	201e      	movs	r0, #30
}
 800245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HD44780_Delay(45);
}

void TM_HD44780_Clear(void) {
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
	HD44780_Delay(30);
 8002462:	f7ff bf0d 	b.w	8002280 <HAL_Delay>
	...

08002468 <TM_HD44780_Puts>:
}

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4615      	mov	r5, r2
		}
		if (*str == '\n') {
			HD44780_Opts.currentY++;
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
		} else if (*str == '\r') {
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 800246c:	f7ff ffc2 	bl	80023f4 <TM_HD44780_CursorSet>
	HD44780_Delay(30);
}

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
	TM_HD44780_CursorSet(x, y);
	while (*str) {
 8002470:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002474:	b30b      	cbz	r3, 80024ba <TM_HD44780_Puts+0x52>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8002476:	4c11      	ldr	r4, [pc, #68]	; (80024bc <TM_HD44780_Puts+0x54>)
 8002478:	7962      	ldrb	r2, [r4, #5]
 800247a:	7923      	ldrb	r3, [r4, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d307      	bcc.n	8002490 <TM_HD44780_Puts+0x28>
			HD44780_Opts.currentX = 0;
			HD44780_Opts.currentY++;
 8002480:	79a1      	ldrb	r1, [r4, #6]
 8002482:	3101      	adds	r1, #1

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
	TM_HD44780_CursorSet(x, y);
	while (*str) {
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
			HD44780_Opts.currentX = 0;
 8002484:	2000      	movs	r0, #0
			HD44780_Opts.currentY++;
 8002486:	b2c9      	uxtb	r1, r1

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
	TM_HD44780_CursorSet(x, y);
	while (*str) {
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
			HD44780_Opts.currentX = 0;
 8002488:	7160      	strb	r0, [r4, #5]
			HD44780_Opts.currentY++;
 800248a:	71a1      	strb	r1, [r4, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800248c:	f7ff ffb2 	bl	80023f4 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 8002490:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8002494:	280a      	cmp	r0, #10
 8002496:	d105      	bne.n	80024a4 <TM_HD44780_Puts+0x3c>
			HD44780_Opts.currentY++;
 8002498:	79a1      	ldrb	r1, [r4, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800249a:	7960      	ldrb	r0, [r4, #5]
			HD44780_Opts.currentX = 0;
			HD44780_Opts.currentY++;
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
		}
		if (*str == '\n') {
			HD44780_Opts.currentY++;
 800249c:	3101      	adds	r1, #1
 800249e:	b2c9      	uxtb	r1, r1
 80024a0:	71a1      	strb	r1, [r4, #6]
 80024a2:	e7e3      	b.n	800246c <TM_HD44780_Puts+0x4>
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
		} else if (*str == '\r') {
 80024a4:	280d      	cmp	r0, #13
 80024a6:	d102      	bne.n	80024ae <TM_HD44780_Puts+0x46>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 80024a8:	2000      	movs	r0, #0
 80024aa:	79a1      	ldrb	r1, [r4, #6]
 80024ac:	e7de      	b.n	800246c <TM_HD44780_Puts+0x4>
		} else {
			TM_HD44780_Data(*str);
 80024ae:	f7ff ffbd 	bl	800242c <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 80024b2:	7963      	ldrb	r3, [r4, #5]
 80024b4:	3301      	adds	r3, #1
 80024b6:	7163      	strb	r3, [r4, #5]
 80024b8:	e7da      	b.n	8002470 <TM_HD44780_Puts+0x8>
		}
		str++;
	}
}
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	2000055c 	.word	0x2000055c

080024c0 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <TM_HD44780_DisplayOn+0x14>)
 80024c2:	7818      	ldrb	r0, [r3, #0]
 80024c4:	f040 0204 	orr.w	r2, r0, #4
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 80024c8:	f040 000c 	orr.w	r0, r0, #12
		str++;
	}
}

void TM_HD44780_DisplayOn(void) {
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 80024cc:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 80024ce:	f7ff bf7d 	b.w	80023cc <TM_HD44780_Cmd>
 80024d2:	bf00      	nop
 80024d4:	2000055c 	.word	0x2000055c

080024d8 <TM_GPIO_Init>:
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(HD44780_D6_PORT, HD44780_D6_PIN,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN,GPIO_PIN_RESET);
}

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_PuPd, uint32_t GPIO_Speed){
 80024d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_Mode;
	GPIO_InitStruct.Speed=GPIO_Speed;
 80024da:	9b08      	ldr	r3, [sp, #32]
}

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_PuPd, uint32_t GPIO_Speed){
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
 80024dc:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_Mode;
	GPIO_InitStruct.Speed=GPIO_Speed;
 80024de:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80024e0:	a901      	add	r1, sp, #4
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_Mode;
	GPIO_InitStruct.Speed=GPIO_Speed;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint32_t GPIO_Pin, uint32_t GPIO_Mode, uint32_t GPIO_PuPd, uint32_t GPIO_Speed){
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_Pin;
	GPIO_InitStruct.Mode = GPIO_Mode;
 80024e4:	9202      	str	r2, [sp, #8]
	GPIO_InitStruct.Speed=GPIO_Speed;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80024e8:	f7ff fcac 	bl	8001e44 <HAL_GPIO_Init>

}
 80024ec:	b007      	add	sp, #28
 80024ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080024f4 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 80024f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
}

static void TM_HD44780_InitPins(void) {
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_LOW);
 80024f6:	2400      	movs	r4, #0
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 80024f8:	460e      	mov	r6, r1
 80024fa:	4607      	mov	r7, r0
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
}

static void TM_HD44780_InitPins(void) {
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_LOW);
 80024fc:	4623      	mov	r3, r4
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	4846      	ldr	r0, [pc, #280]	; (800261c <TM_HD44780_Init+0x128>)
	
	/* At least 40ms */
	HD44780_Delay(40);
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8002502:	4d47      	ldr	r5, [pc, #284]	; (8002620 <TM_HD44780_Init+0x12c>)
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
}

static void TM_HD44780_InitPins(void) {
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, GPIO_MODE_OUTPUT_PP, GPIO_NOPULL, GPIO_SPEED_LOW);
 8002504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002508:	2201      	movs	r2, #1
 800250a:	f7ff ffe5 	bl	80024d8 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_E_PORT, HD44780_E_PIN, GPIO_MODE_OUTPUT_PP,  GPIO_NOPULL, GPIO_SPEED_LOW);
 800250e:	4623      	mov	r3, r4
 8002510:	9400      	str	r4, [sp, #0]
 8002512:	4842      	ldr	r0, [pc, #264]	; (800261c <TM_HD44780_Init+0x128>)
 8002514:	2104      	movs	r1, #4
 8002516:	2201      	movs	r2, #1
 8002518:	f7ff ffde 	bl	80024d8 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D4_PORT, HD44780_D4_PIN, GPIO_MODE_OUTPUT_PP,  GPIO_NOPULL, GPIO_SPEED_LOW);
 800251c:	4623      	mov	r3, r4
 800251e:	9400      	str	r4, [sp, #0]
 8002520:	483e      	ldr	r0, [pc, #248]	; (800261c <TM_HD44780_Init+0x128>)
 8002522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002526:	2201      	movs	r2, #1
 8002528:	f7ff ffd6 	bl	80024d8 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D5_PORT, HD44780_D5_PIN, GPIO_MODE_OUTPUT_PP,  GPIO_NOPULL, GPIO_SPEED_LOW);
 800252c:	4623      	mov	r3, r4
 800252e:	9400      	str	r4, [sp, #0]
 8002530:	483a      	ldr	r0, [pc, #232]	; (800261c <TM_HD44780_Init+0x128>)
 8002532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002536:	2201      	movs	r2, #1
 8002538:	f7ff ffce 	bl	80024d8 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D6_PORT, HD44780_D6_PIN, GPIO_MODE_OUTPUT_PP,  GPIO_NOPULL, GPIO_SPEED_LOW);
 800253c:	4623      	mov	r3, r4
 800253e:	9400      	str	r4, [sp, #0]
 8002540:	4836      	ldr	r0, [pc, #216]	; (800261c <TM_HD44780_Init+0x128>)
 8002542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002546:	2201      	movs	r2, #1
 8002548:	f7ff ffc6 	bl	80024d8 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D7_PORT, HD44780_D7_PIN, GPIO_MODE_OUTPUT_PP,  GPIO_NOPULL, GPIO_SPEED_LOW);
 800254c:	4623      	mov	r3, r4
 800254e:	9400      	str	r4, [sp, #0]
 8002550:	4832      	ldr	r0, [pc, #200]	; (800261c <TM_HD44780_Init+0x128>)
 8002552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002556:	2201      	movs	r2, #1
 8002558:	f7ff ffbe 	bl	80024d8 <TM_GPIO_Init>
	
	/* Set pins low */

	HAL_GPIO_WritePin(HD44780_RS_PORT, HD44780_RS_PIN,GPIO_PIN_RESET);
 800255c:	4622      	mov	r2, r4
 800255e:	482f      	ldr	r0, [pc, #188]	; (800261c <TM_HD44780_Init+0x128>)
 8002560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002564:	f7ff fdd2 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_PORT, HD44780_E_PIN,GPIO_PIN_RESET);
 8002568:	4622      	mov	r2, r4
 800256a:	482c      	ldr	r0, [pc, #176]	; (800261c <TM_HD44780_Init+0x128>)
 800256c:	2104      	movs	r1, #4
 800256e:	f7ff fdcd 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_PORT, HD44780_D4_PIN,GPIO_PIN_RESET);
 8002572:	4622      	mov	r2, r4
 8002574:	4829      	ldr	r0, [pc, #164]	; (800261c <TM_HD44780_Init+0x128>)
 8002576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800257a:	f7ff fdc7 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_PORT, HD44780_D5_PIN,GPIO_PIN_RESET);
 800257e:	4622      	mov	r2, r4
 8002580:	4826      	ldr	r0, [pc, #152]	; (800261c <TM_HD44780_Init+0x128>)
 8002582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002586:	f7ff fdc1 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_PORT, HD44780_D6_PIN,GPIO_PIN_RESET);
 800258a:	4622      	mov	r2, r4
 800258c:	4823      	ldr	r0, [pc, #140]	; (800261c <TM_HD44780_Init+0x128>)
 800258e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002592:	f7ff fdbb 	bl	800210c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_PORT, HD44780_D7_PIN,GPIO_PIN_RESET);
 8002596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259a:	4622      	mov	r2, r4
 800259c:	481f      	ldr	r0, [pc, #124]	; (800261c <TM_HD44780_Init+0x128>)
 800259e:	f7ff fdb5 	bl	800210c <HAL_GPIO_WritePin>
	
	/* Init pinout */
	TM_HD44780_InitPins();
	
	/* At least 40ms */
	HD44780_Delay(40);
 80025a2:	2028      	movs	r0, #40	; 0x28
 80025a4:	f7ff fe6c 	bl	8002280 <HAL_Delay>
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
	HD44780_Opts.currentY = 0;
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
	if (rows > 1) {
 80025a8:	2e01      	cmp	r6, #1
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80025aa:	bf88      	it	hi
 80025ac:	2308      	movhi	r3, #8
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 80025ae:	f04f 0003 	mov.w	r0, #3
	HD44780_Opts.currentX = 0;
	HD44780_Opts.currentY = 0;
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
	if (rows > 1) {
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80025b2:	bf8c      	ite	hi
 80025b4:	706b      	strbhi	r3, [r5, #1]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
	HD44780_Opts.currentY = 0;
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80025b6:	706c      	strbls	r4, [r5, #1]
	
	/* At least 40ms */
	HD44780_Delay(40);
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 80025b8:	70ee      	strb	r6, [r5, #3]
	HD44780_Opts.Cols = cols;
 80025ba:	712f      	strb	r7, [r5, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 80025bc:	716c      	strb	r4, [r5, #5]
	HD44780_Opts.currentY = 0;
 80025be:	71ac      	strb	r4, [r5, #6]
	if (rows > 1) {
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 80025c0:	f7ff fed0 	bl	8002364 <TM_HD44780_Cmd4bit>
	HD44780_Delay(45);
 80025c4:	202d      	movs	r0, #45	; 0x2d
 80025c6:	f7ff fe5b 	bl	8002280 <HAL_Delay>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 80025ca:	2003      	movs	r0, #3
 80025cc:	f7ff feca 	bl	8002364 <TM_HD44780_Cmd4bit>
	HD44780_Delay(45);
 80025d0:	202d      	movs	r0, #45	; 0x2d
 80025d2:	f7ff fe55 	bl	8002280 <HAL_Delay>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 80025d6:	2003      	movs	r0, #3
 80025d8:	f7ff fec4 	bl	8002364 <TM_HD44780_Cmd4bit>
	HD44780_Delay(45);
 80025dc:	202d      	movs	r0, #45	; 0x2d
 80025de:	f7ff fe4f 	bl	8002280 <HAL_Delay>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 80025e2:	2002      	movs	r0, #2
 80025e4:	f7ff febe 	bl	8002364 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 80025e8:	2064      	movs	r0, #100	; 0x64
 80025ea:	f7ff fe49 	bl	8002280 <HAL_Delay>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 80025ee:	7868      	ldrb	r0, [r5, #1]
 80025f0:	f040 0020 	orr.w	r0, r0, #32
 80025f4:	f7ff feea 	bl	80023cc <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 80025f8:	2304      	movs	r3, #4
 80025fa:	702b      	strb	r3, [r5, #0]
	TM_HD44780_DisplayOn();
 80025fc:	f7ff ff60 	bl	80024c0 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8002600:	f7ff ff28 	bl	8002454 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8002604:	2302      	movs	r3, #2
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8002606:	2006      	movs	r0, #6

	/* Clear lcd */
	TM_HD44780_Clear();

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8002608:	70ab      	strb	r3, [r5, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800260a:	f7ff fedf 	bl	80023cc <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(45);
 800260e:	202d      	movs	r0, #45	; 0x2d
}
 8002610:	b003      	add	sp, #12
 8002612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);

	/* Delay */
	HD44780_Delay(45);
 8002616:	f7ff be33 	b.w	8002280 <HAL_Delay>
 800261a:	bf00      	nop
 800261c:	40020400 	.word	0x40020400
 8002620:	2000055c 	.word	0x2000055c

08002624 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002624:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002626:	f7ff fe1d 	bl	8002264 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800262e:	f7ff bde8 	b.w	8002202 <HAL_SYSTICK_IRQHandler>
	...

08002634 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8002634:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  static int timerindex=0;

  timerindex=timerindex+1;
 8002636:	4c0b      	ldr	r4, [pc, #44]	; (8002664 <TIM6_DAC_IRQHandler+0x30>)

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002638:	480b      	ldr	r0, [pc, #44]	; (8002668 <TIM6_DAC_IRQHandler+0x34>)
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  static int timerindex=0;

  timerindex=timerindex+1;
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	6023      	str	r3, [r4, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002640:	f7fe ff97 	bl	8001572 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  //Toggle Led
  if (timerindex>=500){
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800264a:	db05      	blt.n	8002658 <TIM6_DAC_IRQHandler+0x24>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800264c:	4807      	ldr	r0, [pc, #28]	; (800266c <TIM6_DAC_IRQHandler+0x38>)
 800264e:	2120      	movs	r1, #32
 8002650:	f7ff fd60 	bl	8002114 <HAL_GPIO_TogglePin>
	  timerindex=0;
 8002654:	2300      	movs	r3, #0
 8002656:	6023      	str	r3, [r4, #0]
  }
  // Restart Timer
  HAL_TIM_Base_Start_IT(&htim6);
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <TIM6_DAC_IRQHandler+0x34>)

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800265a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (timerindex>=500){
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	  timerindex=0;
  }
  // Restart Timer
  HAL_TIM_Base_Start_IT(&htim6);
 800265e:	f7fe bf78 	b.w	8001552 <HAL_TIM_Base_Start_IT>
 8002662:	bf00      	nop
 8002664:	20000564 	.word	0x20000564
 8002668:	200005ec 	.word	0x200005ec
 800266c:	40020000 	.word	0x40020000

08002670 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002672:	2003      	movs	r0, #3
 8002674:	f7ff fd52 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002678:	2100      	movs	r1, #0
 800267a:	f04f 30ff 	mov.w	r0, #4294967295
 800267e:	460a      	mov	r2, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002680:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002684:	f7ff bd5c 	b.w	8002140 <HAL_NVIC_SetPriority>

08002688 <HAL_TIM_Base_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002688:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_TIM_Base_MspInit+0x38>)
 800268c:	6802      	ldr	r2, [r0, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d113      	bne.n	80026ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __TIM6_CLK_ENABLE();
 8002692:	2100      	movs	r1, #0
 8002694:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8002698:	9101      	str	r1, [sp, #4]
 800269a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269c:	f042 0210 	orr.w	r2, r2, #16
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	9301      	str	r3, [sp, #4]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026aa:	2036      	movs	r0, #54	; 0x36
 80026ac:	460a      	mov	r2, r1
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __TIM6_CLK_ENABLE();
 80026ae:	9b01      	ldr	r3, [sp, #4]
  /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026b0:	f7ff fd46 	bl	8002140 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026b4:	2036      	movs	r0, #54	; 0x36
 80026b6:	f7ff fd75 	bl	80021a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80026ba:	b003      	add	sp, #12
 80026bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80026c0:	40001000 	.word	0x40001000

080026c4 <HAL_UART_MspInit>:
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80026c6:	6803      	ldr	r3, [r0, #0]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_UART_MspInit+0x90>)
 80026ca:	4293      	cmp	r3, r2
  /* USER CODE END TIM6_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026cc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80026ce:	d122      	bne.n	8002716 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __UART5_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	4821      	ldr	r0, [pc, #132]	; (800275c <HAL_UART_MspInit+0x98>)
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __UART5_CLK_ENABLE();
 80026d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	9b01      	ldr	r3, [sp, #4]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2702      	movs	r7, #2
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f0:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80026f2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026f4:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f6:	a903      	add	r1, sp, #12
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026fc:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80026fe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002700:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	f7ff fb9f 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002706:	2304      	movs	r3, #4
 8002708:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800270e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002710:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	4813      	ldr	r0, [pc, #76]	; (8002760 <HAL_UART_MspInit+0x9c>)
 8002714:	e019      	b.n	800274a <HAL_UART_MspInit+0x86>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_UART_MspInit+0xa0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d119      	bne.n	8002750 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 800271c:	2300      	movs	r3, #0
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	4811      	ldr	r0, [pc, #68]	; (8002768 <HAL_UART_MspInit+0xa4>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __USART2_CLK_ENABLE();
 8002724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002726:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	9302      	str	r3, [sp, #8]
 8002734:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002736:	230c      	movs	r3, #12
 8002738:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800273e:	2301      	movs	r3, #1
 8002740:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002746:	2307      	movs	r3, #7
 8002748:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	a903      	add	r1, sp, #12
 800274c:	f7ff fb7a 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002750:	b009      	add	sp, #36	; 0x24
 8002752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002754:	40005000 	.word	0x40005000
 8002758:	40023800 	.word	0x40023800
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40004400 	.word	0x40004400
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800276c:	b508      	push	{r3, lr}

  if(huart->Instance==UART5)
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_UART_MspDeInit+0x44>)
 8002770:	6803      	ldr	r3, [r0, #0]
 8002772:	4293      	cmp	r3, r2
 8002774:	d10c      	bne.n	8002790 <HAL_UART_MspDeInit+0x24>
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __UART5_CLK_DISABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_UART_MspDeInit+0x48>)
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002778:	480f      	ldr	r0, [pc, #60]	; (80027b8 <HAL_UART_MspDeInit+0x4c>)
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __UART5_CLK_DISABLE();
 800277a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  {
  /* USER CODE BEGIN UART5_MspDeInit 0 */

  /* USER CODE END UART5_MspDeInit 0 */
    /* Peripheral clock disable */
    __UART5_CLK_DISABLE();
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002786:	f7ff fc3d 	bl	8002004 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800278a:	480c      	ldr	r0, [pc, #48]	; (80027bc <HAL_UART_MspDeInit+0x50>)
 800278c:	2104      	movs	r1, #4
 800278e:	e009      	b.n	80027a4 <HAL_UART_MspDeInit+0x38>

  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_UART_MspDeInit+0x54>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10a      	bne.n	80027ac <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __USART2_CLK_DISABLE();
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_UART_MspDeInit+0x48>)
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002798:	480a      	ldr	r0, [pc, #40]	; (80027c4 <HAL_UART_MspDeInit+0x58>)
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __USART2_CLK_DISABLE();
 800279a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800279c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80027a2:	210c      	movs	r1, #12
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80027a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80027a8:	f7ff bc2c 	b.w	8002004 <HAL_GPIO_DeInit>
 80027ac:	bd08      	pop	{r3, pc}
 80027ae:	bf00      	nop
 80027b0:	40005000 	.word	0x40005000
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40004400 	.word	0x40004400
 80027c4:	40020000 	.word	0x40020000

080027c8 <ow_init>:

#define OW_MATCH_ROM    0x55
#define OW_SKIP_ROM     0xcc
#define OW_SEARCH_ROM   0xf0

uint8_t ow_init(void) {
 80027c8:	b508      	push	{r3, lr}
  if(uart_init() != UART_SUCCESS) return OW_ERR_UART;
 80027ca:	f7ff fd8d 	bl	80022e8 <uart_init>
 80027ce:	2800      	cmp	r0, #0
  else return OW_ERR_SUCCESS;
}
 80027d0:	bf14      	ite	ne
 80027d2:	2002      	movne	r0, #2
 80027d4:	2000      	moveq	r0, #0
 80027d6:	bd08      	pop	{r3, pc}

080027d8 <ow_finit>:

void ow_finit(void) {
  uart_finit();
 80027d8:	f7ff bd88 	b.w	80022ec <uart_finit>

080027dc <ow_reset>:
}

uint8_t ow_reset(void) {
 80027dc:	b510      	push	{r4, lr}
  uint8_t err;

  uart_setb(BAUD_LOW);
 80027de:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80027e2:	f7ff fd85 	bl	80022f0 <uart_setb>
  /* pull DQ line low, then up. UART transmits LSB first. */
  uart_putc(0xf0);
 80027e6:	20f0      	movs	r0, #240	; 0xf0
 80027e8:	f7ff fd9c 	bl	8002324 <uart_putc>

  err = uart_getc();
 80027ec:	f7ff fdaa 	bl	8002344 <uart_getc>
 80027f0:	4604      	mov	r4, r0
  uart_setb(BAUD_HIGH);
 80027f2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80027f6:	f7ff fd7b 	bl	80022f0 <uart_setb>

#ifdef DEBUG
  printf("DEBUG: Probe result: 0x%02hx\n", err);
#endif

  if(err == 0x00) return OW_ERR_SHORT;
 80027fa:	b124      	cbz	r4, 8002806 <ow_reset+0x2a>
  if(err == 0xf0) return OW_ERR_PRESENCE;
 80027fc:	2cf0      	cmp	r4, #240	; 0xf0
 80027fe:	bf0c      	ite	eq
 8002800:	20ff      	moveq	r0, #255	; 0xff
 8002802:	2000      	movne	r0, #0
 8002804:	bd10      	pop	{r4, pc}

#ifdef DEBUG
  printf("DEBUG: Probe result: 0x%02hx\n", err);
#endif

  if(err == 0x00) return OW_ERR_SHORT;
 8002806:	2001      	movs	r0, #1
  if(err == 0xf0) return OW_ERR_PRESENCE;
  return OW_ERR_SUCCESS;
}
 8002808:	bd10      	pop	{r4, pc}

0800280a <ow_bit>:

uint8_t ow_bit(uint8_t b) {
 800280a:	b508      	push	{r3, lr}
  uint8_t c;

  if(b) uart_putc(0xff); /* Write 1 */
 800280c:	b100      	cbz	r0, 8002810 <ow_bit+0x6>
 800280e:	20ff      	movs	r0, #255	; 0xff
  else  uart_putc(0x00); /* Write 0 */
 8002810:	f7ff fd88 	bl	8002324 <uart_putc>

  /* Read */
  c = uart_getc();
 8002814:	f7ff fd96 	bl	8002344 <uart_getc>
#ifdef DEBUG
  printf("DEBUG: ATOMIC OP: %d -> %d\n", b, c == 0xff);
#endif

  return (c == 0xff);
}
 8002818:	f1b0 03ff 	subs.w	r3, r0, #255	; 0xff
 800281c:	4258      	negs	r0, r3
 800281e:	4158      	adcs	r0, r3
 8002820:	bd08      	pop	{r3, pc}

08002822 <ow_byte_wr>:

uint8_t ow_byte_wr(uint8_t b) {
 8002822:	b538      	push	{r3, r4, r5, lr}
 8002824:	4604      	mov	r4, r0
 8002826:	2508      	movs	r5, #8
#ifdef DEBUG
  printf("DEBUG: Write char:   0x%02hx\n", b);
#endif

  do {
    j = ow_bit(b & 1);
 8002828:	f004 0001 	and.w	r0, r4, #1
 800282c:	f7ff ffed 	bl	800280a <ow_bit>
    b >>= 1;
 8002830:	0864      	lsrs	r4, r4, #1
    if(j) b |= 0x80;
 8002832:	b110      	cbz	r0, 800283a <ow_byte_wr+0x18>
 8002834:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8002838:	b2e4      	uxtb	r4, r4
 800283a:	3d01      	subs	r5, #1
  } while(-- i);
 800283c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002840:	d1f2      	bne.n	8002828 <ow_byte_wr+0x6>
#ifdef DEBUG
  printf("DEBUG: Write result: 0x%02hx\n", b);
#endif

  return b;
}
 8002842:	4620      	mov	r0, r4
 8002844:	bd38      	pop	{r3, r4, r5, pc}

08002846 <ow_byte_rd>:

uint8_t ow_byte_rd(void) {
  /* read by sending only "1"s, so bus gets released after the init low-pulse in every slot */
  return ow_byte_wr(0xff);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff bfeb 	b.w	8002822 <ow_byte_wr>

0800284c <ow_rom_search>:
}

uint8_t ow_rom_search(uint8_t diff, uint8_t *id) {
 800284c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002850:	4680      	mov	r8, r0
 8002852:	460d      	mov	r5, r1
  uint8_t i, j, next_diff;
  uint8_t b;

  /* error, no device found <--- early exit! */
  if(ow_reset() != OW_ERR_SUCCESS) return OW_ERR_PRESENCE;
 8002854:	f7ff ffc2 	bl	80027dc <ow_reset>
 8002858:	4607      	mov	r7, r0
 800285a:	2800      	cmp	r0, #0
 800285c:	d137      	bne.n	80028ce <ow_rom_search+0x82>

  ow_byte_wr(OW_SEARCH_ROM); /* ROM search command */
 800285e:	20f0      	movs	r0, #240	; 0xf0
 8002860:	f7ff ffdf 	bl	8002822 <ow_byte_wr>
 8002864:	3501      	adds	r5, #1
  next_diff = OW_LAST_DEVICE; /* unchanged on last device */

  i = OW_ROMCODE_SIZE * 8; /* 8 bytes */
 8002866:	2440      	movs	r4, #64	; 0x40
 8002868:	f1a4 0908 	sub.w	r9, r4, #8
 800286c:	fa5f f989 	uxtb.w	r9, r9

  do {
    j = 8; /* 8 bits */
    do {
      b = ow_bit(1); /* read bit */
 8002870:	2001      	movs	r0, #1
 8002872:	f7ff ffca 	bl	800280a <ow_bit>
 8002876:	4606      	mov	r6, r0
      if(ow_bit(1)) { /* use brackets to tell the compiler the following else is mine */
 8002878:	2001      	movs	r0, #1
 800287a:	f7ff ffc6 	bl	800280a <ow_bit>
 800287e:	b108      	cbz	r0, 8002884 <ow_rom_search+0x38>
        if(b) return OW_ERR_DATA; /* read complement bit, 0b11: data error <--- early exit! */
 8002880:	b186      	cbz	r6, 80028a4 <ow_rom_search+0x58>
 8002882:	e027      	b.n	80028d4 <ow_rom_search+0x88>
      }
      else if(!b) if(diff > i || ((*id & 1) && diff != i)) { /* 0b00 = 2 devices */
 8002884:	b976      	cbnz	r6, 80028a4 <ow_rom_search+0x58>
 8002886:	45a0      	cmp	r8, r4
 8002888:	d80a      	bhi.n	80028a0 <ow_rom_search+0x54>
 800288a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800288e:	07db      	lsls	r3, r3, #31
 8002890:	d508      	bpl.n	80028a4 <ow_rom_search+0x58>
 8002892:	45a0      	cmp	r8, r4
 8002894:	bf18      	it	ne
 8002896:	4627      	movne	r7, r4
 8002898:	bf0c      	ite	eq
 800289a:	2600      	moveq	r6, #0
 800289c:	2601      	movne	r6, #1
 800289e:	e001      	b.n	80028a4 <ow_rom_search+0x58>
 80028a0:	4627      	mov	r7, r4
        b = 1; /* now 1 */
 80028a2:	2601      	movs	r6, #1
        next_diff = i; /* next pass 0 */
      }

      ow_bit(b); /* write bit */
 80028a4:	4630      	mov	r0, r6
 80028a6:	f7ff ffb0 	bl	800280a <ow_bit>
      *id >>= 1;
 80028aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80028ae:	085b      	lsrs	r3, r3, #1
      if(b) *id |= 0x80; /* store bit */
 80028b0:	b10e      	cbz	r6, 80028b6 <ow_rom_search+0x6a>
 80028b2:	f063 037f 	orn	r3, r3, #127	; 0x7f

      i --;
 80028b6:	3c01      	subs	r4, #1
 80028b8:	b2e4      	uxtb	r4, r4
    } while(-- j);
 80028ba:	454c      	cmp	r4, r9
        next_diff = i; /* next pass 0 */
      }

      ow_bit(b); /* write bit */
      *id >>= 1;
      if(b) *id |= 0x80; /* store bit */
 80028bc:	f805 3c01 	strb.w	r3, [r5, #-1]

      i --;
    } while(-- j);
 80028c0:	d1d6      	bne.n	8002870 <ow_rom_search+0x24>
 80028c2:	3501      	adds	r5, #1
    id ++; /* next byte */
  } while(i);
 80028c4:	2c00      	cmp	r4, #0
 80028c6:	d1cf      	bne.n	8002868 <ow_rom_search+0x1c>
 80028c8:	4638      	mov	r0, r7

  return next_diff; /* to continue search */
}
 80028ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t ow_rom_search(uint8_t diff, uint8_t *id) {
  uint8_t i, j, next_diff;
  uint8_t b;

  /* error, no device found <--- early exit! */
  if(ow_reset() != OW_ERR_SUCCESS) return OW_ERR_PRESENCE;
 80028ce:	20ff      	movs	r0, #255	; 0xff
 80028d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  do {
    j = 8; /* 8 bits */
    do {
      b = ow_bit(1); /* read bit */
      if(ow_bit(1)) { /* use brackets to tell the compiler the following else is mine */
        if(b) return OW_ERR_DATA; /* read complement bit, 0b11: data error <--- early exit! */
 80028d4:	20fe      	movs	r0, #254	; 0xfe
 80028d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080028da <ow_command>:
  } while(i);

  return next_diff; /* to continue search */
}

void ow_command(uint8_t command, uint8_t *id) {
 80028da:	b570      	push	{r4, r5, r6, lr}
 80028dc:	460d      	mov	r5, r1
 80028de:	4606      	mov	r6, r0
  uint8_t i;

  ow_reset();
 80028e0:	f7ff ff7c 	bl	80027dc <ow_reset>

  if(id) {
 80028e4:	b155      	cbz	r5, 80028fc <ow_command+0x22>
    ow_byte_wr(OW_MATCH_ROM); /* to a single device */
 80028e6:	2055      	movs	r0, #85	; 0x55
 80028e8:	f7ff ff9b 	bl	8002822 <ow_byte_wr>
 80028ec:	2400      	movs	r4, #0
    i = OW_ROMCODE_SIZE;
    do {
      ow_byte_wr(*id);
 80028ee:	5d28      	ldrb	r0, [r5, r4]
 80028f0:	3401      	adds	r4, #1
 80028f2:	f7ff ff96 	bl	8002822 <ow_byte_wr>
      id++;
    } while(--i);
 80028f6:	2c08      	cmp	r4, #8
 80028f8:	d1f9      	bne.n	80028ee <ow_command+0x14>
 80028fa:	e002      	b.n	8002902 <ow_command+0x28>
  }
  else ow_byte_wr(OW_SKIP_ROM); /* to all devices */
 80028fc:	20cc      	movs	r0, #204	; 0xcc
 80028fe:	f7ff ff90 	bl	8002822 <ow_byte_wr>

  ow_byte_wr(command);
 8002902:	4630      	mov	r0, r6
}
 8002904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      id++;
    } while(--i);
  }
  else ow_byte_wr(OW_SKIP_ROM); /* to all devices */

  ow_byte_wr(command);
 8002908:	f7ff bf8b 	b.w	8002822 <ow_byte_wr>

0800290c <get_type_by_id>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
uint8_t id[OW_ROMCODE_SIZE];

char *get_type_by_id(uint8_t id) {
 800290c:	3810      	subs	r0, #16
 800290e:	b2c0      	uxtb	r0, r0
 8002910:	2818      	cmp	r0, #24
 8002912:	bf9a      	itte	ls
 8002914:	4b02      	ldrls	r3, [pc, #8]	; (8002920 <get_type_by_id+0x14>)
 8002916:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800291a:	4802      	ldrhi	r0, [pc, #8]	; (8002924 <get_type_by_id+0x18>)
    case DS18S20_FAMILY_CODE: return "DS18S20";
    case DS18B20_FAMILY_CODE: return "DS18B20";
    case DS1822_FAMILY_CODE : return "DS1822";
    default: return "WTF?!";
  }
}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	08005f00 	.word	0x08005f00
 8002924:	08005dfb 	.word	0x08005dfb

08002928 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002928:	b530      	push	{r4, r5, lr}
 800292a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 800292c:	2400      	movs	r4, #0
 800292e:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <SystemClock_Config+0x9c>)
 8002930:	9400      	str	r4, [sp, #0]
 8002932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002934:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <SystemClock_Config+0xa0>)
 8002946:	9401      	str	r4, [sp, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002952:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800295c:	2301      	movs	r3, #1
 800295e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002960:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002962:	22b4      	movs	r2, #180	; 0xb4

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002964:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002966:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002968:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800296a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 180;
 800296c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800296e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002970:	9312      	str	r3, [sp, #72]	; 0x48

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002972:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002974:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002976:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002978:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800297a:	f7fe ff1b 	bl	80017b4 <HAL_RCC_OscConfig>

  HAL_PWREx_ActivateOverDrive();
 800297e:	f7ff fa15 	bl	8001dac <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002982:	230f      	movs	r3, #15
 8002984:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800298a:	2105      	movs	r1, #5

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800298c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800298e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002994:	9306      	str	r3, [sp, #24]

  HAL_PWREx_ActivateOverDrive();

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002996:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002998:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800299a:	f7ff f91f 	bl	8001bdc <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800299e:	f7ff f9bf 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80029aa:	f7ff fc07 	bl	80021bc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80029ae:	2004      	movs	r0, #4
 80029b0:	f7ff fc1a 	bl	80021e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	4621      	mov	r1, r4
 80029ba:	4622      	mov	r2, r4
 80029bc:	f7ff fbc0 	bl	8002140 <HAL_NVIC_SetPriority>
}
 80029c0:	b015      	add	sp, #84	; 0x54
 80029c2:	bd30      	pop	{r4, r5, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000

080029cc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80029cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* USER CODE BEGIN 1 */
	char test[255]="TEST3 ";
 80029d0:	4fa6      	ldr	r7, [pc, #664]	; (8002c6c <main+0x2a0>)
void MX_TIM6_Init(void)
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 80029d2:	4ea7      	ldr	r6, [pc, #668]	; (8002c70 <main+0x2a4>)

int main(void)
{

  /* USER CODE BEGIN 1 */
	char test[255]="TEST3 ";
 80029d4:	6838      	ldr	r0, [r7, #0]
 80029d6:	88ba      	ldrh	r2, [r7, #4]
 80029d8:	79bb      	ldrb	r3, [r7, #6]
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80029da:	b0d6      	sub	sp, #344	; 0x158

  /* USER CODE BEGIN 1 */
	char test[255]="TEST3 ";
 80029dc:	2100      	movs	r1, #0
 80029de:	9016      	str	r0, [sp, #88]	; 0x58
 80029e0:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 80029e4:	f10d 005f 	add.w	r0, sp, #95	; 0x5f
 80029e8:	22f8      	movs	r2, #248	; 0xf8
 80029ea:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 80029ee:	f000 fa69 	bl	8002ec4 <memset>
		 uint8_t c = 0, diff = OW_SEARCH_FIRST;
 80029f2:	23ff      	movs	r3, #255	; 0xff
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 80029f4:	2400      	movs	r4, #0
int main(void)
{

  /* USER CODE BEGIN 1 */
	char test[255]="TEST3 ";
		 uint8_t c = 0, diff = OW_SEARCH_FIRST;
 80029f6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029fa:	f7ff fc19 	bl	8002230 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80029fe:	f7ff ff93 	bl	8002928 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8002a02:	4b9c      	ldr	r3, [pc, #624]	; (8002c74 <main+0x2a8>)
 8002a04:	940c      	str	r4, [sp, #48]	; 0x30
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a08:	489b      	ldr	r0, [pc, #620]	; (8002c78 <main+0x2ac>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8002a0a:	f042 0204 	orr.w	r2, r2, #4
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a12:	f002 0204 	and.w	r2, r2, #4
 8002a16:	920c      	str	r2, [sp, #48]	; 0x30
 8002a18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  __GPIOH_CLK_ENABLE();
 8002a1a:	940d      	str	r4, [sp, #52]	; 0x34
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
 8002a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a26:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a2a:	920d      	str	r2, [sp, #52]	; 0x34
 8002a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  __GPIOA_CLK_ENABLE();
 8002a2e:	940e      	str	r4, [sp, #56]	; 0x38
 8002a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
 8002a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a3a:	f002 0201 	and.w	r2, r2, #1
 8002a3e:	920e      	str	r2, [sp, #56]	; 0x38
 8002a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  __GPIOD_CLK_ENABLE();
 8002a42:	940f      	str	r4, [sp, #60]	; 0x3c
 8002a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a46:	f042 0208 	orr.w	r2, r2, #8
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4e:	f002 0208 	and.w	r2, r2, #8
 8002a52:	920f      	str	r2, [sp, #60]	; 0x3c
 8002a54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  __GPIOB_CLK_ENABLE();
 8002a56:	9410      	str	r4, [sp, #64]	; 0x40
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	f042 0202 	orr.w	r2, r2, #2
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a62:	9412      	str	r4, [sp, #72]	; 0x48
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
  __GPIOH_CLK_ENABLE();
  __GPIOA_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	9310      	str	r3, [sp, #64]	; 0x40
 8002a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	9413      	str	r4, [sp, #76]	; 0x4c
  __GPIOA_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a72:	a911      	add	r1, sp, #68	; 0x44
  __GPIOA_CLK_ENABLE();
  __GPIOD_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002a74:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a76:	2520      	movs	r5, #32

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002a78:	f7ff f9e4 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a80:	487e      	ldr	r0, [pc, #504]	; (8002c7c <main+0x2b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a82:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a84:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a86:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002a8c:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f7ff f9d9 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a92:	4629      	mov	r1, r5
 8002a94:	4879      	ldr	r0, [pc, #484]	; (8002c7c <main+0x2b0>)
*/
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002a96:	4d7a      	ldr	r5, [pc, #488]	; (8002c80 <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002a98:	4622      	mov	r2, r4
 8002a9a:	f7ff fb37 	bl	800210c <HAL_GPIO_WritePin>
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 2;
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <main+0x2b8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa0:	60b4      	str	r4, [r6, #8]
{

  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 2;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e886 000c 	stmia.w	r6, {r2, r3}
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 45000;
  HAL_TIM_Base_Init(&htim6);
 8002aa8:	4630      	mov	r0, r6
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 2;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 45000;
 8002aaa:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8002aae:	60f3      	str	r3, [r6, #12]
  HAL_TIM_Base_Init(&htim6);
 8002ab0:	f7fe fe66 	bl	8001780 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8002ab4:	a911      	add	r1, sp, #68	; 0x44
 8002ab6:	4630      	mov	r0, r6
  htim6.Init.Prescaler = 2;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 45000;
  HAL_TIM_Base_Init(&htim6);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab8:	9411      	str	r4, [sp, #68]	; 0x44
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aba:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8002abc:	f7fe fd25 	bl	800150a <HAL_TIMEx_MasterConfigSynchronization>
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002ac0:	4971      	ldr	r1, [pc, #452]	; (8002c88 <main+0x2bc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	60ac      	str	r4, [r5, #8]
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8002ac4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002ac8:	e885 000a 	stmia.w	r5, {r1, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&huart2);
 8002acc:	4628      	mov	r0, r5
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	616b      	str	r3, [r5, #20]
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ad2:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ad4:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad6:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	61ec      	str	r4, [r5, #28]
  HAL_UART_Init(&huart2);
 8002ada:	f7fe fc37 	bl	800134c <HAL_UART_Init>
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */


  TM_HD44780_Init(20,4);
 8002ade:	2014      	movs	r0, #20
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	f7ff fd07 	bl	80024f4 <TM_HD44780_Init>
 TM_HD44780_Puts(0, 0, "STM32F4/29 Discovery");
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <main+0x2c0>)
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7ff fcbc 	bl	8002468 <TM_HD44780_Puts>



  HAL_TIM_Base_Start_IT(&htim6);
 8002af0:	4630      	mov	r0, r6
 8002af2:	f7fe fd2e 	bl	8001552 <HAL_TIM_Base_Start_IT>

  test[0]=13;
 8002af6:	230d      	movs	r3, #13
  HAL_UART_Transmit(&huart2,test,1,200);
 8002af8:	4642      	mov	r2, r8



  HAL_TIM_Base_Start_IT(&htim6);

  test[0]=13;
 8002afa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  HAL_UART_Transmit(&huart2,test,1,200);
 8002afe:	a916      	add	r1, sp, #88	; 0x58
 8002b00:	23c8      	movs	r3, #200	; 0xc8
 8002b02:	4628      	mov	r0, r5
 8002b04:	f7fe fc63 	bl	80013ce <HAL_UART_Transmit>

  sprintf(test,"\n\rthis is a test\n\r");
 8002b08:	4961      	ldr	r1, [pc, #388]	; (8002c90 <main+0x2c4>)
 8002b0a:	a816      	add	r0, sp, #88	; 0x58
 8002b0c:	f000 fa06 	bl	8002f1c <strcpy>
  HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002b10:	a816      	add	r0, sp, #88	; 0x58
 8002b12:	f000 fa0b 	bl	8002f2c <strlen>
 8002b16:	a916      	add	r1, sp, #88	; 0x58
 8002b18:	b282      	uxth	r2, r0
 8002b1a:	23c8      	movs	r3, #200	; 0xc8
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f7fe fc56 	bl	80013ce <HAL_UART_Transmit>

		  ow_init();
 8002b22:	f7ff fe51 	bl	80027c8 <ow_init>
		  while(diff != OW_LAST_DEVICE) {
 8002b26:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06f      	beq.n	8002c0e <main+0x242>
		    DS18X20_find_sensor(&diff, id);
 8002b2e:	4d59      	ldr	r5, [pc, #356]	; (8002c94 <main+0x2c8>)
 8002b30:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 8002b34:	4629      	mov	r1, r5
 8002b36:	f000 f91d 	bl	8002d74 <DS18X20_find_sensor>
		    if(diff == OW_ERR_PRESENCE) {
 8002b3a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d102      	bne.n	8002b48 <main+0x17c>
		    	sprintf(test,"All sensors are offline now.\n\r");
 8002b42:	a816      	add	r0, sp, #88	; 0x58
 8002b44:	4954      	ldr	r1, [pc, #336]	; (8002c98 <main+0x2cc>)
 8002b46:	e003      	b.n	8002b50 <main+0x184>
		      HAL_UART_Transmit(&huart2,test,strlen(test),200);
		      break;
		      ow_finit();
		    }
		    if(diff == OW_ERR_DATA) {
 8002b48:	2bfe      	cmp	r3, #254	; 0xfe
 8002b4a:	d10d      	bne.n	8002b68 <main+0x19c>

		    	sprintf(test,"Bus error.\n\r");
 8002b4c:	4953      	ldr	r1, [pc, #332]	; (8002c9c <main+0x2d0>)
 8002b4e:	a816      	add	r0, sp, #88	; 0x58
 8002b50:	f000 f9e4 	bl	8002f1c <strcpy>
		      		      HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002b54:	a816      	add	r0, sp, #88	; 0x58
 8002b56:	f000 f9e9 	bl	8002f2c <strlen>
 8002b5a:	a916      	add	r1, sp, #88	; 0x58
 8002b5c:	b282      	uxth	r2, r0
 8002b5e:	23c8      	movs	r3, #200	; 0xc8
 8002b60:	4847      	ldr	r0, [pc, #284]	; (8002c80 <main+0x2b4>)
 8002b62:	f7fe fc34 	bl	80013ce <HAL_UART_Transmit>
		      break;
 8002b66:	e052      	b.n	8002c0e <main+0x242>
		      ow_finit();
		    }
		    sprintf(test,"Bus %i Device %03u Type 0x%02hx (%s) ID %02hx%02hx%02hx%02hx%02hx%02hx CRC 0x%02hx \n\r", \
			           5, c, id[0], get_type_by_id(id[0]), id[6], id[5], id[4], id[3], id[2], id[1], id[7]);
 8002b68:	782e      	ldrb	r6, [r5, #0]
		    	sprintf(test,"Bus error.\n\r");
		      		      HAL_UART_Transmit(&huart2,test,strlen(test),200);
		      break;
		      ow_finit();
		    }
		    sprintf(test,"Bus %i Device %03u Type 0x%02hx (%s) ID %02hx%02hx%02hx%02hx%02hx%02hx CRC 0x%02hx \n\r", \
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f7ff fece 	bl	800290c <get_type_by_id>
 8002b70:	9600      	str	r6, [sp, #0]
 8002b72:	9001      	str	r0, [sp, #4]
 8002b74:	79ab      	ldrb	r3, [r5, #6]
 8002b76:	9302      	str	r3, [sp, #8]
 8002b78:	796b      	ldrb	r3, [r5, #5]
 8002b7a:	9303      	str	r3, [sp, #12]
 8002b7c:	792b      	ldrb	r3, [r5, #4]
 8002b7e:	9304      	str	r3, [sp, #16]
 8002b80:	78eb      	ldrb	r3, [r5, #3]
 8002b82:	9305      	str	r3, [sp, #20]
 8002b84:	78ab      	ldrb	r3, [r5, #2]
 8002b86:	9306      	str	r3, [sp, #24]
 8002b88:	786b      	ldrb	r3, [r5, #1]
 8002b8a:	9307      	str	r3, [sp, #28]
 8002b8c:	79eb      	ldrb	r3, [r5, #7]
 8002b8e:	4944      	ldr	r1, [pc, #272]	; (8002ca0 <main+0x2d4>)
 8002b90:	9308      	str	r3, [sp, #32]
 8002b92:	2205      	movs	r2, #5
 8002b94:	b2e3      	uxtb	r3, r4
 8002b96:	a816      	add	r0, sp, #88	; 0x58
 8002b98:	f000 f99c 	bl	8002ed4 <sprintf>
			           5, c, id[0], get_type_by_id(id[0]), id[6], id[5], id[4], id[3], id[2], id[1], id[7]);
		     HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002b9c:	a816      	add	r0, sp, #88	; 0x58
 8002b9e:	f000 f9c5 	bl	8002f2c <strlen>
 8002ba2:	a916      	add	r1, sp, #88	; 0x58
 8002ba4:	b282      	uxth	r2, r0
 8002ba6:	23c8      	movs	r3, #200	; 0xc8
 8002ba8:	4835      	ldr	r0, [pc, #212]	; (8002c80 <main+0x2b4>)
 8002baa:	f7fe fc10 	bl	80013ce <HAL_UART_Transmit>
		    /*printf("Bus %s Device %03u Type 0x%02hx (%s) ID %02hx%02hx%02hx%02hx%02hx%02hx CRC 0x%02hx ", \
		           argv[1], c, id[0], get_type_by_id(id[0]), id[6], id[5], id[4], id[3], id[2], id[1], id[7]);*/
		    c ++;

		    if(DS18X20_start_meas(DS18X20_POWER_EXTERN, NULL) == DS18X20_OK) {
 8002bae:	2001      	movs	r0, #1
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	f000 f8f7 	bl	8002da4 <DS18X20_start_meas>
 8002bb6:	b9d8      	cbnz	r0, 8002bf0 <main+0x224>
		      if(DS18X20_read_decicelsius(id, &temp_dc) == DS18X20_OK) {
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8002bbe:	f000 f8fb 	bl	8002db8 <DS18X20_read_decicelsius>
 8002bc2:	b9a8      	cbnz	r0, 8002bf0 <main+0x224>
		    	  sprintf(test,"TEMP %3d.%01d C\n", temp_dc / 10, temp_dc > 0 ? temp_dc % 10 : -temp_dc % 10);
 8002bc4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8002bc8:	210a      	movs	r1, #10
 8002bca:	fb93 f0f1 	sdiv	r0, r3, r1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	b202      	sxth	r2, r0
 8002bd2:	dd03      	ble.n	8002bdc <main+0x210>
 8002bd4:	fb01 3310 	mls	r3, r1, r0, r3
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	e004      	b.n	8002be6 <main+0x21a>
 8002bdc:	425b      	negs	r3, r3
 8002bde:	fb93 f0f1 	sdiv	r0, r3, r1
 8002be2:	fb01 3310 	mls	r3, r1, r0, r3
 8002be6:	a816      	add	r0, sp, #88	; 0x58
 8002be8:	492e      	ldr	r1, [pc, #184]	; (8002ca4 <main+0x2d8>)
 8002bea:	f000 f973 	bl	8002ed4 <sprintf>
 8002bee:	e003      	b.n	8002bf8 <main+0x22c>
		    	  HAL_UART_Transmit(&huart2,test,strlen(test),200);
		    	  	continue;
		      }
		    }

		    sprintf(test,"MEASURE FAILED!\n\r");
 8002bf0:	a816      	add	r0, sp, #88	; 0x58
 8002bf2:	492d      	ldr	r1, [pc, #180]	; (8002ca8 <main+0x2dc>)
 8002bf4:	f000 f992 	bl	8002f1c <strcpy>
		    HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002bf8:	a816      	add	r0, sp, #88	; 0x58
 8002bfa:	f000 f997 	bl	8002f2c <strlen>
 8002bfe:	a916      	add	r1, sp, #88	; 0x58
 8002c00:	b282      	uxth	r2, r0
 8002c02:	23c8      	movs	r3, #200	; 0xc8
 8002c04:	481e      	ldr	r0, [pc, #120]	; (8002c80 <main+0x2b4>)
 8002c06:	f7fe fbe2 	bl	80013ce <HAL_UART_Transmit>
 8002c0a:	3401      	adds	r4, #1
 8002c0c:	e78b      	b.n	8002b26 <main+0x15a>

		  }
		  sprintf(test,"Sensors listed.\n\r");
 8002c0e:	4927      	ldr	r1, [pc, #156]	; (8002cac <main+0x2e0>)
 8002c10:	a816      	add	r0, sp, #88	; 0x58
 8002c12:	f000 f983 	bl	8002f1c <strcpy>
		  HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002c16:	a816      	add	r0, sp, #88	; 0x58
 8002c18:	f000 f988 	bl	8002f2c <strlen>
 8002c1c:	a916      	add	r1, sp, #88	; 0x58
 8002c1e:	b282      	uxth	r2, r0
 8002c20:	23c8      	movs	r3, #200	; 0xc8
 8002c22:	4817      	ldr	r0, [pc, #92]	; (8002c80 <main+0x2b4>)
 8002c24:	f7fe fbd3 	bl	80013ce <HAL_UART_Transmit>

		  ow_finit();
 8002c28:	f7ff fdd6 	bl	80027d8 <ow_finit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char test[10]="TEST3 ";
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	88ba      	ldrh	r2, [r7, #4]
 8002c30:	79bb      	ldrb	r3, [r7, #6]
 8002c32:	9011      	str	r0, [sp, #68]	; 0x44
 8002c34:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 8002c38:	f10d 004b 	add.w	r0, sp, #75	; 0x4b
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
 8002c44:	f000 f93e 	bl	8002ec4 <memset>



	  sprintf(test,"Test 3\n\r");
 8002c48:	4919      	ldr	r1, [pc, #100]	; (8002cb0 <main+0x2e4>)
 8002c4a:	a811      	add	r0, sp, #68	; 0x44
 8002c4c:	f000 f966 	bl	8002f1c <strcpy>
	  		  HAL_UART_Transmit(&huart2,test,strlen(test),200);
 8002c50:	a811      	add	r0, sp, #68	; 0x44
 8002c52:	f000 f96b 	bl	8002f2c <strlen>
 8002c56:	a911      	add	r1, sp, #68	; 0x44
 8002c58:	b282      	uxth	r2, r0
 8002c5a:	23c8      	movs	r3, #200	; 0xc8
 8002c5c:	4808      	ldr	r0, [pc, #32]	; (8002c80 <main+0x2b4>)
 8002c5e:	f7fe fbb6 	bl	80013ce <HAL_UART_Transmit>



	  HAL_Delay(1000);
 8002c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c66:	f7ff fb0b 	bl	8002280 <HAL_Delay>
 8002c6a:	e7df      	b.n	8002c2c <main+0x260>
 8002c6c:	08005cec 	.word	0x08005cec
 8002c70:	200005ec 	.word	0x200005ec
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	20000628 	.word	0x20000628
 8002c84:	40001000 	.word	0x40001000
 8002c88:	40004400 	.word	0x40004400
 8002c8c:	08005e01 	.word	0x08005e01
 8002c90:	08005e16 	.word	0x08005e16
 8002c94:	200005e4 	.word	0x200005e4
 8002c98:	08005e29 	.word	0x08005e29
 8002c9c:	08005e48 	.word	0x08005e48
 8002ca0:	08005e55 	.word	0x08005e55
 8002ca4:	08005eab 	.word	0x08005eab
 8002ca8:	08005ebc 	.word	0x08005ebc
 8002cac:	08005ece 	.word	0x08005ece
 8002cb0:	08005ee0 	.word	0x08005ee0

08002cb4 <DS18X20_raw_to_decicelsius>:
  uint16_t measure;
  uint8_t negative;
  int16_t decicelsius;
  uint16_t fract;

  measure = sp[0] | (sp[1] << 8);
 8002cb4:	784a      	ldrb	r2, [r1, #1]
 8002cb6:	780b      	ldrb	r3, [r1, #0]
  /* measure = 0xFF5E; test -10.125 */
  /* measure = 0xFE6F; test -25.0625 */

  if(familycode == DS18S20_FAMILY_CODE) { /* 9 -> 12 bit if 18S20 */
 8002cb8:	2810      	cmp	r0, #16
  uint16_t measure;
  uint8_t negative;
  int16_t decicelsius;
  uint16_t fract;

  measure = sp[0] | (sp[1] << 8);
 8002cba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* measure = 0xFF5E; test -10.125 */
  /* measure = 0xFE6F; test -25.0625 */

  if(familycode == DS18S20_FAMILY_CODE) { /* 9 -> 12 bit if 18S20 */
 8002cbe:	d107      	bne.n	8002cd0 <DS18X20_raw_to_decicelsius+0x1c>
    /* Extended measurements for DS18S20 contributed by Carsten Foss */
    measure &= (uint16_t)0xfffe; /* Discard LSB, needed for later extended precicion calc */
    measure <<= 3; /* Convert to 12-bit, now degrees are in 1/16 degrees units */
    measure += (16 - sp[6]) - 4; /* Add the compensation and remember to subtract 0.25 degree (4 / 16) */
 8002cc0:	798a      	ldrb	r2, [r1, #6]
  /* measure = 0xFF5E; test -10.125 */
  /* measure = 0xFE6F; test -25.0625 */

  if(familycode == DS18S20_FAMILY_CODE) { /* 9 -> 12 bit if 18S20 */
    /* Extended measurements for DS18S20 contributed by Carsten Foss */
    measure &= (uint16_t)0xfffe; /* Discard LSB, needed for later extended precicion calc */
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
    measure <<= 3; /* Convert to 12-bit, now degrees are in 1/16 degrees units */
    measure += (16 - sp[6]) - 4; /* Add the compensation and remember to subtract 0.25 degree (4 / 16) */
 8002cc6:	f1c2 020c 	rsb	r2, r2, #12
 8002cca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002cce:	b29b      	uxth	r3, r3
  }

  /* check for negative */
  if(measure & 0x8000) {
 8002cd0:	041a      	lsls	r2, r3, #16
    negative = 1; /* mark negative */
    measure ^= 0xffff; /* convert to positive => (twos complement)++ */
    measure++;
 8002cd2:	bf43      	ittte	mi
 8002cd4:	425b      	negmi	r3, r3
 8002cd6:	b29b      	uxthmi	r3, r3
    measure += (16 - sp[6]) - 4; /* Add the compensation and remember to subtract 0.25 degree (4 / 16) */
  }

  /* check for negative */
  if(measure & 0x8000) {
    negative = 1; /* mark negative */
 8002cd8:	2201      	movmi	r2, #1
    measure ^= 0xffff; /* convert to positive => (twos complement)++ */
    measure++;
  }
  else negative = 0;
 8002cda:	2200      	movpl	r2, #0

  /* clear undefined bits for DS18B20 != 12bit resolution */
  if(familycode == DS18B20_FAMILY_CODE || familycode == DS1822_FAMILY_CODE) {
 8002cdc:	2828      	cmp	r0, #40	; 0x28
 8002cde:	d001      	beq.n	8002ce4 <DS18X20_raw_to_decicelsius+0x30>
 8002ce0:	2822      	cmp	r0, #34	; 0x22
 8002ce2:	d110      	bne.n	8002d06 <DS18X20_raw_to_decicelsius+0x52>
    switch(sp[DS18B20_CONF_REG] & DS18B20_RES_MASK) {
 8002ce4:	7909      	ldrb	r1, [r1, #4]
 8002ce6:	f001 0160 	and.w	r1, r1, #96	; 0x60
 8002cea:	2920      	cmp	r1, #32
 8002cec:	d005      	beq.n	8002cfa <DS18X20_raw_to_decicelsius+0x46>
 8002cee:	2940      	cmp	r1, #64	; 0x40
 8002cf0:	d006      	beq.n	8002d00 <DS18X20_raw_to_decicelsius+0x4c>
 8002cf2:	b941      	cbnz	r1, 8002d06 <DS18X20_raw_to_decicelsius+0x52>
      case DS18B20_9_BIT:
        measure &= ~(DS18B20_9_BIT_UNDF);
 8002cf4:	f023 0307 	bic.w	r3, r3, #7
 8002cf8:	e004      	b.n	8002d04 <DS18X20_raw_to_decicelsius+0x50>
        break;
      case DS18B20_10_BIT:
        measure &= ~(DS18B20_10_BIT_UNDF);
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	e001      	b.n	8002d04 <DS18X20_raw_to_decicelsius+0x50>
        break;
      case DS18B20_11_BIT:
        measure &= ~(DS18B20_11_BIT_UNDF);
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	b29b      	uxth	r3, r3
        break;
      default: break; // 12 bit - all bits valid
    }
  }

  decicelsius = (measure >> 4);
 8002d06:	0918      	lsrs	r0, r3, #4
  decicelsius *= 10;
 8002d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2

  /* decicelsius += ((measure & 0x000F) * 640 + 512) / 1024; 625 / 1000 = 640 / 1024 */
  fract = (measure & 0x000F) * 640;
 8002d0c:	f003 030f 	and.w	r3, r3, #15
      default: break; // 12 bit - all bits valid
    }
  }

  decicelsius = (measure >> 4);
  decicelsius *= 10;
 8002d10:	0040      	lsls	r0, r0, #1

  /* decicelsius += ((measure & 0x000F) * 640 + 512) / 1024; 625 / 1000 = 640 / 1024 */
  fract = (measure & 0x000F) * 640;
 8002d12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      default: break; // 12 bit - all bits valid
    }
  }

  decicelsius = (measure >> 4);
  decicelsius *= 10;
 8002d16:	b280      	uxth	r0, r0

  /* decicelsius += ((measure & 0x000F) * 640 + 512) / 1024; 625 / 1000 = 640 / 1024 */
  fract = (measure & 0x000F) * 640;
 8002d18:	01db      	lsls	r3, r3, #7
  if(!negative) fract += 512;
 8002d1a:	b90a      	cbnz	r2, 8002d20 <DS18X20_raw_to_decicelsius+0x6c>
 8002d1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
  fract /= 1024;
  decicelsius += fract;
 8002d20:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 8002d24:	b280      	uxth	r0, r0

  if (negative) decicelsius = -decicelsius;
 8002d26:	b102      	cbz	r2, 8002d2a <DS18X20_raw_to_decicelsius+0x76>
 8002d28:	4240      	negs	r0, r0
 8002d2a:	b280      	uxth	r0, r0

  if (/* decicelsius == 850 || */ decicelsius < -550 || decicelsius > 1250) return DS18X20_INVALID_DECICELSIUS;
 8002d2c:	f200 2326 	addw	r3, r0, #550	; 0x226
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002d36:	bf88      	it	hi
 8002d38:	f44f 60fa 	movhi.w	r0, #2000	; 0x7d0
  else return decicelsius;
}
 8002d3c:	b200      	sxth	r0, r0
 8002d3e:	4770      	bx	lr

08002d40 <read_scratchpad>:
/* returns 1 if conversion is in progress, 0 if finished, not available when parasite powered. */
uint8_t DS18X20_conversion_in_progress(void) {
  return ow_bit(1) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad(uint8_t id[], uint8_t sp[], uint8_t n) {
 8002d40:	4603      	mov	r3, r0
 8002d42:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  uint8_t ret;

  ow_command( DS18X20_READ, id );
 8002d44:	20be      	movs	r0, #190	; 0xbe
/* returns 1 if conversion is in progress, 0 if finished, not available when parasite powered. */
uint8_t DS18X20_conversion_in_progress(void) {
  return ow_bit(1) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad(uint8_t id[], uint8_t sp[], uint8_t n) {
 8002d46:	460d      	mov	r5, r1
  uint8_t i;
  uint8_t ret;

  ow_command( DS18X20_READ, id );
 8002d48:	4619      	mov	r1, r3
/* returns 1 if conversion is in progress, 0 if finished, not available when parasite powered. */
uint8_t DS18X20_conversion_in_progress(void) {
  return ow_bit(1) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
}

static uint8_t read_scratchpad(uint8_t id[], uint8_t sp[], uint8_t n) {
 8002d4a:	4616      	mov	r6, r2
  uint8_t i;
  uint8_t ret;

  ow_command( DS18X20_READ, id );
 8002d4c:	f7ff fdc5 	bl	80028da <ow_command>
  for(i = 0; i < n; i++) sp[i] = ow_byte_rd();
 8002d50:	2400      	movs	r4, #0
 8002d52:	b2e3      	uxtb	r3, r4
 8002d54:	42b3      	cmp	r3, r6
 8002d56:	d204      	bcs.n	8002d62 <read_scratchpad+0x22>
 8002d58:	f7ff fd75 	bl	8002846 <ow_byte_rd>
 8002d5c:	5528      	strb	r0, [r5, r4]
 8002d5e:	3401      	adds	r4, #1
 8002d60:	e7f7      	b.n	8002d52 <read_scratchpad+0x12>

  if (crc8(&sp[0], DS18X20_SP_SIZE)) ret = DS18X20_ERROR_CRC;
 8002d62:	4628      	mov	r0, r5
 8002d64:	2109      	movs	r1, #9
 8002d66:	f000 f83b 	bl	8002de0 <crc8>
 8002d6a:	2800      	cmp	r0, #0
  else ret = DS18X20_OK;

  return ret;
}
 8002d6c:	bf14      	ite	ne
 8002d6e:	2003      	movne	r0, #3
 8002d70:	2000      	moveq	r0, #0
 8002d72:	bd70      	pop	{r4, r5, r6, pc}

08002d74 <DS18X20_find_sensor>:
 * find DS18X20 Sensors on 1-Wire-Bus
 * input/ouput: diff is the result of the last rom-search
 *              *diff = OW_SEARCH_FIRST for first call
 * output: id is the rom-code of the sensor found
 *******************************************************/
uint8_t DS18X20_find_sensor(uint8_t *diff, uint8_t id[]) {
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
  uint8_t ret;

  ret = DS18X20_OK;
  go = 1;
  do {
    *diff = ow_rom_search(*diff, &id[0]);
 8002d7a:	7820      	ldrb	r0, [r4, #0]
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f7ff fd65 	bl	800284c <ow_rom_search>
 8002d82:	7020      	strb	r0, [r4, #0]
    if(*diff == OW_ERR_PRESENCE || *diff == OW_ERR_DATA || *diff == OW_LAST_DEVICE) { 
 8002d84:	3801      	subs	r0, #1
 8002d86:	b2c0      	uxtb	r0, r0
 8002d88:	28fc      	cmp	r0, #252	; 0xfc
 8002d8a:	d807      	bhi.n	8002d9c <DS18X20_find_sensor+0x28>
      go  = 0;
      ret = DS18X20_ERROR;
    }
    else if(id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE) go = 0;
 8002d8c:	782b      	ldrb	r3, [r5, #0]
 8002d8e:	2b28      	cmp	r3, #40	; 0x28
 8002d90:	d006      	beq.n	8002da0 <DS18X20_find_sensor+0x2c>
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d004      	beq.n	8002da0 <DS18X20_find_sensor+0x2c>
 8002d96:	2b22      	cmp	r3, #34	; 0x22
 8002d98:	d1ef      	bne.n	8002d7a <DS18X20_find_sensor+0x6>
 8002d9a:	e001      	b.n	8002da0 <DS18X20_find_sensor+0x2c>
  go = 1;
  do {
    *diff = ow_rom_search(*diff, &id[0]);
    if(*diff == OW_ERR_PRESENCE || *diff == OW_ERR_DATA || *diff == OW_LAST_DEVICE) { 
      go  = 0;
      ret = DS18X20_ERROR;
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	bd38      	pop	{r3, r4, r5, pc}
 8002da0:	2000      	movs	r0, #0
    }
    else if(id[0] == DS18B20_FAMILY_CODE || id[0] == DS18S20_FAMILY_CODE || id[0] == DS1822_FAMILY_CODE) go = 0;
  } while(go);

  return ret;
}
 8002da2:	bd38      	pop	{r3, r4, r5, pc}

08002da4 <DS18X20_start_meas>:
  ow_reset();
  return (pstat) ? DS18X20_POWER_EXTERN : DS18X20_POWER_PARASITE;
}

/* start measurement (CONVERT_T) for all sensors if input id == NULL or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas(uint8_t with_power_extern, uint8_t id[]) {
 8002da4:	b510      	push	{r4, lr}
 8002da6:	460c      	mov	r4, r1
  ow_reset();
 8002da8:	f7ff fd18 	bl	80027dc <ow_reset>

  ow_command(DS18X20_CONVERT_T, id);
 8002dac:	2044      	movs	r0, #68	; 0x44
 8002dae:	4621      	mov	r1, r4
 8002db0:	f7ff fd93 	bl	80028da <ow_command>
  return DS18X20_OK;
}
 8002db4:	2000      	movs	r0, #0
 8002db6:	bd10      	pop	{r4, pc}

08002db8 <DS18X20_read_decicelsius>:
/********************************************************
 * reads temperature (scratchpad) of sensor with rom-code id
 * output: decicelsius 
 * returns DS18X20_OK on success
 *******************************************************/
uint8_t DS18X20_read_decicelsius(uint8_t id[], int16_t *decicelsius) {
 8002db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460e      	mov	r6, r1
  uint8_t sp[DS18X20_SP_SIZE];
  uint8_t ret;

  ow_reset();
 8002dbe:	f7ff fd0d 	bl	80027dc <ow_reset>
  ret = read_scratchpad(id, sp, DS18X20_SP_SIZE);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	a901      	add	r1, sp, #4
 8002dc6:	2209      	movs	r2, #9
 8002dc8:	f7ff ffba 	bl	8002d40 <read_scratchpad>
  if(ret == DS18X20_OK) *decicelsius = DS18X20_raw_to_decicelsius(id[0], sp);
 8002dcc:	4605      	mov	r5, r0
 8002dce:	b920      	cbnz	r0, 8002dda <DS18X20_read_decicelsius+0x22>
 8002dd0:	7820      	ldrb	r0, [r4, #0]
 8002dd2:	a901      	add	r1, sp, #4
 8002dd4:	f7ff ff6e 	bl	8002cb4 <DS18X20_raw_to_decicelsius>
 8002dd8:	8030      	strh	r0, [r6, #0]

  return ret;
}
 8002dda:	4628      	mov	r0, r5
 8002ddc:	b004      	add	sp, #16
 8002dde:	bd70      	pop	{r4, r5, r6, pc}

08002de0 <crc8>:
  uint16_t loop_count;
  uint8_t bit_counter;
  uint8_t data;
  uint8_t feedback_bit;

  for(loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
 8002de0:	2300      	movs	r3, #0
#include <inttypes.h>
#include <time.h>

#define CRC8POLY 0x18 // 0x18 = X ^ 8 + X ^ 5 + X ^ 4 + X ^ 0

uint8_t crc8(uint8_t *data_in, uint16_t number_of_bytes_to_read) {
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	4606      	mov	r6, r0
  uint8_t crc = 0x00;
 8002de6:	4618      	mov	r0, r3
  uint16_t loop_count;
  uint8_t bit_counter;
  uint8_t data;
  uint8_t feedback_bit;

  for(loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	428a      	cmp	r2, r1
 8002dec:	d015      	beq.n	8002e1a <crc8+0x3a>
    data = data_in[loop_count];
 8002dee:	5cf2      	ldrb	r2, [r6, r3]
 8002df0:	2408      	movs	r4, #8
    bit_counter = 8;
    do {
      feedback_bit = (crc ^ data) & 0x01;
 8002df2:	ea82 0500 	eor.w	r5, r2, r0
      if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
 8002df6:	f015 0501 	ands.w	r5, r5, #1
 8002dfa:	bf18      	it	ne
 8002dfc:	f080 0018 	eorne.w	r0, r0, #24
      crc = (crc >> 1) & 0x7F;
 8002e00:	0840      	lsrs	r0, r0, #1
      if ( feedback_bit == 0x01 ) crc = crc | 0x80;
 8002e02:	b115      	cbz	r5, 8002e0a <crc8+0x2a>
 8002e04:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8002e08:	b2c0      	uxtb	r0, r0
 8002e0a:	3c01      	subs	r4, #1
      data = data >> 1;
      bit_counter--;
    } while(bit_counter > 0);
 8002e0c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    do {
      feedback_bit = (crc ^ data) & 0x01;
      if ( feedback_bit == 0x01 ) crc = crc ^ CRC8POLY;
      crc = (crc >> 1) & 0x7F;
      if ( feedback_bit == 0x01 ) crc = crc | 0x80;
      data = data >> 1;
 8002e10:	ea4f 0252 	mov.w	r2, r2, lsr #1
      bit_counter--;
    } while(bit_counter > 0);
 8002e14:	d1ed      	bne.n	8002df2 <crc8+0x12>
 8002e16:	3301      	adds	r3, #1
 8002e18:	e7e6      	b.n	8002de8 <crc8+0x8>
  }

  return crc;
}
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}

08002e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e1c:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8002e5c <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e22:	f000 b804 	b.w	8002e2e <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8002e28:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e2a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e2c:	3104      	adds	r1, #4

08002e2e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8002e32:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e34:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e36:	f4ff aff6 	bcc.w	8002e26 <CopyDataInit>
  ldr  r2, =_sbss
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8002e3c:	f000 b803 	b.w	8002e46 <LoopFillZerobss>

08002e40 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e40:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e42:	f842 3b04 	str.w	r3, [r2], #4

08002e46 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8002e48:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e4a:	f4ff aff9 	bcc.w	8002e40 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e4e:	f7ff fa25 	bl	800229c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e52:	f000 f811 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e56:	f7ff fdb9 	bl	80029cc <main>
  bx  lr    
 8002e5a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e5c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002e60:	080060dc 	.word	0x080060dc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e68:	20000540 	.word	0x20000540
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002e6c:	20000540 	.word	0x20000540
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e70:	2000066c 	.word	0x2000066c

08002e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	f7ff bffe 	b.w	8002e74 <ADC_IRQHandler>

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <__libc_init_array+0x3c>)
 8002e7c:	4d0e      	ldr	r5, [pc, #56]	; (8002eb8 <__libc_init_array+0x40>)
 8002e7e:	1aed      	subs	r5, r5, r3
 8002e80:	10ad      	asrs	r5, r5, #2
 8002e82:	2400      	movs	r4, #0
 8002e84:	461e      	mov	r6, r3
 8002e86:	42ac      	cmp	r4, r5
 8002e88:	d004      	beq.n	8002e94 <__libc_init_array+0x1c>
 8002e8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002e8e:	4790      	blx	r2
 8002e90:	3401      	adds	r4, #1
 8002e92:	e7f8      	b.n	8002e86 <__libc_init_array+0xe>
 8002e94:	f002 ff1a 	bl	8005ccc <_init>
 8002e98:	4d08      	ldr	r5, [pc, #32]	; (8002ebc <__libc_init_array+0x44>)
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <__libc_init_array+0x48>)
 8002e9c:	1aed      	subs	r5, r5, r3
 8002e9e:	10ad      	asrs	r5, r5, #2
 8002ea0:	2400      	movs	r4, #0
 8002ea2:	461e      	mov	r6, r3
 8002ea4:	42ac      	cmp	r4, r5
 8002ea6:	d004      	beq.n	8002eb2 <__libc_init_array+0x3a>
 8002ea8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002eac:	4790      	blx	r2
 8002eae:	3401      	adds	r4, #1
 8002eb0:	e7f8      	b.n	8002ea4 <__libc_init_array+0x2c>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	080060d4 	.word	0x080060d4
 8002eb8:	080060d4 	.word	0x080060d4
 8002ebc:	080060d8 	.word	0x080060d8
 8002ec0:	080060d4 	.word	0x080060d4

08002ec4 <memset>:
 8002ec4:	4402      	add	r2, r0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d002      	beq.n	8002ed2 <memset+0xe>
 8002ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed0:	e7fa      	b.n	8002ec8 <memset+0x4>
 8002ed2:	4770      	bx	lr

08002ed4 <sprintf>:
 8002ed4:	b40e      	push	{r1, r2, r3}
 8002ed6:	b500      	push	{lr}
 8002ed8:	b09c      	sub	sp, #112	; 0x70
 8002eda:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002ede:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002ee2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ee6:	9104      	str	r1, [sp, #16]
 8002ee8:	9107      	str	r1, [sp, #28]
 8002eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002eee:	ab1d      	add	r3, sp, #116	; 0x74
 8002ef0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002ef4:	4908      	ldr	r1, [pc, #32]	; (8002f18 <sprintf+0x44>)
 8002ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002efa:	9002      	str	r0, [sp, #8]
 8002efc:	9006      	str	r0, [sp, #24]
 8002efe:	6808      	ldr	r0, [r1, #0]
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	a902      	add	r1, sp, #8
 8002f04:	f000 f81c 	bl	8002f40 <_svfprintf_r>
 8002f08:	9b02      	ldr	r3, [sp, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	b01c      	add	sp, #112	; 0x70
 8002f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f14:	b003      	add	sp, #12
 8002f16:	4770      	bx	lr
 8002f18:	200000f4 	.word	0x200000f4

08002f1c <strcpy>:
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f22:	f803 2b01 	strb.w	r2, [r3], #1
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d1f9      	bne.n	8002f1e <strcpy+0x2>
 8002f2a:	4770      	bx	lr

08002f2c <strlen>:
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d1fb      	bne.n	8002f2e <strlen+0x2>
 8002f36:	1a18      	subs	r0, r3, r0
 8002f38:	3801      	subs	r0, #1
 8002f3a:	4770      	bx	lr
 8002f3c:	0000      	movs	r0, r0
	...

08002f40 <_svfprintf_r>:
 8002f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f44:	b0bf      	sub	sp, #252	; 0xfc
 8002f46:	468b      	mov	fp, r1
 8002f48:	4698      	mov	r8, r3
 8002f4a:	9207      	str	r2, [sp, #28]
 8002f4c:	4682      	mov	sl, r0
 8002f4e:	f001 fddf 	bl	8004b10 <_localeconv_r>
 8002f52:	6800      	ldr	r0, [r0, #0]
 8002f54:	9014      	str	r0, [sp, #80]	; 0x50
 8002f56:	f7ff ffe9 	bl	8002f2c <strlen>
 8002f5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002f5e:	900c      	str	r0, [sp, #48]	; 0x30
 8002f60:	0619      	lsls	r1, r3, #24
 8002f62:	d515      	bpl.n	8002f90 <_svfprintf_r+0x50>
 8002f64:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002f68:	b993      	cbnz	r3, 8002f90 <_svfprintf_r+0x50>
 8002f6a:	4650      	mov	r0, sl
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	f001 fddb 	bl	8004b28 <_malloc_r>
 8002f72:	f8cb 0000 	str.w	r0, [fp]
 8002f76:	f8cb 0010 	str.w	r0, [fp, #16]
 8002f7a:	b930      	cbnz	r0, 8002f8a <_svfprintf_r+0x4a>
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	f8ca 3000 	str.w	r3, [sl]
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295
 8002f86:	f000 bf74 	b.w	8003e72 <_svfprintf_r+0xf32>
 8002f8a:	2340      	movs	r3, #64	; 0x40
 8002f8c:	f8cb 3014 	str.w	r3, [fp, #20]
 8002f90:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 8003200 <_svfprintf_r+0x2c0>
 8002f94:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	ae2e      	add	r6, sp, #184	; 0xb8
 8002f9c:	9621      	str	r6, [sp, #132]	; 0x84
 8002f9e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fa0:	9322      	str	r3, [sp, #136]	; 0x88
 8002fa2:	9305      	str	r3, [sp, #20]
 8002fa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8002fa6:	9316      	str	r3, [sp, #88]	; 0x58
 8002fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002faa:	9b07      	ldr	r3, [sp, #28]
 8002fac:	461c      	mov	r4, r3
 8002fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fb2:	b91a      	cbnz	r2, 8002fbc <_svfprintf_r+0x7c>
 8002fb4:	9807      	ldr	r0, [sp, #28]
 8002fb6:	1a25      	subs	r5, r4, r0
 8002fb8:	d103      	bne.n	8002fc2 <_svfprintf_r+0x82>
 8002fba:	e01b      	b.n	8002ff4 <_svfprintf_r+0xb4>
 8002fbc:	2a25      	cmp	r2, #37	; 0x25
 8002fbe:	d1f5      	bne.n	8002fac <_svfprintf_r+0x6c>
 8002fc0:	e7f8      	b.n	8002fb4 <_svfprintf_r+0x74>
 8002fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fc4:	9907      	ldr	r1, [sp, #28]
 8002fc6:	442b      	add	r3, r5
 8002fc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fcc:	3301      	adds	r3, #1
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	e886 0022 	stmia.w	r6, {r1, r5}
 8002fd4:	9322      	str	r3, [sp, #136]	; 0x88
 8002fd6:	dc01      	bgt.n	8002fdc <_svfprintf_r+0x9c>
 8002fd8:	3608      	adds	r6, #8
 8002fda:	e008      	b.n	8002fee <_svfprintf_r+0xae>
 8002fdc:	4650      	mov	r0, sl
 8002fde:	4659      	mov	r1, fp
 8002fe0:	aa21      	add	r2, sp, #132	; 0x84
 8002fe2:	f002 fae1 	bl	80055a8 <__ssprint_r>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	f040 873b 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8002fec:	ae2e      	add	r6, sp, #184	; 0xb8
 8002fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ff0:	442a      	add	r2, r5
 8002ff2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002ff4:	7823      	ldrb	r3, [r4, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 872c 	beq.w	8003e54 <_svfprintf_r+0xf14>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	3401      	adds	r4, #1
 8003000:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003004:	f04f 39ff 	mov.w	r9, #4294967295
 8003008:	930a      	str	r3, [sp, #40]	; 0x28
 800300a:	461f      	mov	r7, r3
 800300c:	1c65      	adds	r5, r4, #1
 800300e:	7824      	ldrb	r4, [r4, #0]
 8003010:	9507      	str	r5, [sp, #28]
 8003012:	9404      	str	r4, [sp, #16]
 8003014:	9c04      	ldr	r4, [sp, #16]
 8003016:	f1a4 0220 	sub.w	r2, r4, #32
 800301a:	2a58      	cmp	r2, #88	; 0x58
 800301c:	f200 838b 	bhi.w	8003736 <_svfprintf_r+0x7f6>
 8003020:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003024:	0389006d 	.word	0x0389006d
 8003028:	00710389 	.word	0x00710389
 800302c:	03890389 	.word	0x03890389
 8003030:	03890389 	.word	0x03890389
 8003034:	03890389 	.word	0x03890389
 8003038:	0059005b 	.word	0x0059005b
 800303c:	00770389 	.word	0x00770389
 8003040:	0389007a 	.word	0x0389007a
 8003044:	00a300a0 	.word	0x00a300a0
 8003048:	00a300a3 	.word	0x00a300a3
 800304c:	00a300a3 	.word	0x00a300a3
 8003050:	00a300a3 	.word	0x00a300a3
 8003054:	00a300a3 	.word	0x00a300a3
 8003058:	03890389 	.word	0x03890389
 800305c:	03890389 	.word	0x03890389
 8003060:	03890389 	.word	0x03890389
 8003064:	03890389 	.word	0x03890389
 8003068:	03890389 	.word	0x03890389
 800306c:	010800d4 	.word	0x010800d4
 8003070:	01080389 	.word	0x01080389
 8003074:	03890389 	.word	0x03890389
 8003078:	03890389 	.word	0x03890389
 800307c:	038900b7 	.word	0x038900b7
 8003080:	02680389 	.word	0x02680389
 8003084:	03890389 	.word	0x03890389
 8003088:	03890389 	.word	0x03890389
 800308c:	02c10389 	.word	0x02c10389
 8003090:	03890389 	.word	0x03890389
 8003094:	03890068 	.word	0x03890068
 8003098:	03890389 	.word	0x03890389
 800309c:	03890389 	.word	0x03890389
 80030a0:	03890389 	.word	0x03890389
 80030a4:	03890389 	.word	0x03890389
 80030a8:	00ca0389 	.word	0x00ca0389
 80030ac:	01080065 	.word	0x01080065
 80030b0:	01080108 	.word	0x01080108
 80030b4:	006500ba 	.word	0x006500ba
 80030b8:	03890389 	.word	0x03890389
 80030bc:	038900bd 	.word	0x038900bd
 80030c0:	026a0249 	.word	0x026a0249
 80030c4:	00c70292 	.word	0x00c70292
 80030c8:	02a40389 	.word	0x02a40389
 80030cc:	02c30389 	.word	0x02c30389
 80030d0:	03890389 	.word	0x03890389
 80030d4:	02de      	.short	0x02de
 80030d6:	232b      	movs	r3, #43	; 0x2b
 80030d8:	e007      	b.n	80030ea <_svfprintf_r+0x1aa>
 80030da:	f8d8 5000 	ldr.w	r5, [r8]
 80030de:	950a      	str	r5, [sp, #40]	; 0x28
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	f108 0204 	add.w	r2, r8, #4
 80030e6:	db11      	blt.n	800310c <_svfprintf_r+0x1cc>
 80030e8:	4690      	mov	r8, r2
 80030ea:	9c07      	ldr	r4, [sp, #28]
 80030ec:	e78e      	b.n	800300c <_svfprintf_r+0xcc>
 80030ee:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80030f2:	e06f      	b.n	80031d4 <_svfprintf_r+0x294>
 80030f4:	4c44      	ldr	r4, [pc, #272]	; (8003208 <_svfprintf_r+0x2c8>)
 80030f6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80030fa:	9417      	str	r4, [sp, #92]	; 0x5c
 80030fc:	e274      	b.n	80035e8 <_svfprintf_r+0x6a8>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf08      	it	eq
 8003102:	2320      	moveq	r3, #32
 8003104:	e7f1      	b.n	80030ea <_svfprintf_r+0x1aa>
 8003106:	f047 0701 	orr.w	r7, r7, #1
 800310a:	e7ee      	b.n	80030ea <_svfprintf_r+0x1aa>
 800310c:	426d      	negs	r5, r5
 800310e:	950a      	str	r5, [sp, #40]	; 0x28
 8003110:	4690      	mov	r8, r2
 8003112:	f047 0704 	orr.w	r7, r7, #4
 8003116:	e7e8      	b.n	80030ea <_svfprintf_r+0x1aa>
 8003118:	9c07      	ldr	r4, [sp, #28]
 800311a:	7825      	ldrb	r5, [r4, #0]
 800311c:	9504      	str	r5, [sp, #16]
 800311e:	2d2a      	cmp	r5, #42	; 0x2a
 8003120:	f104 0201 	add.w	r2, r4, #1
 8003124:	d002      	beq.n	800312c <_svfprintf_r+0x1ec>
 8003126:	f04f 0900 	mov.w	r9, #0
 800312a:	e00b      	b.n	8003144 <_svfprintf_r+0x204>
 800312c:	f8d8 9000 	ldr.w	r9, [r8]
 8003130:	9207      	str	r2, [sp, #28]
 8003132:	f108 0104 	add.w	r1, r8, #4
 8003136:	f1b9 0f00 	cmp.w	r9, #0
 800313a:	4688      	mov	r8, r1
 800313c:	dad5      	bge.n	80030ea <_svfprintf_r+0x1aa>
 800313e:	f04f 39ff 	mov.w	r9, #4294967295
 8003142:	e7d2      	b.n	80030ea <_svfprintf_r+0x1aa>
 8003144:	9d04      	ldr	r5, [sp, #16]
 8003146:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800314a:	2909      	cmp	r1, #9
 800314c:	d806      	bhi.n	800315c <_svfprintf_r+0x21c>
 800314e:	200a      	movs	r0, #10
 8003150:	f812 4b01 	ldrb.w	r4, [r2], #1
 8003154:	9404      	str	r4, [sp, #16]
 8003156:	fb00 1909 	mla	r9, r0, r9, r1
 800315a:	e7f3      	b.n	8003144 <_svfprintf_r+0x204>
 800315c:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003160:	9207      	str	r2, [sp, #28]
 8003162:	e757      	b.n	8003014 <_svfprintf_r+0xd4>
 8003164:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8003168:	e7bf      	b.n	80030ea <_svfprintf_r+0x1aa>
 800316a:	2400      	movs	r4, #0
 800316c:	940a      	str	r4, [sp, #40]	; 0x28
 800316e:	9d04      	ldr	r5, [sp, #16]
 8003170:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003172:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8003176:	210a      	movs	r1, #10
 8003178:	fb01 2404 	mla	r4, r1, r4, r2
 800317c:	9a07      	ldr	r2, [sp, #28]
 800317e:	940a      	str	r4, [sp, #40]	; 0x28
 8003180:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003184:	9504      	str	r5, [sp, #16]
 8003186:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 800318a:	2909      	cmp	r1, #9
 800318c:	d8e8      	bhi.n	8003160 <_svfprintf_r+0x220>
 800318e:	9207      	str	r2, [sp, #28]
 8003190:	e7ed      	b.n	800316e <_svfprintf_r+0x22e>
 8003192:	f047 0708 	orr.w	r7, r7, #8
 8003196:	e7a8      	b.n	80030ea <_svfprintf_r+0x1aa>
 8003198:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800319c:	e7a5      	b.n	80030ea <_svfprintf_r+0x1aa>
 800319e:	9c07      	ldr	r4, [sp, #28]
 80031a0:	7822      	ldrb	r2, [r4, #0]
 80031a2:	2a6c      	cmp	r2, #108	; 0x6c
 80031a4:	d102      	bne.n	80031ac <_svfprintf_r+0x26c>
 80031a6:	3401      	adds	r4, #1
 80031a8:	9407      	str	r4, [sp, #28]
 80031aa:	e002      	b.n	80031b2 <_svfprintf_r+0x272>
 80031ac:	f047 0710 	orr.w	r7, r7, #16
 80031b0:	e79b      	b.n	80030ea <_svfprintf_r+0x1aa>
 80031b2:	f047 0720 	orr.w	r7, r7, #32
 80031b6:	e798      	b.n	80030ea <_svfprintf_r+0x1aa>
 80031b8:	f8d8 3000 	ldr.w	r3, [r8]
 80031bc:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80031c0:	2500      	movs	r5, #0
 80031c2:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 80031c6:	f108 0804 	add.w	r8, r8, #4
 80031ca:	e2bf      	b.n	800374c <_svfprintf_r+0x80c>
 80031cc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80031d0:	f047 0710 	orr.w	r7, r7, #16
 80031d4:	06ba      	lsls	r2, r7, #26
 80031d6:	d508      	bpl.n	80031ea <_svfprintf_r+0x2aa>
 80031d8:	f108 0807 	add.w	r8, r8, #7
 80031dc:	f028 0307 	bic.w	r3, r8, #7
 80031e0:	f103 0808 	add.w	r8, r3, #8
 80031e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031e8:	e018      	b.n	800321c <_svfprintf_r+0x2dc>
 80031ea:	f017 0f10 	tst.w	r7, #16
 80031ee:	f108 0304 	add.w	r3, r8, #4
 80031f2:	d00b      	beq.n	800320c <_svfprintf_r+0x2cc>
 80031f4:	f8d8 4000 	ldr.w	r4, [r8]
 80031f8:	e00e      	b.n	8003218 <_svfprintf_r+0x2d8>
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
	...
 8003208:	08005f84 	.word	0x08005f84
 800320c:	f8d8 4000 	ldr.w	r4, [r8]
 8003210:	f017 0f40 	tst.w	r7, #64	; 0x40
 8003214:	bf18      	it	ne
 8003216:	b224      	sxthne	r4, r4
 8003218:	17e5      	asrs	r5, r4, #31
 800321a:	4698      	mov	r8, r3
 800321c:	2c00      	cmp	r4, #0
 800321e:	f175 0100 	sbcs.w	r1, r5, #0
 8003222:	f280 820c 	bge.w	800363e <_svfprintf_r+0x6fe>
 8003226:	232d      	movs	r3, #45	; 0x2d
 8003228:	4264      	negs	r4, r4
 800322a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800322e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003232:	e204      	b.n	800363e <_svfprintf_r+0x6fe>
 8003234:	9c04      	ldr	r4, [sp, #16]
 8003236:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800323a:	f108 0807 	add.w	r8, r8, #7
 800323e:	f028 0307 	bic.w	r3, r8, #7
 8003242:	9706      	str	r7, [sp, #24]
 8003244:	940d      	str	r4, [sp, #52]	; 0x34
 8003246:	ed93 7b00 	vldr	d7, [r3]
 800324a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800324e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003252:	f103 0808 	add.w	r8, r3, #8
 8003256:	f002 f973 	bl	8005540 <__fpclassifyd>
 800325a:	2801      	cmp	r0, #1
 800325c:	d116      	bne.n	800328c <_svfprintf_r+0x34c>
 800325e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003262:	2200      	movs	r2, #0
 8003264:	2300      	movs	r3, #0
 8003266:	f7fd fbf9 	bl	8000a5c <__aeabi_dcmplt>
 800326a:	b110      	cbz	r0, 8003272 <_svfprintf_r+0x332>
 800326c:	232d      	movs	r3, #45	; 0x2d
 800326e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003272:	4ba8      	ldr	r3, [pc, #672]	; (8003514 <_svfprintf_r+0x5d4>)
 8003274:	4aa8      	ldr	r2, [pc, #672]	; (8003518 <_svfprintf_r+0x5d8>)
 8003276:	9c04      	ldr	r4, [sp, #16]
 8003278:	2c47      	cmp	r4, #71	; 0x47
 800327a:	bfd8      	it	le
 800327c:	461a      	movle	r2, r3
 800327e:	9203      	str	r2, [sp, #12]
 8003280:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8003284:	f04f 0903 	mov.w	r9, #3
 8003288:	2500      	movs	r5, #0
 800328a:	e266      	b.n	800375a <_svfprintf_r+0x81a>
 800328c:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003290:	f002 f956 	bl	8005540 <__fpclassifyd>
 8003294:	b958      	cbnz	r0, 80032ae <_svfprintf_r+0x36e>
 8003296:	4ba1      	ldr	r3, [pc, #644]	; (800351c <_svfprintf_r+0x5dc>)
 8003298:	4aa1      	ldr	r2, [pc, #644]	; (8003520 <_svfprintf_r+0x5e0>)
 800329a:	9d04      	ldr	r5, [sp, #16]
 800329c:	2d47      	cmp	r5, #71	; 0x47
 800329e:	bfd8      	it	le
 80032a0:	461a      	movle	r2, r3
 80032a2:	9203      	str	r2, [sp, #12]
 80032a4:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 80032a8:	f04f 0903 	mov.w	r9, #3
 80032ac:	e254      	b.n	8003758 <_svfprintf_r+0x818>
 80032ae:	f1b9 3fff 	cmp.w	r9, #4294967295
 80032b2:	d00a      	beq.n	80032ca <_svfprintf_r+0x38a>
 80032b4:	9c04      	ldr	r4, [sp, #16]
 80032b6:	f024 0320 	bic.w	r3, r4, #32
 80032ba:	2b47      	cmp	r3, #71	; 0x47
 80032bc:	d107      	bne.n	80032ce <_svfprintf_r+0x38e>
 80032be:	f1b9 0f00 	cmp.w	r9, #0
 80032c2:	bf08      	it	eq
 80032c4:	f04f 0901 	moveq.w	r9, #1
 80032c8:	e001      	b.n	80032ce <_svfprintf_r+0x38e>
 80032ca:	f04f 0906 	mov.w	r9, #6
 80032ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80032d8:	da07      	bge.n	80032ea <_svfprintf_r+0x3aa>
 80032da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032dc:	9d08      	ldr	r5, [sp, #32]
 80032de:	950e      	str	r5, [sp, #56]	; 0x38
 80032e0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80032e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80032e6:	242d      	movs	r4, #45	; 0x2d
 80032e8:	e004      	b.n	80032f4 <_svfprintf_r+0x3b4>
 80032ea:	ed9d 7b08 	vldr	d7, [sp, #32]
 80032ee:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80032f2:	2400      	movs	r4, #0
 80032f4:	9d04      	ldr	r5, [sp, #16]
 80032f6:	9415      	str	r4, [sp, #84]	; 0x54
 80032f8:	f025 0420 	bic.w	r4, r5, #32
 80032fc:	2c46      	cmp	r4, #70	; 0x46
 80032fe:	d004      	beq.n	800330a <_svfprintf_r+0x3ca>
 8003300:	2c45      	cmp	r4, #69	; 0x45
 8003302:	d105      	bne.n	8003310 <_svfprintf_r+0x3d0>
 8003304:	f109 0501 	add.w	r5, r9, #1
 8003308:	e003      	b.n	8003312 <_svfprintf_r+0x3d2>
 800330a:	464d      	mov	r5, r9
 800330c:	2103      	movs	r1, #3
 800330e:	e001      	b.n	8003314 <_svfprintf_r+0x3d4>
 8003310:	464d      	mov	r5, r9
 8003312:	2102      	movs	r1, #2
 8003314:	ab1c      	add	r3, sp, #112	; 0x70
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	ab1f      	add	r3, sp, #124	; 0x7c
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	4650      	mov	r0, sl
 800331e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003322:	462a      	mov	r2, r5
 8003324:	ab1b      	add	r3, sp, #108	; 0x6c
 8003326:	f000 fe3b 	bl	8003fa0 <_dtoa_r>
 800332a:	2c47      	cmp	r4, #71	; 0x47
 800332c:	9003      	str	r0, [sp, #12]
 800332e:	d10a      	bne.n	8003346 <_svfprintf_r+0x406>
 8003330:	9806      	ldr	r0, [sp, #24]
 8003332:	07c3      	lsls	r3, r0, #31
 8003334:	d407      	bmi.n	8003346 <_svfprintf_r+0x406>
 8003336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003338:	9d03      	ldr	r5, [sp, #12]
 800333a:	2c47      	cmp	r4, #71	; 0x47
 800333c:	ebc5 0303 	rsb	r3, r5, r3
 8003340:	9305      	str	r3, [sp, #20]
 8003342:	d137      	bne.n	80033b4 <_svfprintf_r+0x474>
 8003344:	e02d      	b.n	80033a2 <_svfprintf_r+0x462>
 8003346:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800334a:	2c46      	cmp	r4, #70	; 0x46
 800334c:	44ac      	add	ip, r5
 800334e:	d113      	bne.n	8003378 <_svfprintf_r+0x438>
 8003350:	9803      	ldr	r0, [sp, #12]
 8003352:	7803      	ldrb	r3, [r0, #0]
 8003354:	2b30      	cmp	r3, #48	; 0x30
 8003356:	d10d      	bne.n	8003374 <_svfprintf_r+0x434>
 8003358:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800335c:	2200      	movs	r2, #0
 800335e:	2300      	movs	r3, #0
 8003360:	f8cd c008 	str.w	ip, [sp, #8]
 8003364:	f7fd fb70 	bl	8000a48 <__aeabi_dcmpeq>
 8003368:	f8dd c008 	ldr.w	ip, [sp, #8]
 800336c:	b910      	cbnz	r0, 8003374 <_svfprintf_r+0x434>
 800336e:	f1c5 0501 	rsb	r5, r5, #1
 8003372:	951b      	str	r5, [sp, #108]	; 0x6c
 8003374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003376:	449c      	add	ip, r3
 8003378:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800337c:	2200      	movs	r2, #0
 800337e:	2300      	movs	r3, #0
 8003380:	f8cd c008 	str.w	ip, [sp, #8]
 8003384:	f7fd fb60 	bl	8000a48 <__aeabi_dcmpeq>
 8003388:	f8dd c008 	ldr.w	ip, [sp, #8]
 800338c:	b108      	cbz	r0, 8003392 <_svfprintf_r+0x452>
 800338e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8003392:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003394:	4563      	cmp	r3, ip
 8003396:	d2ce      	bcs.n	8003336 <_svfprintf_r+0x3f6>
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	921f      	str	r2, [sp, #124]	; 0x7c
 800339c:	2230      	movs	r2, #48	; 0x30
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e7f7      	b.n	8003392 <_svfprintf_r+0x452>
 80033a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80033a4:	1cdc      	adds	r4, r3, #3
 80033a6:	db01      	blt.n	80033ac <_svfprintf_r+0x46c>
 80033a8:	454b      	cmp	r3, r9
 80033aa:	dd62      	ble.n	8003472 <_svfprintf_r+0x532>
 80033ac:	9c04      	ldr	r4, [sp, #16]
 80033ae:	3c02      	subs	r4, #2
 80033b0:	9404      	str	r4, [sp, #16]
 80033b2:	e002      	b.n	80033ba <_svfprintf_r+0x47a>
 80033b4:	9d04      	ldr	r5, [sp, #16]
 80033b6:	2d65      	cmp	r5, #101	; 0x65
 80033b8:	dc42      	bgt.n	8003440 <_svfprintf_r+0x500>
 80033ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80033bc:	9c04      	ldr	r4, [sp, #16]
 80033be:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
 80033c2:	3b01      	subs	r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80033c8:	bfba      	itte	lt
 80033ca:	425b      	neglt	r3, r3
 80033cc:	222d      	movlt	r2, #45	; 0x2d
 80033ce:	222b      	movge	r2, #43	; 0x2b
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80033d6:	dd1c      	ble.n	8003412 <_svfprintf_r+0x4d2>
 80033d8:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 80033dc:	200a      	movs	r0, #10
 80033de:	fb93 f1f0 	sdiv	r1, r3, r0
 80033e2:	fb00 3311 	mls	r3, r0, r1, r3
 80033e6:	3330      	adds	r3, #48	; 0x30
 80033e8:	2909      	cmp	r1, #9
 80033ea:	4614      	mov	r4, r2
 80033ec:	f802 3901 	strb.w	r3, [r2], #-1
 80033f0:	460b      	mov	r3, r1
 80033f2:	dcf3      	bgt.n	80033dc <_svfprintf_r+0x49c>
 80033f4:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80033f8:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80033fc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8003400:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8003404:	4294      	cmp	r4, r2
 8003406:	d20b      	bcs.n	8003420 <_svfprintf_r+0x4e0>
 8003408:	f814 2b01 	ldrb.w	r2, [r4], #1
 800340c:	f803 2b01 	strb.w	r2, [r3], #1
 8003410:	e7f6      	b.n	8003400 <_svfprintf_r+0x4c0>
 8003412:	2230      	movs	r2, #48	; 0x30
 8003414:	4413      	add	r3, r2
 8003416:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800341a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800341e:	ab1e      	add	r3, sp, #120	; 0x78
 8003420:	9d05      	ldr	r5, [sp, #20]
 8003422:	aa1d      	add	r2, sp, #116	; 0x74
 8003424:	1a9a      	subs	r2, r3, r2
 8003426:	4691      	mov	r9, r2
 8003428:	2d01      	cmp	r5, #1
 800342a:	9216      	str	r2, [sp, #88]	; 0x58
 800342c:	44a9      	add	r9, r5
 800342e:	dc03      	bgt.n	8003438 <_svfprintf_r+0x4f8>
 8003430:	9d06      	ldr	r5, [sp, #24]
 8003432:	f015 0401 	ands.w	r4, r5, #1
 8003436:	d037      	beq.n	80034a8 <_svfprintf_r+0x568>
 8003438:	f109 0901 	add.w	r9, r9, #1
 800343c:	2400      	movs	r4, #0
 800343e:	e033      	b.n	80034a8 <_svfprintf_r+0x568>
 8003440:	9c04      	ldr	r4, [sp, #16]
 8003442:	2c66      	cmp	r4, #102	; 0x66
 8003444:	d115      	bne.n	8003472 <_svfprintf_r+0x532>
 8003446:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003448:	2b00      	cmp	r3, #0
 800344a:	dd09      	ble.n	8003460 <_svfprintf_r+0x520>
 800344c:	f1b9 0f00 	cmp.w	r9, #0
 8003450:	d102      	bne.n	8003458 <_svfprintf_r+0x518>
 8003452:	9d06      	ldr	r5, [sp, #24]
 8003454:	07e8      	lsls	r0, r5, #31
 8003456:	d523      	bpl.n	80034a0 <_svfprintf_r+0x560>
 8003458:	f109 0901 	add.w	r9, r9, #1
 800345c:	444b      	add	r3, r9
 800345e:	e01f      	b.n	80034a0 <_svfprintf_r+0x560>
 8003460:	f1b9 0f00 	cmp.w	r9, #0
 8003464:	d102      	bne.n	800346c <_svfprintf_r+0x52c>
 8003466:	9c06      	ldr	r4, [sp, #24]
 8003468:	07e1      	lsls	r1, r4, #31
 800346a:	d515      	bpl.n	8003498 <_svfprintf_r+0x558>
 800346c:	f109 0302 	add.w	r3, r9, #2
 8003470:	e016      	b.n	80034a0 <_svfprintf_r+0x560>
 8003472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003474:	9d05      	ldr	r5, [sp, #20]
 8003476:	42ab      	cmp	r3, r5
 8003478:	db04      	blt.n	8003484 <_svfprintf_r+0x544>
 800347a:	9c06      	ldr	r4, [sp, #24]
 800347c:	07e2      	lsls	r2, r4, #31
 800347e:	d50d      	bpl.n	800349c <_svfprintf_r+0x55c>
 8003480:	3301      	adds	r3, #1
 8003482:	e006      	b.n	8003492 <_svfprintf_r+0x552>
 8003484:	2b00      	cmp	r3, #0
 8003486:	9c05      	ldr	r4, [sp, #20]
 8003488:	bfd4      	ite	le
 800348a:	f1c3 0302 	rsble	r3, r3, #2
 800348e:	2301      	movgt	r3, #1
 8003490:	4423      	add	r3, r4
 8003492:	2567      	movs	r5, #103	; 0x67
 8003494:	950d      	str	r5, [sp, #52]	; 0x34
 8003496:	e003      	b.n	80034a0 <_svfprintf_r+0x560>
 8003498:	2301      	movs	r3, #1
 800349a:	e001      	b.n	80034a0 <_svfprintf_r+0x560>
 800349c:	2467      	movs	r4, #103	; 0x67
 800349e:	940d      	str	r4, [sp, #52]	; 0x34
 80034a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80034a2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80034a4:	9504      	str	r5, [sp, #16]
 80034a6:	4699      	mov	r9, r3
 80034a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80034aa:	b115      	cbz	r5, 80034b2 <_svfprintf_r+0x572>
 80034ac:	232d      	movs	r3, #45	; 0x2d
 80034ae:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80034b2:	2500      	movs	r5, #0
 80034b4:	e152      	b.n	800375c <_svfprintf_r+0x81c>
 80034b6:	f017 0f20 	tst.w	r7, #32
 80034ba:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80034be:	f108 0104 	add.w	r1, r8, #4
 80034c2:	d008      	beq.n	80034d6 <_svfprintf_r+0x596>
 80034c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80034c6:	f8d8 0000 	ldr.w	r0, [r8]
 80034ca:	17e5      	asrs	r5, r4, #31
 80034cc:	4622      	mov	r2, r4
 80034ce:	462b      	mov	r3, r5
 80034d0:	e9c0 2300 	strd	r2, r3, [r0]
 80034d4:	e00c      	b.n	80034f0 <_svfprintf_r+0x5b0>
 80034d6:	06fb      	lsls	r3, r7, #27
 80034d8:	d406      	bmi.n	80034e8 <_svfprintf_r+0x5a8>
 80034da:	067d      	lsls	r5, r7, #25
 80034dc:	d504      	bpl.n	80034e8 <_svfprintf_r+0x5a8>
 80034de:	f8d8 3000 	ldr.w	r3, [r8]
 80034e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80034e4:	801c      	strh	r4, [r3, #0]
 80034e6:	e003      	b.n	80034f0 <_svfprintf_r+0x5b0>
 80034e8:	f8d8 3000 	ldr.w	r3, [r8]
 80034ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80034ee:	601d      	str	r5, [r3, #0]
 80034f0:	4688      	mov	r8, r1
 80034f2:	e55a      	b.n	8002faa <_svfprintf_r+0x6a>
 80034f4:	f047 0710 	orr.w	r7, r7, #16
 80034f8:	f017 0320 	ands.w	r3, r7, #32
 80034fc:	d012      	beq.n	8003524 <_svfprintf_r+0x5e4>
 80034fe:	f108 0807 	add.w	r8, r8, #7
 8003502:	f028 0307 	bic.w	r3, r8, #7
 8003506:	e9d3 4500 	ldrd	r4, r5, [r3]
 800350a:	f103 0808 	add.w	r8, r3, #8
 800350e:	2300      	movs	r3, #0
 8003510:	e091      	b.n	8003636 <_svfprintf_r+0x6f6>
 8003512:	bf00      	nop
 8003514:	08005f74 	.word	0x08005f74
 8003518:	08005f78 	.word	0x08005f78
 800351c:	08005f7c 	.word	0x08005f7c
 8003520:	08005f80 	.word	0x08005f80
 8003524:	f017 0110 	ands.w	r1, r7, #16
 8003528:	f108 0204 	add.w	r2, r8, #4
 800352c:	d107      	bne.n	800353e <_svfprintf_r+0x5fe>
 800352e:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8003532:	d004      	beq.n	800353e <_svfprintf_r+0x5fe>
 8003534:	f8b8 4000 	ldrh.w	r4, [r8]
 8003538:	2500      	movs	r5, #0
 800353a:	4690      	mov	r8, r2
 800353c:	e7e7      	b.n	800350e <_svfprintf_r+0x5ce>
 800353e:	f8d8 4000 	ldr.w	r4, [r8]
 8003542:	2500      	movs	r5, #0
 8003544:	4690      	mov	r8, r2
 8003546:	e076      	b.n	8003636 <_svfprintf_r+0x6f6>
 8003548:	2330      	movs	r3, #48	; 0x30
 800354a:	2278      	movs	r2, #120	; 0x78
 800354c:	48a8      	ldr	r0, [pc, #672]	; (80037f0 <_svfprintf_r+0x8b0>)
 800354e:	f8d8 4000 	ldr.w	r4, [r8]
 8003552:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003556:	2500      	movs	r5, #0
 8003558:	f047 0702 	orr.w	r7, r7, #2
 800355c:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8003560:	f108 0804 	add.w	r8, r8, #4
 8003564:	9017      	str	r0, [sp, #92]	; 0x5c
 8003566:	2302      	movs	r3, #2
 8003568:	9204      	str	r2, [sp, #16]
 800356a:	e064      	b.n	8003636 <_svfprintf_r+0x6f6>
 800356c:	4643      	mov	r3, r8
 800356e:	2500      	movs	r5, #0
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9303      	str	r3, [sp, #12]
 8003574:	45a9      	cmp	r9, r5
 8003576:	f108 0804 	add.w	r8, r8, #4
 800357a:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 800357e:	db0d      	blt.n	800359c <_svfprintf_r+0x65c>
 8003580:	4618      	mov	r0, r3
 8003582:	4629      	mov	r1, r5
 8003584:	464a      	mov	r2, r9
 8003586:	f001 fce1 	bl	8004f4c <memchr>
 800358a:	2800      	cmp	r0, #0
 800358c:	f000 80e4 	beq.w	8003758 <_svfprintf_r+0x818>
 8003590:	9c03      	ldr	r4, [sp, #12]
 8003592:	1b00      	subs	r0, r0, r4
 8003594:	4548      	cmp	r0, r9
 8003596:	bfb8      	it	lt
 8003598:	4681      	movlt	r9, r0
 800359a:	e0de      	b.n	800375a <_svfprintf_r+0x81a>
 800359c:	9803      	ldr	r0, [sp, #12]
 800359e:	f7ff fcc5 	bl	8002f2c <strlen>
 80035a2:	4681      	mov	r9, r0
 80035a4:	e0d9      	b.n	800375a <_svfprintf_r+0x81a>
 80035a6:	f047 0710 	orr.w	r7, r7, #16
 80035aa:	06bc      	lsls	r4, r7, #26
 80035ac:	d508      	bpl.n	80035c0 <_svfprintf_r+0x680>
 80035ae:	f108 0807 	add.w	r8, r8, #7
 80035b2:	f028 0307 	bic.w	r3, r8, #7
 80035b6:	f103 0808 	add.w	r8, r3, #8
 80035ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035be:	e00d      	b.n	80035dc <_svfprintf_r+0x69c>
 80035c0:	f017 0f10 	tst.w	r7, #16
 80035c4:	f108 0304 	add.w	r3, r8, #4
 80035c8:	d104      	bne.n	80035d4 <_svfprintf_r+0x694>
 80035ca:	0678      	lsls	r0, r7, #25
 80035cc:	d502      	bpl.n	80035d4 <_svfprintf_r+0x694>
 80035ce:	f8b8 4000 	ldrh.w	r4, [r8]
 80035d2:	e001      	b.n	80035d8 <_svfprintf_r+0x698>
 80035d4:	f8d8 4000 	ldr.w	r4, [r8]
 80035d8:	2500      	movs	r5, #0
 80035da:	4698      	mov	r8, r3
 80035dc:	2301      	movs	r3, #1
 80035de:	e02a      	b.n	8003636 <_svfprintf_r+0x6f6>
 80035e0:	4d83      	ldr	r5, [pc, #524]	; (80037f0 <_svfprintf_r+0x8b0>)
 80035e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80035e6:	9517      	str	r5, [sp, #92]	; 0x5c
 80035e8:	06b9      	lsls	r1, r7, #26
 80035ea:	d508      	bpl.n	80035fe <_svfprintf_r+0x6be>
 80035ec:	f108 0807 	add.w	r8, r8, #7
 80035f0:	f028 0307 	bic.w	r3, r8, #7
 80035f4:	f103 0808 	add.w	r8, r3, #8
 80035f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80035fc:	e00d      	b.n	800361a <_svfprintf_r+0x6da>
 80035fe:	f017 0f10 	tst.w	r7, #16
 8003602:	f108 0304 	add.w	r3, r8, #4
 8003606:	d104      	bne.n	8003612 <_svfprintf_r+0x6d2>
 8003608:	067a      	lsls	r2, r7, #25
 800360a:	d502      	bpl.n	8003612 <_svfprintf_r+0x6d2>
 800360c:	f8b8 4000 	ldrh.w	r4, [r8]
 8003610:	e001      	b.n	8003616 <_svfprintf_r+0x6d6>
 8003612:	f8d8 4000 	ldr.w	r4, [r8]
 8003616:	2500      	movs	r5, #0
 8003618:	4698      	mov	r8, r3
 800361a:	07fb      	lsls	r3, r7, #31
 800361c:	d50a      	bpl.n	8003634 <_svfprintf_r+0x6f4>
 800361e:	ea54 0005 	orrs.w	r0, r4, r5
 8003622:	d007      	beq.n	8003634 <_svfprintf_r+0x6f4>
 8003624:	2330      	movs	r3, #48	; 0x30
 8003626:	9904      	ldr	r1, [sp, #16]
 8003628:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800362c:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 8003630:	f047 0702 	orr.w	r7, r7, #2
 8003634:	2302      	movs	r3, #2
 8003636:	2200      	movs	r2, #0
 8003638:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800363c:	e000      	b.n	8003640 <_svfprintf_r+0x700>
 800363e:	2301      	movs	r3, #1
 8003640:	f1b9 0f00 	cmp.w	r9, #0
 8003644:	bfa8      	it	ge
 8003646:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
 800364a:	ea54 0205 	orrs.w	r2, r4, r5
 800364e:	d102      	bne.n	8003656 <_svfprintf_r+0x716>
 8003650:	f1b9 0f00 	cmp.w	r9, #0
 8003654:	d05a      	beq.n	800370c <_svfprintf_r+0x7cc>
 8003656:	2b01      	cmp	r3, #1
 8003658:	d01f      	beq.n	800369a <_svfprintf_r+0x75a>
 800365a:	2b02      	cmp	r3, #2
 800365c:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 8003660:	d041      	beq.n	80036e6 <_svfprintf_r+0x7a6>
 8003662:	08e1      	lsrs	r1, r4, #3
 8003664:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
 8003668:	08e9      	lsrs	r1, r5, #3
 800366a:	9010      	str	r0, [sp, #64]	; 0x40
 800366c:	9111      	str	r1, [sp, #68]	; 0x44
 800366e:	f004 0207 	and.w	r2, r4, #7
 8003672:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8003676:	3230      	adds	r2, #48	; 0x30
 8003678:	ea54 0005 	orrs.w	r0, r4, r5
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	f103 33ff 	add.w	r3, r3, #4294967295
 8003684:	d1ed      	bne.n	8003662 <_svfprintf_r+0x722>
 8003686:	07f8      	lsls	r0, r7, #31
 8003688:	9903      	ldr	r1, [sp, #12]
 800368a:	d54c      	bpl.n	8003726 <_svfprintf_r+0x7e6>
 800368c:	2a30      	cmp	r2, #48	; 0x30
 800368e:	d04a      	beq.n	8003726 <_svfprintf_r+0x7e6>
 8003690:	9303      	str	r3, [sp, #12]
 8003692:	2330      	movs	r3, #48	; 0x30
 8003694:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003698:	e045      	b.n	8003726 <_svfprintf_r+0x7e6>
 800369a:	2d00      	cmp	r5, #0
 800369c:	bf08      	it	eq
 800369e:	2c0a      	cmpeq	r4, #10
 80036a0:	d205      	bcs.n	80036ae <_svfprintf_r+0x76e>
 80036a2:	3430      	adds	r4, #48	; 0x30
 80036a4:	f88d 40b7 	strb.w	r4, [sp, #183]	; 0xb7
 80036a8:	f10d 04b7 	add.w	r4, sp, #183	; 0xb7
 80036ac:	e03a      	b.n	8003724 <_svfprintf_r+0x7e4>
 80036ae:	f10d 00b7 	add.w	r0, sp, #183	; 0xb7
 80036b2:	9006      	str	r0, [sp, #24]
 80036b4:	9906      	ldr	r1, [sp, #24]
 80036b6:	9103      	str	r1, [sp, #12]
 80036b8:	4620      	mov	r0, r4
 80036ba:	4629      	mov	r1, r5
 80036bc:	220a      	movs	r2, #10
 80036be:	2300      	movs	r3, #0
 80036c0:	f7fd fa1c 	bl	8000afc <__aeabi_uldivmod>
 80036c4:	9b06      	ldr	r3, [sp, #24]
 80036c6:	3230      	adds	r2, #48	; 0x30
 80036c8:	f803 2901 	strb.w	r2, [r3], #-1
 80036cc:	4620      	mov	r0, r4
 80036ce:	9306      	str	r3, [sp, #24]
 80036d0:	4629      	mov	r1, r5
 80036d2:	220a      	movs	r2, #10
 80036d4:	2300      	movs	r3, #0
 80036d6:	f7fd fa11 	bl	8000afc <__aeabi_uldivmod>
 80036da:	4604      	mov	r4, r0
 80036dc:	460d      	mov	r5, r1
 80036de:	ea54 0005 	orrs.w	r0, r4, r5
 80036e2:	d1e7      	bne.n	80036b4 <_svfprintf_r+0x774>
 80036e4:	e01f      	b.n	8003726 <_svfprintf_r+0x7e6>
 80036e6:	f004 020f 	and.w	r2, r4, #15
 80036ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	5c8a      	ldrb	r2, [r1, r2]
 80036f0:	f803 2901 	strb.w	r2, [r3], #-1
 80036f4:	0922      	lsrs	r2, r4, #4
 80036f6:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
 80036fa:	0929      	lsrs	r1, r5, #4
 80036fc:	9012      	str	r0, [sp, #72]	; 0x48
 80036fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8003700:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8003704:	ea54 0205 	orrs.w	r2, r4, r5
 8003708:	d1ed      	bne.n	80036e6 <_svfprintf_r+0x7a6>
 800370a:	e00c      	b.n	8003726 <_svfprintf_r+0x7e6>
 800370c:	b933      	cbnz	r3, 800371c <_svfprintf_r+0x7dc>
 800370e:	07fb      	lsls	r3, r7, #31
 8003710:	d507      	bpl.n	8003722 <_svfprintf_r+0x7e2>
 8003712:	ac3e      	add	r4, sp, #248	; 0xf8
 8003714:	2330      	movs	r3, #48	; 0x30
 8003716:	f804 3d41 	strb.w	r3, [r4, #-65]!
 800371a:	e003      	b.n	8003724 <_svfprintf_r+0x7e4>
 800371c:	ad2e      	add	r5, sp, #184	; 0xb8
 800371e:	9503      	str	r5, [sp, #12]
 8003720:	e001      	b.n	8003726 <_svfprintf_r+0x7e6>
 8003722:	ac2e      	add	r4, sp, #184	; 0xb8
 8003724:	9403      	str	r4, [sp, #12]
 8003726:	9c03      	ldr	r4, [sp, #12]
 8003728:	464d      	mov	r5, r9
 800372a:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 800372e:	ebc4 0909 	rsb	r9, r4, r9
 8003732:	2400      	movs	r4, #0
 8003734:	e012      	b.n	800375c <_svfprintf_r+0x81c>
 8003736:	9d04      	ldr	r5, [sp, #16]
 8003738:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800373c:	2d00      	cmp	r5, #0
 800373e:	f000 8389 	beq.w	8003e54 <_svfprintf_r+0xf14>
 8003742:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8003746:	2500      	movs	r5, #0
 8003748:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 800374c:	a824      	add	r0, sp, #144	; 0x90
 800374e:	f04f 0901 	mov.w	r9, #1
 8003752:	462c      	mov	r4, r5
 8003754:	9003      	str	r0, [sp, #12]
 8003756:	e001      	b.n	800375c <_svfprintf_r+0x81c>
 8003758:	4605      	mov	r5, r0
 800375a:	462c      	mov	r4, r5
 800375c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8003760:	45a9      	cmp	r9, r5
 8003762:	bfac      	ite	ge
 8003764:	4649      	movge	r1, r9
 8003766:	4629      	movlt	r1, r5
 8003768:	9106      	str	r1, [sp, #24]
 800376a:	b10b      	cbz	r3, 8003770 <_svfprintf_r+0x830>
 800376c:	3101      	adds	r1, #1
 800376e:	9106      	str	r1, [sp, #24]
 8003770:	f017 0302 	ands.w	r3, r7, #2
 8003774:	930d      	str	r3, [sp, #52]	; 0x34
 8003776:	d002      	beq.n	800377e <_svfprintf_r+0x83e>
 8003778:	9806      	ldr	r0, [sp, #24]
 800377a:	3002      	adds	r0, #2
 800377c:	9006      	str	r0, [sp, #24]
 800377e:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8003782:	9315      	str	r3, [sp, #84]	; 0x54
 8003784:	d141      	bne.n	800380a <_svfprintf_r+0x8ca>
 8003786:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003788:	9906      	ldr	r1, [sp, #24]
 800378a:	ebc1 0c00 	rsb	ip, r1, r0
 800378e:	f1bc 0f00 	cmp.w	ip, #0
 8003792:	dd3a      	ble.n	800380a <_svfprintf_r+0x8ca>
 8003794:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <_svfprintf_r+0x8b4>)
 8003796:	6033      	str	r3, [r6, #0]
 8003798:	f1bc 0f10 	cmp.w	ip, #16
 800379c:	dd1b      	ble.n	80037d6 <_svfprintf_r+0x896>
 800379e:	2310      	movs	r3, #16
 80037a0:	6073      	str	r3, [r6, #4]
 80037a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037a4:	3310      	adds	r3, #16
 80037a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80037a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037aa:	3301      	adds	r3, #1
 80037ac:	2b07      	cmp	r3, #7
 80037ae:	9322      	str	r3, [sp, #136]	; 0x88
 80037b0:	dc01      	bgt.n	80037b6 <_svfprintf_r+0x876>
 80037b2:	3608      	adds	r6, #8
 80037b4:	e00c      	b.n	80037d0 <_svfprintf_r+0x890>
 80037b6:	4650      	mov	r0, sl
 80037b8:	4659      	mov	r1, fp
 80037ba:	aa21      	add	r2, sp, #132	; 0x84
 80037bc:	f8cd c008 	str.w	ip, [sp, #8]
 80037c0:	f001 fef2 	bl	80055a8 <__ssprint_r>
 80037c4:	f8dd c008 	ldr.w	ip, [sp, #8]
 80037c8:	2800      	cmp	r0, #0
 80037ca:	f040 834a 	bne.w	8003e62 <_svfprintf_r+0xf22>
 80037ce:	ae2e      	add	r6, sp, #184	; 0xb8
 80037d0:	f1ac 0c10 	sub.w	ip, ip, #16
 80037d4:	e7de      	b.n	8003794 <_svfprintf_r+0x854>
 80037d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80037d8:	f8c6 c004 	str.w	ip, [r6, #4]
 80037dc:	4463      	add	r3, ip
 80037de:	9323      	str	r3, [sp, #140]	; 0x8c
 80037e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037e2:	3301      	adds	r3, #1
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	9322      	str	r3, [sp, #136]	; 0x88
 80037e8:	dc06      	bgt.n	80037f8 <_svfprintf_r+0x8b8>
 80037ea:	3608      	adds	r6, #8
 80037ec:	e00d      	b.n	800380a <_svfprintf_r+0x8ca>
 80037ee:	bf00      	nop
 80037f0:	08005f95 	.word	0x08005f95
 80037f4:	08005fa6 	.word	0x08005fa6
 80037f8:	4650      	mov	r0, sl
 80037fa:	4659      	mov	r1, fp
 80037fc:	aa21      	add	r2, sp, #132	; 0x84
 80037fe:	f001 fed3 	bl	80055a8 <__ssprint_r>
 8003802:	2800      	cmp	r0, #0
 8003804:	f040 832d 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003808:	ae2e      	add	r6, sp, #184	; 0xb8
 800380a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800380e:	b1bb      	cbz	r3, 8003840 <_svfprintf_r+0x900>
 8003810:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8003814:	6033      	str	r3, [r6, #0]
 8003816:	2301      	movs	r3, #1
 8003818:	6073      	str	r3, [r6, #4]
 800381a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800381c:	3301      	adds	r3, #1
 800381e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003822:	3301      	adds	r3, #1
 8003824:	2b07      	cmp	r3, #7
 8003826:	9322      	str	r3, [sp, #136]	; 0x88
 8003828:	dc01      	bgt.n	800382e <_svfprintf_r+0x8ee>
 800382a:	3608      	adds	r6, #8
 800382c:	e008      	b.n	8003840 <_svfprintf_r+0x900>
 800382e:	4650      	mov	r0, sl
 8003830:	4659      	mov	r1, fp
 8003832:	aa21      	add	r2, sp, #132	; 0x84
 8003834:	f001 feb8 	bl	80055a8 <__ssprint_r>
 8003838:	2800      	cmp	r0, #0
 800383a:	f040 8312 	bne.w	8003e62 <_svfprintf_r+0xf22>
 800383e:	ae2e      	add	r6, sp, #184	; 0xb8
 8003840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003842:	b1b3      	cbz	r3, 8003872 <_svfprintf_r+0x932>
 8003844:	ab1a      	add	r3, sp, #104	; 0x68
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	2302      	movs	r3, #2
 800384a:	6073      	str	r3, [r6, #4]
 800384c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800384e:	3302      	adds	r3, #2
 8003850:	9323      	str	r3, [sp, #140]	; 0x8c
 8003852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003854:	3301      	adds	r3, #1
 8003856:	2b07      	cmp	r3, #7
 8003858:	9322      	str	r3, [sp, #136]	; 0x88
 800385a:	dc01      	bgt.n	8003860 <_svfprintf_r+0x920>
 800385c:	3608      	adds	r6, #8
 800385e:	e008      	b.n	8003872 <_svfprintf_r+0x932>
 8003860:	4650      	mov	r0, sl
 8003862:	4659      	mov	r1, fp
 8003864:	aa21      	add	r2, sp, #132	; 0x84
 8003866:	f001 fe9f 	bl	80055a8 <__ssprint_r>
 800386a:	2800      	cmp	r0, #0
 800386c:	f040 82f9 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003870:	ae2e      	add	r6, sp, #184	; 0xb8
 8003872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d13c      	bne.n	80038f2 <_svfprintf_r+0x9b2>
 8003878:	980a      	ldr	r0, [sp, #40]	; 0x28
 800387a:	9906      	ldr	r1, [sp, #24]
 800387c:	ebc1 0c00 	rsb	ip, r1, r0
 8003880:	f1bc 0f00 	cmp.w	ip, #0
 8003884:	dd35      	ble.n	80038f2 <_svfprintf_r+0x9b2>
 8003886:	4b9c      	ldr	r3, [pc, #624]	; (8003af8 <_svfprintf_r+0xbb8>)
 8003888:	6033      	str	r3, [r6, #0]
 800388a:	f1bc 0f10 	cmp.w	ip, #16
 800388e:	dd1b      	ble.n	80038c8 <_svfprintf_r+0x988>
 8003890:	2310      	movs	r3, #16
 8003892:	6073      	str	r3, [r6, #4]
 8003894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003896:	3310      	adds	r3, #16
 8003898:	9323      	str	r3, [sp, #140]	; 0x8c
 800389a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800389c:	3301      	adds	r3, #1
 800389e:	2b07      	cmp	r3, #7
 80038a0:	9322      	str	r3, [sp, #136]	; 0x88
 80038a2:	dc01      	bgt.n	80038a8 <_svfprintf_r+0x968>
 80038a4:	3608      	adds	r6, #8
 80038a6:	e00c      	b.n	80038c2 <_svfprintf_r+0x982>
 80038a8:	4650      	mov	r0, sl
 80038aa:	4659      	mov	r1, fp
 80038ac:	aa21      	add	r2, sp, #132	; 0x84
 80038ae:	f8cd c008 	str.w	ip, [sp, #8]
 80038b2:	f001 fe79 	bl	80055a8 <__ssprint_r>
 80038b6:	f8dd c008 	ldr.w	ip, [sp, #8]
 80038ba:	2800      	cmp	r0, #0
 80038bc:	f040 82d1 	bne.w	8003e62 <_svfprintf_r+0xf22>
 80038c0:	ae2e      	add	r6, sp, #184	; 0xb8
 80038c2:	f1ac 0c10 	sub.w	ip, ip, #16
 80038c6:	e7de      	b.n	8003886 <_svfprintf_r+0x946>
 80038c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038ca:	f8c6 c004 	str.w	ip, [r6, #4]
 80038ce:	4463      	add	r3, ip
 80038d0:	9323      	str	r3, [sp, #140]	; 0x8c
 80038d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038d4:	3301      	adds	r3, #1
 80038d6:	2b07      	cmp	r3, #7
 80038d8:	9322      	str	r3, [sp, #136]	; 0x88
 80038da:	dc01      	bgt.n	80038e0 <_svfprintf_r+0x9a0>
 80038dc:	3608      	adds	r6, #8
 80038de:	e008      	b.n	80038f2 <_svfprintf_r+0x9b2>
 80038e0:	4650      	mov	r0, sl
 80038e2:	4659      	mov	r1, fp
 80038e4:	aa21      	add	r2, sp, #132	; 0x84
 80038e6:	f001 fe5f 	bl	80055a8 <__ssprint_r>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	f040 82b9 	bne.w	8003e62 <_svfprintf_r+0xf22>
 80038f0:	ae2e      	add	r6, sp, #184	; 0xb8
 80038f2:	ebc9 0505 	rsb	r5, r9, r5
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	dd2e      	ble.n	8003958 <_svfprintf_r+0xa18>
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <_svfprintf_r+0xbb8>)
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	2d10      	cmp	r5, #16
 8003900:	dd16      	ble.n	8003930 <_svfprintf_r+0x9f0>
 8003902:	2310      	movs	r3, #16
 8003904:	6073      	str	r3, [r6, #4]
 8003906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003908:	3310      	adds	r3, #16
 800390a:	9323      	str	r3, [sp, #140]	; 0x8c
 800390c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800390e:	3301      	adds	r3, #1
 8003910:	2b07      	cmp	r3, #7
 8003912:	9322      	str	r3, [sp, #136]	; 0x88
 8003914:	dc01      	bgt.n	800391a <_svfprintf_r+0x9da>
 8003916:	3608      	adds	r6, #8
 8003918:	e008      	b.n	800392c <_svfprintf_r+0x9ec>
 800391a:	4650      	mov	r0, sl
 800391c:	4659      	mov	r1, fp
 800391e:	aa21      	add	r2, sp, #132	; 0x84
 8003920:	f001 fe42 	bl	80055a8 <__ssprint_r>
 8003924:	2800      	cmp	r0, #0
 8003926:	f040 829c 	bne.w	8003e62 <_svfprintf_r+0xf22>
 800392a:	ae2e      	add	r6, sp, #184	; 0xb8
 800392c:	3d10      	subs	r5, #16
 800392e:	e7e4      	b.n	80038fa <_svfprintf_r+0x9ba>
 8003930:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003932:	6075      	str	r5, [r6, #4]
 8003934:	441d      	add	r5, r3
 8003936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003938:	9523      	str	r5, [sp, #140]	; 0x8c
 800393a:	3301      	adds	r3, #1
 800393c:	2b07      	cmp	r3, #7
 800393e:	9322      	str	r3, [sp, #136]	; 0x88
 8003940:	dc01      	bgt.n	8003946 <_svfprintf_r+0xa06>
 8003942:	3608      	adds	r6, #8
 8003944:	e008      	b.n	8003958 <_svfprintf_r+0xa18>
 8003946:	4650      	mov	r0, sl
 8003948:	4659      	mov	r1, fp
 800394a:	aa21      	add	r2, sp, #132	; 0x84
 800394c:	f001 fe2c 	bl	80055a8 <__ssprint_r>
 8003950:	2800      	cmp	r0, #0
 8003952:	f040 8286 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003956:	ae2e      	add	r6, sp, #184	; 0xb8
 8003958:	05fd      	lsls	r5, r7, #23
 800395a:	d405      	bmi.n	8003968 <_svfprintf_r+0xa28>
 800395c:	9c03      	ldr	r4, [sp, #12]
 800395e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003960:	e886 0210 	stmia.w	r6, {r4, r9}
 8003964:	444b      	add	r3, r9
 8003966:	e0da      	b.n	8003b1e <_svfprintf_r+0xbde>
 8003968:	9d04      	ldr	r5, [sp, #16]
 800396a:	2d65      	cmp	r5, #101	; 0x65
 800396c:	f340 81a7 	ble.w	8003cbe <_svfprintf_r+0xd7e>
 8003970:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003974:	2200      	movs	r2, #0
 8003976:	2300      	movs	r3, #0
 8003978:	f7fd f866 	bl	8000a48 <__aeabi_dcmpeq>
 800397c:	2800      	cmp	r0, #0
 800397e:	d059      	beq.n	8003a34 <_svfprintf_r+0xaf4>
 8003980:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <_svfprintf_r+0xbbc>)
 8003982:	6033      	str	r3, [r6, #0]
 8003984:	2301      	movs	r3, #1
 8003986:	6073      	str	r3, [r6, #4]
 8003988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800398a:	3301      	adds	r3, #1
 800398c:	9323      	str	r3, [sp, #140]	; 0x8c
 800398e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003990:	3301      	adds	r3, #1
 8003992:	2b07      	cmp	r3, #7
 8003994:	9322      	str	r3, [sp, #136]	; 0x88
 8003996:	dc01      	bgt.n	800399c <_svfprintf_r+0xa5c>
 8003998:	3608      	adds	r6, #8
 800399a:	e008      	b.n	80039ae <_svfprintf_r+0xa6e>
 800399c:	4650      	mov	r0, sl
 800399e:	4659      	mov	r1, fp
 80039a0:	aa21      	add	r2, sp, #132	; 0x84
 80039a2:	f001 fe01 	bl	80055a8 <__ssprint_r>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	f040 825b 	bne.w	8003e62 <_svfprintf_r+0xf22>
 80039ac:	ae2e      	add	r6, sp, #184	; 0xb8
 80039ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80039b0:	9c05      	ldr	r4, [sp, #20]
 80039b2:	42a3      	cmp	r3, r4
 80039b4:	db02      	blt.n	80039bc <_svfprintf_r+0xa7c>
 80039b6:	07fc      	lsls	r4, r7, #31
 80039b8:	f140 8202 	bpl.w	8003dc0 <_svfprintf_r+0xe80>
 80039bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80039be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80039c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80039c2:	6035      	str	r5, [r6, #0]
 80039c4:	4423      	add	r3, r4
 80039c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80039c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80039ca:	6074      	str	r4, [r6, #4]
 80039cc:	3301      	adds	r3, #1
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	9322      	str	r3, [sp, #136]	; 0x88
 80039d2:	dc01      	bgt.n	80039d8 <_svfprintf_r+0xa98>
 80039d4:	3608      	adds	r6, #8
 80039d6:	e008      	b.n	80039ea <_svfprintf_r+0xaaa>
 80039d8:	4650      	mov	r0, sl
 80039da:	4659      	mov	r1, fp
 80039dc:	aa21      	add	r2, sp, #132	; 0x84
 80039de:	f001 fde3 	bl	80055a8 <__ssprint_r>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f040 823d 	bne.w	8003e62 <_svfprintf_r+0xf22>
 80039e8:	ae2e      	add	r6, sp, #184	; 0xb8
 80039ea:	9d05      	ldr	r5, [sp, #20]
 80039ec:	1e6c      	subs	r4, r5, #1
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	f340 81e6 	ble.w	8003dc0 <_svfprintf_r+0xe80>
 80039f4:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <_svfprintf_r+0xbb8>)
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	2c10      	cmp	r4, #16
 80039fa:	dd16      	ble.n	8003a2a <_svfprintf_r+0xaea>
 80039fc:	2310      	movs	r3, #16
 80039fe:	6073      	str	r3, [r6, #4]
 8003a00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a02:	3310      	adds	r3, #16
 8003a04:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a08:	3301      	adds	r3, #1
 8003a0a:	2b07      	cmp	r3, #7
 8003a0c:	9322      	str	r3, [sp, #136]	; 0x88
 8003a0e:	dc01      	bgt.n	8003a14 <_svfprintf_r+0xad4>
 8003a10:	3608      	adds	r6, #8
 8003a12:	e008      	b.n	8003a26 <_svfprintf_r+0xae6>
 8003a14:	4650      	mov	r0, sl
 8003a16:	4659      	mov	r1, fp
 8003a18:	aa21      	add	r2, sp, #132	; 0x84
 8003a1a:	f001 fdc5 	bl	80055a8 <__ssprint_r>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	f040 821f 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003a24:	ae2e      	add	r6, sp, #184	; 0xb8
 8003a26:	3c10      	subs	r4, #16
 8003a28:	e7e4      	b.n	80039f4 <_svfprintf_r+0xab4>
 8003a2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a2c:	6074      	str	r4, [r6, #4]
 8003a2e:	441c      	add	r4, r3
 8003a30:	9423      	str	r4, [sp, #140]	; 0x8c
 8003a32:	e134      	b.n	8003c9e <_svfprintf_r+0xd5e>
 8003a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dc73      	bgt.n	8003b22 <_svfprintf_r+0xbe2>
 8003a3a:	4b30      	ldr	r3, [pc, #192]	; (8003afc <_svfprintf_r+0xbbc>)
 8003a3c:	6033      	str	r3, [r6, #0]
 8003a3e:	2301      	movs	r3, #1
 8003a40:	6073      	str	r3, [r6, #4]
 8003a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a44:	3301      	adds	r3, #1
 8003a46:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	9322      	str	r3, [sp, #136]	; 0x88
 8003a50:	dc01      	bgt.n	8003a56 <_svfprintf_r+0xb16>
 8003a52:	3608      	adds	r6, #8
 8003a54:	e008      	b.n	8003a68 <_svfprintf_r+0xb28>
 8003a56:	4650      	mov	r0, sl
 8003a58:	4659      	mov	r1, fp
 8003a5a:	aa21      	add	r2, sp, #132	; 0x84
 8003a5c:	f001 fda4 	bl	80055a8 <__ssprint_r>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	f040 81fe 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003a66:	ae2e      	add	r6, sp, #184	; 0xb8
 8003a68:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a6a:	b923      	cbnz	r3, 8003a76 <_svfprintf_r+0xb36>
 8003a6c:	9c05      	ldr	r4, [sp, #20]
 8003a6e:	b914      	cbnz	r4, 8003a76 <_svfprintf_r+0xb36>
 8003a70:	07f8      	lsls	r0, r7, #31
 8003a72:	f140 81a5 	bpl.w	8003dc0 <_svfprintf_r+0xe80>
 8003a76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003a78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003a7c:	6035      	str	r5, [r6, #0]
 8003a7e:	4423      	add	r3, r4
 8003a80:	9323      	str	r3, [sp, #140]	; 0x8c
 8003a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a84:	6074      	str	r4, [r6, #4]
 8003a86:	3301      	adds	r3, #1
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	9322      	str	r3, [sp, #136]	; 0x88
 8003a8c:	dc01      	bgt.n	8003a92 <_svfprintf_r+0xb52>
 8003a8e:	3608      	adds	r6, #8
 8003a90:	e008      	b.n	8003aa4 <_svfprintf_r+0xb64>
 8003a92:	4650      	mov	r0, sl
 8003a94:	4659      	mov	r1, fp
 8003a96:	aa21      	add	r2, sp, #132	; 0x84
 8003a98:	f001 fd86 	bl	80055a8 <__ssprint_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	f040 81e0 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003aa2:	ae2e      	add	r6, sp, #184	; 0xb8
 8003aa4:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8003aa6:	4264      	negs	r4, r4
 8003aa8:	2c00      	cmp	r4, #0
 8003aaa:	dd32      	ble.n	8003b12 <_svfprintf_r+0xbd2>
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <_svfprintf_r+0xbb8>)
 8003aae:	6033      	str	r3, [r6, #0]
 8003ab0:	2c10      	cmp	r4, #16
 8003ab2:	dd16      	ble.n	8003ae2 <_svfprintf_r+0xba2>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	6073      	str	r3, [r6, #4]
 8003ab8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003aba:	3310      	adds	r3, #16
 8003abc:	9323      	str	r3, [sp, #140]	; 0x8c
 8003abe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	2b07      	cmp	r3, #7
 8003ac4:	9322      	str	r3, [sp, #136]	; 0x88
 8003ac6:	dc01      	bgt.n	8003acc <_svfprintf_r+0xb8c>
 8003ac8:	3608      	adds	r6, #8
 8003aca:	e008      	b.n	8003ade <_svfprintf_r+0xb9e>
 8003acc:	4650      	mov	r0, sl
 8003ace:	4659      	mov	r1, fp
 8003ad0:	aa21      	add	r2, sp, #132	; 0x84
 8003ad2:	f001 fd69 	bl	80055a8 <__ssprint_r>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	f040 81c3 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003adc:	ae2e      	add	r6, sp, #184	; 0xb8
 8003ade:	3c10      	subs	r4, #16
 8003ae0:	e7e4      	b.n	8003aac <_svfprintf_r+0xb6c>
 8003ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ae4:	6074      	str	r4, [r6, #4]
 8003ae6:	441c      	add	r4, r3
 8003ae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003aea:	9423      	str	r4, [sp, #140]	; 0x8c
 8003aec:	3301      	adds	r3, #1
 8003aee:	2b07      	cmp	r3, #7
 8003af0:	9322      	str	r3, [sp, #136]	; 0x88
 8003af2:	dc05      	bgt.n	8003b00 <_svfprintf_r+0xbc0>
 8003af4:	3608      	adds	r6, #8
 8003af6:	e00c      	b.n	8003b12 <_svfprintf_r+0xbd2>
 8003af8:	08005f64 	.word	0x08005f64
 8003afc:	08005efe 	.word	0x08005efe
 8003b00:	4650      	mov	r0, sl
 8003b02:	4659      	mov	r1, fp
 8003b04:	aa21      	add	r2, sp, #132	; 0x84
 8003b06:	f001 fd4f 	bl	80055a8 <__ssprint_r>
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	f040 81a9 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003b10:	ae2e      	add	r6, sp, #184	; 0xb8
 8003b12:	9d03      	ldr	r5, [sp, #12]
 8003b14:	9c05      	ldr	r4, [sp, #20]
 8003b16:	6035      	str	r5, [r6, #0]
 8003b18:	6074      	str	r4, [r6, #4]
 8003b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b1c:	4423      	add	r3, r4
 8003b1e:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b20:	e0bd      	b.n	8003c9e <_svfprintf_r+0xd5e>
 8003b22:	9805      	ldr	r0, [sp, #20]
 8003b24:	9d03      	ldr	r5, [sp, #12]
 8003b26:	4681      	mov	r9, r0
 8003b28:	45a1      	cmp	r9, r4
 8003b2a:	bfa8      	it	ge
 8003b2c:	46a1      	movge	r9, r4
 8003b2e:	f1b9 0f00 	cmp.w	r9, #0
 8003b32:	4405      	add	r5, r0
 8003b34:	dd15      	ble.n	8003b62 <_svfprintf_r+0xc22>
 8003b36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b38:	9903      	ldr	r1, [sp, #12]
 8003b3a:	444b      	add	r3, r9
 8003b3c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b40:	3301      	adds	r3, #1
 8003b42:	2b07      	cmp	r3, #7
 8003b44:	e886 0202 	stmia.w	r6, {r1, r9}
 8003b48:	9322      	str	r3, [sp, #136]	; 0x88
 8003b4a:	dc01      	bgt.n	8003b50 <_svfprintf_r+0xc10>
 8003b4c:	3608      	adds	r6, #8
 8003b4e:	e008      	b.n	8003b62 <_svfprintf_r+0xc22>
 8003b50:	4650      	mov	r0, sl
 8003b52:	4659      	mov	r1, fp
 8003b54:	aa21      	add	r2, sp, #132	; 0x84
 8003b56:	f001 fd27 	bl	80055a8 <__ssprint_r>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f040 8181 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003b60:	ae2e      	add	r6, sp, #184	; 0xb8
 8003b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b66:	ebc9 0904 	rsb	r9, r9, r4
 8003b6a:	f1b9 0f00 	cmp.w	r9, #0
 8003b6e:	dd31      	ble.n	8003bd4 <_svfprintf_r+0xc94>
 8003b70:	4b9a      	ldr	r3, [pc, #616]	; (8003ddc <_svfprintf_r+0xe9c>)
 8003b72:	6033      	str	r3, [r6, #0]
 8003b74:	f1b9 0f10 	cmp.w	r9, #16
 8003b78:	dd17      	ble.n	8003baa <_svfprintf_r+0xc6a>
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	6073      	str	r3, [r6, #4]
 8003b7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b80:	3310      	adds	r3, #16
 8003b82:	9323      	str	r3, [sp, #140]	; 0x8c
 8003b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b86:	3301      	adds	r3, #1
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	9322      	str	r3, [sp, #136]	; 0x88
 8003b8c:	dc01      	bgt.n	8003b92 <_svfprintf_r+0xc52>
 8003b8e:	3608      	adds	r6, #8
 8003b90:	e008      	b.n	8003ba4 <_svfprintf_r+0xc64>
 8003b92:	4650      	mov	r0, sl
 8003b94:	4659      	mov	r1, fp
 8003b96:	aa21      	add	r2, sp, #132	; 0x84
 8003b98:	f001 fd06 	bl	80055a8 <__ssprint_r>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	f040 8160 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003ba2:	ae2e      	add	r6, sp, #184	; 0xb8
 8003ba4:	f1a9 0910 	sub.w	r9, r9, #16
 8003ba8:	e7e2      	b.n	8003b70 <_svfprintf_r+0xc30>
 8003baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bac:	f8c6 9004 	str.w	r9, [r6, #4]
 8003bb0:	444b      	add	r3, r9
 8003bb2:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	2b07      	cmp	r3, #7
 8003bba:	9322      	str	r3, [sp, #136]	; 0x88
 8003bbc:	dc01      	bgt.n	8003bc2 <_svfprintf_r+0xc82>
 8003bbe:	3608      	adds	r6, #8
 8003bc0:	e008      	b.n	8003bd4 <_svfprintf_r+0xc94>
 8003bc2:	4650      	mov	r0, sl
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	aa21      	add	r2, sp, #132	; 0x84
 8003bc8:	f001 fcee 	bl	80055a8 <__ssprint_r>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	f040 8148 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003bd2:	ae2e      	add	r6, sp, #184	; 0xb8
 8003bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bd6:	9805      	ldr	r0, [sp, #20]
 8003bd8:	9a03      	ldr	r2, [sp, #12]
 8003bda:	4283      	cmp	r3, r0
 8003bdc:	4414      	add	r4, r2
 8003bde:	db01      	blt.n	8003be4 <_svfprintf_r+0xca4>
 8003be0:	07f9      	lsls	r1, r7, #31
 8003be2:	d516      	bpl.n	8003c12 <_svfprintf_r+0xcd2>
 8003be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003be6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003be8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003bea:	6031      	str	r1, [r6, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bf2:	6072      	str	r2, [r6, #4]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	9322      	str	r3, [sp, #136]	; 0x88
 8003bfa:	dc01      	bgt.n	8003c00 <_svfprintf_r+0xcc0>
 8003bfc:	3608      	adds	r6, #8
 8003bfe:	e008      	b.n	8003c12 <_svfprintf_r+0xcd2>
 8003c00:	4650      	mov	r0, sl
 8003c02:	4659      	mov	r1, fp
 8003c04:	aa21      	add	r2, sp, #132	; 0x84
 8003c06:	f001 fccf 	bl	80055a8 <__ssprint_r>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	f040 8129 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003c10:	ae2e      	add	r6, sp, #184	; 0xb8
 8003c12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c14:	9805      	ldr	r0, [sp, #20]
 8003c16:	1b2d      	subs	r5, r5, r4
 8003c18:	1ac3      	subs	r3, r0, r3
 8003c1a:	429d      	cmp	r5, r3
 8003c1c:	bfa8      	it	ge
 8003c1e:	461d      	movge	r5, r3
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	dd14      	ble.n	8003c4e <_svfprintf_r+0xd0e>
 8003c24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c26:	442b      	add	r3, r5
 8003c28:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	2b07      	cmp	r3, #7
 8003c30:	e886 0030 	stmia.w	r6, {r4, r5}
 8003c34:	9322      	str	r3, [sp, #136]	; 0x88
 8003c36:	dc01      	bgt.n	8003c3c <_svfprintf_r+0xcfc>
 8003c38:	3608      	adds	r6, #8
 8003c3a:	e008      	b.n	8003c4e <_svfprintf_r+0xd0e>
 8003c3c:	4650      	mov	r0, sl
 8003c3e:	4659      	mov	r1, fp
 8003c40:	aa21      	add	r2, sp, #132	; 0x84
 8003c42:	f001 fcb1 	bl	80055a8 <__ssprint_r>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	f040 810b 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003c4c:	ae2e      	add	r6, sp, #184	; 0xb8
 8003c4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c50:	9c05      	ldr	r4, [sp, #20]
 8003c52:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8003c56:	1ae3      	subs	r3, r4, r3
 8003c58:	1b5d      	subs	r5, r3, r5
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	f340 80b0 	ble.w	8003dc0 <_svfprintf_r+0xe80>
 8003c60:	4b5e      	ldr	r3, [pc, #376]	; (8003ddc <_svfprintf_r+0xe9c>)
 8003c62:	6033      	str	r3, [r6, #0]
 8003c64:	2d10      	cmp	r5, #16
 8003c66:	dd16      	ble.n	8003c96 <_svfprintf_r+0xd56>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	6073      	str	r3, [r6, #4]
 8003c6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c6e:	3310      	adds	r3, #16
 8003c70:	9323      	str	r3, [sp, #140]	; 0x8c
 8003c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c74:	3301      	adds	r3, #1
 8003c76:	2b07      	cmp	r3, #7
 8003c78:	9322      	str	r3, [sp, #136]	; 0x88
 8003c7a:	dc01      	bgt.n	8003c80 <_svfprintf_r+0xd40>
 8003c7c:	3608      	adds	r6, #8
 8003c7e:	e008      	b.n	8003c92 <_svfprintf_r+0xd52>
 8003c80:	4650      	mov	r0, sl
 8003c82:	4659      	mov	r1, fp
 8003c84:	aa21      	add	r2, sp, #132	; 0x84
 8003c86:	f001 fc8f 	bl	80055a8 <__ssprint_r>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	f040 80e9 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003c90:	ae2e      	add	r6, sp, #184	; 0xb8
 8003c92:	3d10      	subs	r5, #16
 8003c94:	e7e4      	b.n	8003c60 <_svfprintf_r+0xd20>
 8003c96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c98:	6075      	str	r5, [r6, #4]
 8003c9a:	441d      	add	r5, r3
 8003c9c:	9523      	str	r5, [sp, #140]	; 0x8c
 8003c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	9322      	str	r3, [sp, #136]	; 0x88
 8003ca6:	f340 808a 	ble.w	8003dbe <_svfprintf_r+0xe7e>
 8003caa:	4650      	mov	r0, sl
 8003cac:	4659      	mov	r1, fp
 8003cae:	aa21      	add	r2, sp, #132	; 0x84
 8003cb0:	f001 fc7a 	bl	80055a8 <__ssprint_r>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f040 80d4 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003cba:	ae2e      	add	r6, sp, #184	; 0xb8
 8003cbc:	e080      	b.n	8003dc0 <_svfprintf_r+0xe80>
 8003cbe:	9d05      	ldr	r5, [sp, #20]
 8003cc0:	2d01      	cmp	r5, #1
 8003cc2:	dc01      	bgt.n	8003cc8 <_svfprintf_r+0xd88>
 8003cc4:	07fa      	lsls	r2, r7, #31
 8003cc6:	d56d      	bpl.n	8003da4 <_svfprintf_r+0xe64>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6073      	str	r3, [r6, #4]
 8003ccc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cce:	9c03      	ldr	r4, [sp, #12]
 8003cd0:	6034      	str	r4, [r6, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	9323      	str	r3, [sp, #140]	; 0x8c
 8003cd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003cd8:	3301      	adds	r3, #1
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	9322      	str	r3, [sp, #136]	; 0x88
 8003cde:	dc01      	bgt.n	8003ce4 <_svfprintf_r+0xda4>
 8003ce0:	3608      	adds	r6, #8
 8003ce2:	e008      	b.n	8003cf6 <_svfprintf_r+0xdb6>
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	aa21      	add	r2, sp, #132	; 0x84
 8003cea:	f001 fc5d 	bl	80055a8 <__ssprint_r>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	f040 80b7 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003cf4:	ae2e      	add	r6, sp, #184	; 0xb8
 8003cf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003cfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003cfc:	6035      	str	r5, [r6, #0]
 8003cfe:	4423      	add	r3, r4
 8003d00:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d04:	6074      	str	r4, [r6, #4]
 8003d06:	3301      	adds	r3, #1
 8003d08:	2b07      	cmp	r3, #7
 8003d0a:	9322      	str	r3, [sp, #136]	; 0x88
 8003d0c:	dc01      	bgt.n	8003d12 <_svfprintf_r+0xdd2>
 8003d0e:	3608      	adds	r6, #8
 8003d10:	e008      	b.n	8003d24 <_svfprintf_r+0xde4>
 8003d12:	4650      	mov	r0, sl
 8003d14:	4659      	mov	r1, fp
 8003d16:	aa21      	add	r2, sp, #132	; 0x84
 8003d18:	f001 fc46 	bl	80055a8 <__ssprint_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	f040 80a0 	bne.w	8003e62 <_svfprintf_r+0xf22>
 8003d22:	ae2e      	add	r6, sp, #184	; 0xb8
 8003d24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f7fc fe8c 	bl	8000a48 <__aeabi_dcmpeq>
 8003d30:	9d05      	ldr	r5, [sp, #20]
 8003d32:	1e6c      	subs	r4, r5, #1
 8003d34:	b940      	cbnz	r0, 8003d48 <_svfprintf_r+0xe08>
 8003d36:	9d03      	ldr	r5, [sp, #12]
 8003d38:	1c6b      	adds	r3, r5, #1
 8003d3a:	e886 0018 	stmia.w	r6, {r3, r4}
 8003d3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d40:	9c05      	ldr	r4, [sp, #20]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	4423      	add	r3, r4
 8003d46:	e033      	b.n	8003db0 <_svfprintf_r+0xe70>
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	dd34      	ble.n	8003db6 <_svfprintf_r+0xe76>
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <_svfprintf_r+0xe9c>)
 8003d4e:	6033      	str	r3, [r6, #0]
 8003d50:	2c10      	cmp	r4, #16
 8003d52:	dd15      	ble.n	8003d80 <_svfprintf_r+0xe40>
 8003d54:	2310      	movs	r3, #16
 8003d56:	6073      	str	r3, [r6, #4]
 8003d58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d5a:	3310      	adds	r3, #16
 8003d5c:	9323      	str	r3, [sp, #140]	; 0x8c
 8003d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d60:	3301      	adds	r3, #1
 8003d62:	2b07      	cmp	r3, #7
 8003d64:	9322      	str	r3, [sp, #136]	; 0x88
 8003d66:	dc01      	bgt.n	8003d6c <_svfprintf_r+0xe2c>
 8003d68:	3608      	adds	r6, #8
 8003d6a:	e007      	b.n	8003d7c <_svfprintf_r+0xe3c>
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	4659      	mov	r1, fp
 8003d70:	aa21      	add	r2, sp, #132	; 0x84
 8003d72:	f001 fc19 	bl	80055a8 <__ssprint_r>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d173      	bne.n	8003e62 <_svfprintf_r+0xf22>
 8003d7a:	ae2e      	add	r6, sp, #184	; 0xb8
 8003d7c:	3c10      	subs	r4, #16
 8003d7e:	e7e5      	b.n	8003d4c <_svfprintf_r+0xe0c>
 8003d80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003d82:	6074      	str	r4, [r6, #4]
 8003d84:	441c      	add	r4, r3
 8003d86:	9423      	str	r4, [sp, #140]	; 0x8c
 8003d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	2b07      	cmp	r3, #7
 8003d8e:	9322      	str	r3, [sp, #136]	; 0x88
 8003d90:	dd10      	ble.n	8003db4 <_svfprintf_r+0xe74>
 8003d92:	4650      	mov	r0, sl
 8003d94:	4659      	mov	r1, fp
 8003d96:	aa21      	add	r2, sp, #132	; 0x84
 8003d98:	f001 fc06 	bl	80055a8 <__ssprint_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d160      	bne.n	8003e62 <_svfprintf_r+0xf22>
 8003da0:	ae2e      	add	r6, sp, #184	; 0xb8
 8003da2:	e008      	b.n	8003db6 <_svfprintf_r+0xe76>
 8003da4:	2301      	movs	r3, #1
 8003da6:	6073      	str	r3, [r6, #4]
 8003da8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003daa:	9d03      	ldr	r5, [sp, #12]
 8003dac:	6035      	str	r5, [r6, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	9323      	str	r3, [sp, #140]	; 0x8c
 8003db2:	e7e9      	b.n	8003d88 <_svfprintf_r+0xe48>
 8003db4:	3608      	adds	r6, #8
 8003db6:	ab1d      	add	r3, sp, #116	; 0x74
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8003dbc:	e6ac      	b.n	8003b18 <_svfprintf_r+0xbd8>
 8003dbe:	3608      	adds	r6, #8
 8003dc0:	077b      	lsls	r3, r7, #29
 8003dc2:	d40d      	bmi.n	8003de0 <_svfprintf_r+0xea0>
 8003dc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003dc6:	9806      	ldr	r0, [sp, #24]
 8003dc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dcc:	42a0      	cmp	r0, r4
 8003dce:	bfac      	ite	ge
 8003dd0:	182d      	addge	r5, r5, r0
 8003dd2:	192d      	addlt	r5, r5, r4
 8003dd4:	950b      	str	r5, [sp, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d037      	beq.n	8003e4a <_svfprintf_r+0xf0a>
 8003dda:	e030      	b.n	8003e3e <_svfprintf_r+0xefe>
 8003ddc:	08005f64 	.word	0x08005f64
 8003de0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003de2:	9806      	ldr	r0, [sp, #24]
 8003de4:	1a2c      	subs	r4, r5, r0
 8003de6:	2c00      	cmp	r4, #0
 8003de8:	ddec      	ble.n	8003dc4 <_svfprintf_r+0xe84>
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <_svfprintf_r+0xf38>)
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	2c10      	cmp	r4, #16
 8003df0:	dd14      	ble.n	8003e1c <_svfprintf_r+0xedc>
 8003df2:	2310      	movs	r3, #16
 8003df4:	6073      	str	r3, [r6, #4]
 8003df6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003df8:	3310      	adds	r3, #16
 8003dfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8003dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dfe:	3301      	adds	r3, #1
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	9322      	str	r3, [sp, #136]	; 0x88
 8003e04:	dc01      	bgt.n	8003e0a <_svfprintf_r+0xeca>
 8003e06:	3608      	adds	r6, #8
 8003e08:	e006      	b.n	8003e18 <_svfprintf_r+0xed8>
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	aa21      	add	r2, sp, #132	; 0x84
 8003e10:	f001 fbca 	bl	80055a8 <__ssprint_r>
 8003e14:	bb28      	cbnz	r0, 8003e62 <_svfprintf_r+0xf22>
 8003e16:	ae2e      	add	r6, sp, #184	; 0xb8
 8003e18:	3c10      	subs	r4, #16
 8003e1a:	e7e6      	b.n	8003dea <_svfprintf_r+0xeaa>
 8003e1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e1e:	6074      	str	r4, [r6, #4]
 8003e20:	441c      	add	r4, r3
 8003e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e24:	9423      	str	r4, [sp, #140]	; 0x8c
 8003e26:	3301      	adds	r3, #1
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	9322      	str	r3, [sp, #136]	; 0x88
 8003e2c:	ddca      	ble.n	8003dc4 <_svfprintf_r+0xe84>
 8003e2e:	4650      	mov	r0, sl
 8003e30:	4659      	mov	r1, fp
 8003e32:	aa21      	add	r2, sp, #132	; 0x84
 8003e34:	f001 fbb8 	bl	80055a8 <__ssprint_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d0c3      	beq.n	8003dc4 <_svfprintf_r+0xe84>
 8003e3c:	e011      	b.n	8003e62 <_svfprintf_r+0xf22>
 8003e3e:	4650      	mov	r0, sl
 8003e40:	4659      	mov	r1, fp
 8003e42:	aa21      	add	r2, sp, #132	; 0x84
 8003e44:	f001 fbb0 	bl	80055a8 <__ssprint_r>
 8003e48:	b958      	cbnz	r0, 8003e62 <_svfprintf_r+0xf22>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	9322      	str	r3, [sp, #136]	; 0x88
 8003e4e:	ae2e      	add	r6, sp, #184	; 0xb8
 8003e50:	f7ff b8ab 	b.w	8002faa <_svfprintf_r+0x6a>
 8003e54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e56:	b123      	cbz	r3, 8003e62 <_svfprintf_r+0xf22>
 8003e58:	4650      	mov	r0, sl
 8003e5a:	4659      	mov	r1, fp
 8003e5c:	aa21      	add	r2, sp, #132	; 0x84
 8003e5e:	f001 fba3 	bl	80055a8 <__ssprint_r>
 8003e62:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003e66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003e68:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e6c:	bf18      	it	ne
 8003e6e:	f04f 30ff 	movne.w	r0, #4294967295
 8003e72:	b03f      	add	sp, #252	; 0xfc
 8003e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e78:	08005fa6 	.word	0x08005fa6
 8003e7c:	f3af 8000 	nop.w

08003e80 <quorem>:
 8003e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e84:	6903      	ldr	r3, [r0, #16]
 8003e86:	690c      	ldr	r4, [r1, #16]
 8003e88:	42a3      	cmp	r3, r4
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	f2c0 8081 	blt.w	8003f92 <quorem+0x112>
 8003e90:	3c01      	subs	r4, #1
 8003e92:	f101 0714 	add.w	r7, r1, #20
 8003e96:	00a2      	lsls	r2, r4, #2
 8003e98:	f100 0514 	add.w	r5, r0, #20
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	9200      	str	r2, [sp, #0]
 8003ea0:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8003ea4:	442a      	add	r2, r5
 8003ea6:	9201      	str	r2, [sp, #4]
 8003ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eac:	3601      	adds	r6, #1
 8003eae:	fbb2 f6f6 	udiv	r6, r2, r6
 8003eb2:	44b9      	add	r9, r7
 8003eb4:	2e00      	cmp	r6, #0
 8003eb6:	d03a      	beq.n	8003f2e <quorem+0xae>
 8003eb8:	f04f 0e00 	mov.w	lr, #0
 8003ebc:	463a      	mov	r2, r7
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	46f3      	mov	fp, lr
 8003ec2:	f852 cb04 	ldr.w	ip, [r2], #4
 8003ec6:	6803      	ldr	r3, [r0, #0]
 8003ec8:	fa1f fa8c 	uxth.w	sl, ip
 8003ecc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003ed0:	fb0a ea06 	mla	sl, sl, r6, lr
 8003ed4:	fb0c fc06 	mul.w	ip, ip, r6
 8003ed8:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
 8003edc:	fa1f fa8a 	uxth.w	sl, sl
 8003ee0:	ebca 0a0b 	rsb	sl, sl, fp
 8003ee4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8003ee8:	fa1f fc8c 	uxth.w	ip, ip
 8003eec:	fa1a fa83 	uxtah	sl, sl, r3
 8003ef0:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
 8003ef4:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
 8003ef8:	fa1f fa8a 	uxth.w	sl, sl
 8003efc:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
 8003f00:	454a      	cmp	r2, r9
 8003f02:	ea4f 4b2c 	mov.w	fp, ip, asr #16
 8003f06:	f840 ab04 	str.w	sl, [r0], #4
 8003f0a:	d9da      	bls.n	8003ec2 <quorem+0x42>
 8003f0c:	9a00      	ldr	r2, [sp, #0]
 8003f0e:	58ab      	ldr	r3, [r5, r2]
 8003f10:	b96b      	cbnz	r3, 8003f2e <quorem+0xae>
 8003f12:	9a01      	ldr	r2, [sp, #4]
 8003f14:	1f13      	subs	r3, r2, #4
 8003f16:	42ab      	cmp	r3, r5
 8003f18:	461a      	mov	r2, r3
 8003f1a:	d802      	bhi.n	8003f22 <quorem+0xa2>
 8003f1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f20:	e005      	b.n	8003f2e <quorem+0xae>
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	3b04      	subs	r3, #4
 8003f26:	2a00      	cmp	r2, #0
 8003f28:	d1f8      	bne.n	8003f1c <quorem+0x9c>
 8003f2a:	3c01      	subs	r4, #1
 8003f2c:	e7f3      	b.n	8003f16 <quorem+0x96>
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f001 fa3b 	bl	80053aa <__mcmp>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	db2a      	blt.n	8003f8e <quorem+0x10e>
 8003f38:	3601      	adds	r6, #1
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f857 cb04 	ldr.w	ip, [r7], #4
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	fa1f f18c 	uxth.w	r1, ip
 8003f48:	1a41      	subs	r1, r0, r1
 8003f4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003f4e:	fa11 f182 	uxtah	r1, r1, r2
 8003f52:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
 8003f56:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8003f5a:	b289      	uxth	r1, r1
 8003f5c:	1410      	asrs	r0, r2, #16
 8003f5e:	454f      	cmp	r7, r9
 8003f60:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8003f64:	f843 2b04 	str.w	r2, [r3], #4
 8003f68:	d9e9      	bls.n	8003f3e <quorem+0xbe>
 8003f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f72:	b962      	cbnz	r2, 8003f8e <quorem+0x10e>
 8003f74:	3b04      	subs	r3, #4
 8003f76:	42ab      	cmp	r3, r5
 8003f78:	461a      	mov	r2, r3
 8003f7a:	d802      	bhi.n	8003f82 <quorem+0x102>
 8003f7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003f80:	e005      	b.n	8003f8e <quorem+0x10e>
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	3b04      	subs	r3, #4
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d1f8      	bne.n	8003f7c <quorem+0xfc>
 8003f8a:	3c01      	subs	r4, #1
 8003f8c:	e7f3      	b.n	8003f76 <quorem+0xf6>
 8003f8e:	4630      	mov	r0, r6
 8003f90:	e000      	b.n	8003f94 <quorem+0x114>
 8003f92:	2000      	movs	r0, #0
 8003f94:	b003      	add	sp, #12
 8003f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9a:	0000      	movs	r0, r0
 8003f9c:	0000      	movs	r0, r0
	...

08003fa0 <_dtoa_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fa6:	b09b      	sub	sp, #108	; 0x6c
 8003fa8:	4682      	mov	sl, r0
 8003faa:	910d      	str	r1, [sp, #52]	; 0x34
 8003fac:	920e      	str	r2, [sp, #56]	; 0x38
 8003fae:	9314      	str	r3, [sp, #80]	; 0x50
 8003fb0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8003fb2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003fb6:	b945      	cbnz	r5, 8003fca <_dtoa_r+0x2a>
 8003fb8:	2010      	movs	r0, #16
 8003fba:	f000 fdad 	bl	8004b18 <malloc>
 8003fbe:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8003fc2:	6045      	str	r5, [r0, #4]
 8003fc4:	6085      	str	r5, [r0, #8]
 8003fc6:	6005      	str	r5, [r0, #0]
 8003fc8:	60c5      	str	r5, [r0, #12]
 8003fca:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	b161      	cbz	r1, 8003fec <_dtoa_r+0x4c>
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	604b      	str	r3, [r1, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	608b      	str	r3, [r1, #8]
 8003fde:	4650      	mov	r0, sl
 8003fe0:	f001 f803 	bl	8004fea <_Bfree>
 8003fe4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	9903      	ldr	r1, [sp, #12]
 8003fee:	2900      	cmp	r1, #0
 8003ff0:	da05      	bge.n	8003ffe <_dtoa_r+0x5e>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	9203      	str	r2, [sp, #12]
 8003ffc:	e001      	b.n	8004002 <_dtoa_r+0x62>
 8003ffe:	2300      	movs	r3, #0
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	9c03      	ldr	r4, [sp, #12]
 8004004:	4a9a      	ldr	r2, [pc, #616]	; (8004270 <_dtoa_r+0x2d0>)
 8004006:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800400a:	0d1b      	lsrs	r3, r3, #20
 800400c:	051b      	lsls	r3, r3, #20
 800400e:	4293      	cmp	r3, r2
 8004010:	d11d      	bne.n	800404e <_dtoa_r+0xae>
 8004012:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004014:	9902      	ldr	r1, [sp, #8]
 8004016:	f242 730f 	movw	r3, #9999	; 0x270f
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	b941      	cbnz	r1, 8004030 <_dtoa_r+0x90>
 800401e:	4b95      	ldr	r3, [pc, #596]	; (8004274 <_dtoa_r+0x2d4>)
 8004020:	4a95      	ldr	r2, [pc, #596]	; (8004278 <_dtoa_r+0x2d8>)
 8004022:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8004026:	2800      	cmp	r0, #0
 8004028:	bf0c      	ite	eq
 800402a:	4610      	moveq	r0, r2
 800402c:	4618      	movne	r0, r3
 800402e:	e000      	b.n	8004032 <_dtoa_r+0x92>
 8004030:	4890      	ldr	r0, [pc, #576]	; (8004274 <_dtoa_r+0x2d4>)
 8004032:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004034:	2f00      	cmp	r7, #0
 8004036:	f000 8565 	beq.w	8004b04 <_dtoa_r+0xb64>
 800403a:	78c3      	ldrb	r3, [r0, #3]
 800403c:	b113      	cbz	r3, 8004044 <_dtoa_r+0xa4>
 800403e:	f100 0308 	add.w	r3, r0, #8
 8004042:	e000      	b.n	8004046 <_dtoa_r+0xa6>
 8004044:	1cc3      	adds	r3, r0, #3
 8004046:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004048:	603b      	str	r3, [r7, #0]
 800404a:	f000 bd5b 	b.w	8004b04 <_dtoa_r+0xb64>
 800404e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	4640      	mov	r0, r8
 8004056:	4649      	mov	r1, r9
 8004058:	2300      	movs	r3, #0
 800405a:	f7fc fcf5 	bl	8000a48 <__aeabi_dcmpeq>
 800405e:	4605      	mov	r5, r0
 8004060:	b158      	cbz	r0, 800407a <_dtoa_r+0xda>
 8004062:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004064:	2301      	movs	r3, #1
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800406a:	2f00      	cmp	r7, #0
 800406c:	f000 8547 	beq.w	8004afe <_dtoa_r+0xb5e>
 8004070:	4882      	ldr	r0, [pc, #520]	; (800427c <_dtoa_r+0x2dc>)
 8004072:	6038      	str	r0, [r7, #0]
 8004074:	3801      	subs	r0, #1
 8004076:	f000 bd45 	b.w	8004b04 <_dtoa_r+0xb64>
 800407a:	4650      	mov	r0, sl
 800407c:	ec49 8b10 	vmov	d0, r8, r9
 8004080:	a919      	add	r1, sp, #100	; 0x64
 8004082:	aa18      	add	r2, sp, #96	; 0x60
 8004084:	f001 fa0c 	bl	80054a0 <__d2b>
 8004088:	f3c4 560a 	ubfx	r6, r4, #20, #11
 800408c:	4683      	mov	fp, r0
 800408e:	b156      	cbz	r6, 80040a6 <_dtoa_r+0x106>
 8004090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004094:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004098:	4640      	mov	r0, r8
 800409a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800409e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80040a2:	9515      	str	r5, [sp, #84]	; 0x54
 80040a4:	e01c      	b.n	80040e0 <_dtoa_r+0x140>
 80040a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040a8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80040aa:	441e      	add	r6, r3
 80040ac:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80040b0:	429e      	cmp	r6, r3
 80040b2:	db09      	blt.n	80040c8 <_dtoa_r+0x128>
 80040b4:	9902      	ldr	r1, [sp, #8]
 80040b6:	331f      	adds	r3, #31
 80040b8:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80040bc:	1b9b      	subs	r3, r3, r6
 80040be:	fa21 f000 	lsr.w	r0, r1, r0
 80040c2:	409c      	lsls	r4, r3
 80040c4:	4320      	orrs	r0, r4
 80040c6:	e004      	b.n	80040d2 <_dtoa_r+0x132>
 80040c8:	486d      	ldr	r0, [pc, #436]	; (8004280 <_dtoa_r+0x2e0>)
 80040ca:	9a02      	ldr	r2, [sp, #8]
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	fa02 f000 	lsl.w	r0, r2, r0
 80040d2:	f7fc f9db 	bl	800048c <__aeabi_ui2d>
 80040d6:	2701      	movs	r7, #1
 80040d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80040dc:	3e01      	subs	r6, #1
 80040de:	9715      	str	r7, [sp, #84]	; 0x54
 80040e0:	2200      	movs	r2, #0
 80040e2:	4b68      	ldr	r3, [pc, #416]	; (8004284 <_dtoa_r+0x2e4>)
 80040e4:	f7fc f894 	bl	8000210 <__aeabi_dsub>
 80040e8:	a35b      	add	r3, pc, #364	; (adr r3, 8004258 <_dtoa_r+0x2b8>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc fa43 	bl	8000578 <__aeabi_dmul>
 80040f2:	a35b      	add	r3, pc, #364	; (adr r3, 8004260 <_dtoa_r+0x2c0>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc f88c 	bl	8000214 <__adddf3>
 80040fc:	4604      	mov	r4, r0
 80040fe:	4630      	mov	r0, r6
 8004100:	460d      	mov	r5, r1
 8004102:	f7fc f9d3 	bl	80004ac <__aeabi_i2d>
 8004106:	a358      	add	r3, pc, #352	; (adr r3, 8004268 <_dtoa_r+0x2c8>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fa34 	bl	8000578 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc f87c 	bl	8000214 <__adddf3>
 800411c:	4604      	mov	r4, r0
 800411e:	460d      	mov	r5, r1
 8004120:	f7fc fcc4 	bl	8000aac <__aeabi_d2iz>
 8004124:	4629      	mov	r1, r5
 8004126:	4681      	mov	r9, r0
 8004128:	2200      	movs	r2, #0
 800412a:	4620      	mov	r0, r4
 800412c:	2300      	movs	r3, #0
 800412e:	f7fc fc95 	bl	8000a5c <__aeabi_dcmplt>
 8004132:	b158      	cbz	r0, 800414c <_dtoa_r+0x1ac>
 8004134:	4648      	mov	r0, r9
 8004136:	f7fc f9b9 	bl	80004ac <__aeabi_i2d>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc fc81 	bl	8000a48 <__aeabi_dcmpeq>
 8004146:	b908      	cbnz	r0, 800414c <_dtoa_r+0x1ac>
 8004148:	f109 39ff 	add.w	r9, r9, #4294967295
 800414c:	f1b9 0f16 	cmp.w	r9, #22
 8004150:	d80d      	bhi.n	800416e <_dtoa_r+0x1ce>
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <_dtoa_r+0x2e8>)
 8004154:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004160:	f7fc fc9a 	bl	8000a98 <__aeabi_dcmpgt>
 8004164:	b130      	cbz	r0, 8004174 <_dtoa_r+0x1d4>
 8004166:	f109 39ff 	add.w	r9, r9, #4294967295
 800416a:	2700      	movs	r7, #0
 800416c:	e000      	b.n	8004170 <_dtoa_r+0x1d0>
 800416e:	2701      	movs	r7, #1
 8004170:	9711      	str	r7, [sp, #68]	; 0x44
 8004172:	e000      	b.n	8004176 <_dtoa_r+0x1d6>
 8004174:	9011      	str	r0, [sp, #68]	; 0x44
 8004176:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004178:	1b9e      	subs	r6, r3, r6
 800417a:	3e01      	subs	r6, #1
 800417c:	9606      	str	r6, [sp, #24]
 800417e:	d504      	bpl.n	800418a <_dtoa_r+0x1ea>
 8004180:	4277      	negs	r7, r6
 8004182:	9705      	str	r7, [sp, #20]
 8004184:	2700      	movs	r7, #0
 8004186:	9706      	str	r7, [sp, #24]
 8004188:	e001      	b.n	800418e <_dtoa_r+0x1ee>
 800418a:	2700      	movs	r7, #0
 800418c:	9705      	str	r7, [sp, #20]
 800418e:	f1b9 0f00 	cmp.w	r9, #0
 8004192:	db07      	blt.n	80041a4 <_dtoa_r+0x204>
 8004194:	9f06      	ldr	r7, [sp, #24]
 8004196:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800419a:	444f      	add	r7, r9
 800419c:	9706      	str	r7, [sp, #24]
 800419e:	2700      	movs	r7, #0
 80041a0:	970b      	str	r7, [sp, #44]	; 0x2c
 80041a2:	e008      	b.n	80041b6 <_dtoa_r+0x216>
 80041a4:	9f05      	ldr	r7, [sp, #20]
 80041a6:	ebc9 0707 	rsb	r7, r9, r7
 80041aa:	9705      	str	r7, [sp, #20]
 80041ac:	f1c9 0700 	rsb	r7, r9, #0
 80041b0:	970b      	str	r7, [sp, #44]	; 0x2c
 80041b2:	2700      	movs	r7, #0
 80041b4:	9710      	str	r7, [sp, #64]	; 0x40
 80041b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80041b8:	2f09      	cmp	r7, #9
 80041ba:	d828      	bhi.n	800420e <_dtoa_r+0x26e>
 80041bc:	2f05      	cmp	r7, #5
 80041be:	bfc4      	itt	gt
 80041c0:	3f04      	subgt	r7, #4
 80041c2:	970d      	strgt	r7, [sp, #52]	; 0x34
 80041c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80041c6:	f1a7 0302 	sub.w	r3, r7, #2
 80041ca:	bfcc      	ite	gt
 80041cc:	2500      	movgt	r5, #0
 80041ce:	2501      	movle	r5, #1
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d821      	bhi.n	8004218 <_dtoa_r+0x278>
 80041d4:	e8df f003 	tbb	[pc, r3]
 80041d8:	04020f06 	.word	0x04020f06
 80041dc:	2701      	movs	r7, #1
 80041de:	e002      	b.n	80041e6 <_dtoa_r+0x246>
 80041e0:	2701      	movs	r7, #1
 80041e2:	e009      	b.n	80041f8 <_dtoa_r+0x258>
 80041e4:	2700      	movs	r7, #0
 80041e6:	970c      	str	r7, [sp, #48]	; 0x30
 80041e8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	dd1e      	ble.n	800422c <_dtoa_r+0x28c>
 80041ee:	970a      	str	r7, [sp, #40]	; 0x28
 80041f0:	9704      	str	r7, [sp, #16]
 80041f2:	463b      	mov	r3, r7
 80041f4:	e01f      	b.n	8004236 <_dtoa_r+0x296>
 80041f6:	2700      	movs	r7, #0
 80041f8:	970c      	str	r7, [sp, #48]	; 0x30
 80041fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80041fc:	444f      	add	r7, r9
 80041fe:	970a      	str	r7, [sp, #40]	; 0x28
 8004200:	3701      	adds	r7, #1
 8004202:	463b      	mov	r3, r7
 8004204:	9704      	str	r7, [sp, #16]
 8004206:	2b01      	cmp	r3, #1
 8004208:	bfb8      	it	lt
 800420a:	2301      	movlt	r3, #1
 800420c:	e013      	b.n	8004236 <_dtoa_r+0x296>
 800420e:	2501      	movs	r5, #1
 8004210:	2700      	movs	r7, #0
 8004212:	970d      	str	r7, [sp, #52]	; 0x34
 8004214:	950c      	str	r5, [sp, #48]	; 0x30
 8004216:	e001      	b.n	800421c <_dtoa_r+0x27c>
 8004218:	2701      	movs	r7, #1
 800421a:	970c      	str	r7, [sp, #48]	; 0x30
 800421c:	f04f 37ff 	mov.w	r7, #4294967295
 8004220:	970a      	str	r7, [sp, #40]	; 0x28
 8004222:	9704      	str	r7, [sp, #16]
 8004224:	2700      	movs	r7, #0
 8004226:	2312      	movs	r3, #18
 8004228:	970e      	str	r7, [sp, #56]	; 0x38
 800422a:	e004      	b.n	8004236 <_dtoa_r+0x296>
 800422c:	2701      	movs	r7, #1
 800422e:	970a      	str	r7, [sp, #40]	; 0x28
 8004230:	9704      	str	r7, [sp, #16]
 8004232:	463b      	mov	r3, r7
 8004234:	970e      	str	r7, [sp, #56]	; 0x38
 8004236:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800423a:	2200      	movs	r2, #0
 800423c:	6062      	str	r2, [r4, #4]
 800423e:	2104      	movs	r1, #4
 8004240:	f101 0214 	add.w	r2, r1, #20
 8004244:	429a      	cmp	r2, r3
 8004246:	d821      	bhi.n	800428c <_dtoa_r+0x2ec>
 8004248:	6862      	ldr	r2, [r4, #4]
 800424a:	3201      	adds	r2, #1
 800424c:	6062      	str	r2, [r4, #4]
 800424e:	0049      	lsls	r1, r1, #1
 8004250:	e7f6      	b.n	8004240 <_dtoa_r+0x2a0>
 8004252:	bf00      	nop
 8004254:	f3af 8000 	nop.w
 8004258:	636f4361 	.word	0x636f4361
 800425c:	3fd287a7 	.word	0x3fd287a7
 8004260:	8b60c8b3 	.word	0x8b60c8b3
 8004264:	3fc68a28 	.word	0x3fc68a28
 8004268:	509f79fb 	.word	0x509f79fb
 800426c:	3fd34413 	.word	0x3fd34413
 8004270:	7ff00000 	.word	0x7ff00000
 8004274:	08005fbf 	.word	0x08005fbf
 8004278:	08005fb6 	.word	0x08005fb6
 800427c:	08005eff 	.word	0x08005eff
 8004280:	fffffbee 	.word	0xfffffbee
 8004284:	3ff80000 	.word	0x3ff80000
 8004288:	08005fd0 	.word	0x08005fd0
 800428c:	4650      	mov	r0, sl
 800428e:	6861      	ldr	r1, [r4, #4]
 8004290:	f000 fe76 	bl	8004f80 <_Balloc>
 8004294:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004298:	9f04      	ldr	r7, [sp, #16]
 800429a:	6020      	str	r0, [r4, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	9307      	str	r3, [sp, #28]
 80042a0:	2f0e      	cmp	r7, #14
 80042a2:	f200 8169 	bhi.w	8004578 <_dtoa_r+0x5d8>
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	f000 8166 	beq.w	8004578 <_dtoa_r+0x5d8>
 80042ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042b0:	f1b9 0f00 	cmp.w	r9, #0
 80042b4:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80042b8:	dd31      	ble.n	800431e <_dtoa_r+0x37e>
 80042ba:	4a80      	ldr	r2, [pc, #512]	; (80044bc <_dtoa_r+0x51c>)
 80042bc:	f009 030f 	and.w	r3, r9, #15
 80042c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80042c4:	ed93 7b00 	vldr	d7, [r3]
 80042c8:	ea4f 1429 	mov.w	r4, r9, asr #4
 80042cc:	06e0      	lsls	r0, r4, #27
 80042ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80042d2:	d50c      	bpl.n	80042ee <_dtoa_r+0x34e>
 80042d4:	4b7a      	ldr	r3, [pc, #488]	; (80044c0 <_dtoa_r+0x520>)
 80042d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80042da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042de:	f7fc fa75 	bl	80007cc <__aeabi_ddiv>
 80042e2:	f004 040f 	and.w	r4, r4, #15
 80042e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ea:	2703      	movs	r7, #3
 80042ec:	e000      	b.n	80042f0 <_dtoa_r+0x350>
 80042ee:	2702      	movs	r7, #2
 80042f0:	4d73      	ldr	r5, [pc, #460]	; (80044c0 <_dtoa_r+0x520>)
 80042f2:	b16c      	cbz	r4, 8004310 <_dtoa_r+0x370>
 80042f4:	07e1      	lsls	r1, r4, #31
 80042f6:	d508      	bpl.n	800430a <_dtoa_r+0x36a>
 80042f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004300:	f7fc f93a 	bl	8000578 <__aeabi_dmul>
 8004304:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004308:	3701      	adds	r7, #1
 800430a:	1064      	asrs	r4, r4, #1
 800430c:	3508      	adds	r5, #8
 800430e:	e7f0      	b.n	80042f2 <_dtoa_r+0x352>
 8004310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004314:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004318:	f7fc fa58 	bl	80007cc <__aeabi_ddiv>
 800431c:	e01b      	b.n	8004356 <_dtoa_r+0x3b6>
 800431e:	f1c9 0400 	rsb	r4, r9, #0
 8004322:	b1dc      	cbz	r4, 800435c <_dtoa_r+0x3bc>
 8004324:	4b65      	ldr	r3, [pc, #404]	; (80044bc <_dtoa_r+0x51c>)
 8004326:	4d66      	ldr	r5, [pc, #408]	; (80044c0 <_dtoa_r+0x520>)
 8004328:	f004 020f 	and.w	r2, r4, #15
 800432c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004330:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc f91e 	bl	8000578 <__aeabi_dmul>
 800433c:	1124      	asrs	r4, r4, #4
 800433e:	2702      	movs	r7, #2
 8004340:	b14c      	cbz	r4, 8004356 <_dtoa_r+0x3b6>
 8004342:	07e2      	lsls	r2, r4, #31
 8004344:	d504      	bpl.n	8004350 <_dtoa_r+0x3b0>
 8004346:	e9d5 2300 	ldrd	r2, r3, [r5]
 800434a:	3701      	adds	r7, #1
 800434c:	f7fc f914 	bl	8000578 <__aeabi_dmul>
 8004350:	1064      	asrs	r4, r4, #1
 8004352:	3508      	adds	r5, #8
 8004354:	e7f4      	b.n	8004340 <_dtoa_r+0x3a0>
 8004356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800435a:	e000      	b.n	800435e <_dtoa_r+0x3be>
 800435c:	2702      	movs	r7, #2
 800435e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004360:	b1e1      	cbz	r1, 800439c <_dtoa_r+0x3fc>
 8004362:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	4620      	mov	r0, r4
 800436a:	4629      	mov	r1, r5
 800436c:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <_dtoa_r+0x524>)
 800436e:	f7fc fb75 	bl	8000a5c <__aeabi_dcmplt>
 8004372:	b1c0      	cbz	r0, 80043a6 <_dtoa_r+0x406>
 8004374:	9a04      	ldr	r2, [sp, #16]
 8004376:	b1da      	cbz	r2, 80043b0 <_dtoa_r+0x410>
 8004378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	f340 80f8 	ble.w	8004570 <_dtoa_r+0x5d0>
 8004380:	f109 31ff 	add.w	r1, r9, #4294967295
 8004384:	910f      	str	r1, [sp, #60]	; 0x3c
 8004386:	2200      	movs	r2, #0
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	4b4e      	ldr	r3, [pc, #312]	; (80044c8 <_dtoa_r+0x528>)
 800438e:	f7fc f8f3 	bl	8000578 <__aeabi_dmul>
 8004392:	3701      	adds	r7, #1
 8004394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800439a:	e00c      	b.n	80043b6 <_dtoa_r+0x416>
 800439c:	9b04      	ldr	r3, [sp, #16]
 800439e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80043a2:	9308      	str	r3, [sp, #32]
 80043a4:	e008      	b.n	80043b8 <_dtoa_r+0x418>
 80043a6:	9904      	ldr	r1, [sp, #16]
 80043a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80043ac:	9108      	str	r1, [sp, #32]
 80043ae:	e003      	b.n	80043b8 <_dtoa_r+0x418>
 80043b0:	9a04      	ldr	r2, [sp, #16]
 80043b2:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80043b6:	9208      	str	r2, [sp, #32]
 80043b8:	4638      	mov	r0, r7
 80043ba:	f7fc f877 	bl	80004ac <__aeabi_i2d>
 80043be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043c2:	f7fc f8d9 	bl	8000578 <__aeabi_dmul>
 80043c6:	2200      	movs	r2, #0
 80043c8:	4b40      	ldr	r3, [pc, #256]	; (80044cc <_dtoa_r+0x52c>)
 80043ca:	f7fb ff23 	bl	8000214 <__adddf3>
 80043ce:	9f08      	ldr	r7, [sp, #32]
 80043d0:	4604      	mov	r4, r0
 80043d2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80043d6:	b9cf      	cbnz	r7, 800440c <_dtoa_r+0x46c>
 80043d8:	2200      	movs	r2, #0
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <_dtoa_r+0x530>)
 80043dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043e0:	f7fb ff16 	bl	8000210 <__aeabi_dsub>
 80043e4:	4622      	mov	r2, r4
 80043e6:	462b      	mov	r3, r5
 80043e8:	4606      	mov	r6, r0
 80043ea:	460f      	mov	r7, r1
 80043ec:	f7fc fb54 	bl	8000a98 <__aeabi_dcmpgt>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	f040 824b 	bne.w	800488c <_dtoa_r+0x8ec>
 80043f6:	4622      	mov	r2, r4
 80043f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80043fc:	4630      	mov	r0, r6
 80043fe:	4639      	mov	r1, r7
 8004400:	f7fc fb2c 	bl	8000a5c <__aeabi_dcmplt>
 8004404:	2800      	cmp	r0, #0
 8004406:	f040 8237 	bne.w	8004878 <_dtoa_r+0x8d8>
 800440a:	e0b1      	b.n	8004570 <_dtoa_r+0x5d0>
 800440c:	9f08      	ldr	r7, [sp, #32]
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <_dtoa_r+0x51c>)
 8004410:	1e7a      	subs	r2, r7, #1
 8004412:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004418:	2f00      	cmp	r7, #0
 800441a:	d05d      	beq.n	80044d8 <_dtoa_r+0x538>
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	2000      	movs	r0, #0
 8004422:	492c      	ldr	r1, [pc, #176]	; (80044d4 <_dtoa_r+0x534>)
 8004424:	f7fc f9d2 	bl	80007cc <__aeabi_ddiv>
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	f7fb fef0 	bl	8000210 <__aeabi_dsub>
 8004430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004434:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004438:	4604      	mov	r4, r0
 800443a:	460d      	mov	r5, r1
 800443c:	4639      	mov	r1, r7
 800443e:	4630      	mov	r0, r6
 8004440:	f7fc fb34 	bl	8000aac <__aeabi_d2iz>
 8004444:	9000      	str	r0, [sp, #0]
 8004446:	f7fc f831 	bl	80004ac <__aeabi_i2d>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4630      	mov	r0, r6
 8004450:	4639      	mov	r1, r7
 8004452:	f7fb fedd 	bl	8000210 <__aeabi_dsub>
 8004456:	f8dd c000 	ldr.w	ip, [sp]
 800445a:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 800445e:	f808 3b01 	strb.w	r3, [r8], #1
 8004462:	4622      	mov	r2, r4
 8004464:	462b      	mov	r3, r5
 8004466:	4606      	mov	r6, r0
 8004468:	460f      	mov	r7, r1
 800446a:	f7fc faf7 	bl	8000a5c <__aeabi_dcmplt>
 800446e:	2800      	cmp	r0, #0
 8004470:	f040 8333 	bne.w	8004ada <_dtoa_r+0xb3a>
 8004474:	4632      	mov	r2, r6
 8004476:	463b      	mov	r3, r7
 8004478:	2000      	movs	r0, #0
 800447a:	4912      	ldr	r1, [pc, #72]	; (80044c4 <_dtoa_r+0x524>)
 800447c:	f7fb fec8 	bl	8000210 <__aeabi_dsub>
 8004480:	4622      	mov	r2, r4
 8004482:	462b      	mov	r3, r5
 8004484:	f7fc faea 	bl	8000a5c <__aeabi_dcmplt>
 8004488:	2800      	cmp	r0, #0
 800448a:	f040 80d4 	bne.w	8004636 <_dtoa_r+0x696>
 800448e:	9907      	ldr	r1, [sp, #28]
 8004490:	9a08      	ldr	r2, [sp, #32]
 8004492:	ebc1 0308 	rsb	r3, r1, r8
 8004496:	4293      	cmp	r3, r2
 8004498:	da6a      	bge.n	8004570 <_dtoa_r+0x5d0>
 800449a:	4620      	mov	r0, r4
 800449c:	4629      	mov	r1, r5
 800449e:	2200      	movs	r2, #0
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <_dtoa_r+0x528>)
 80044a2:	f7fc f869 	bl	8000578 <__aeabi_dmul>
 80044a6:	2200      	movs	r2, #0
 80044a8:	4604      	mov	r4, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	4630      	mov	r0, r6
 80044ae:	4639      	mov	r1, r7
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_dtoa_r+0x528>)
 80044b2:	f7fc f861 	bl	8000578 <__aeabi_dmul>
 80044b6:	4606      	mov	r6, r0
 80044b8:	460f      	mov	r7, r1
 80044ba:	e7bf      	b.n	800443c <_dtoa_r+0x49c>
 80044bc:	08005fd0 	.word	0x08005fd0
 80044c0:	08006098 	.word	0x08006098
 80044c4:	3ff00000 	.word	0x3ff00000
 80044c8:	40240000 	.word	0x40240000
 80044cc:	401c0000 	.word	0x401c0000
 80044d0:	40140000 	.word	0x40140000
 80044d4:	3fe00000 	.word	0x3fe00000
 80044d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044dc:	4622      	mov	r2, r4
 80044de:	462b      	mov	r3, r5
 80044e0:	f7fc f84a 	bl	8000578 <__aeabi_dmul>
 80044e4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80044e8:	9b08      	ldr	r3, [sp, #32]
 80044ea:	9c07      	ldr	r4, [sp, #28]
 80044ec:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80044f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80044f4:	4498      	add	r8, r3
 80044f6:	4639      	mov	r1, r7
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7fc fad7 	bl	8000aac <__aeabi_d2iz>
 80044fe:	4605      	mov	r5, r0
 8004500:	f7fb ffd4 	bl	80004ac <__aeabi_i2d>
 8004504:	3530      	adds	r5, #48	; 0x30
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4630      	mov	r0, r6
 800450c:	4639      	mov	r1, r7
 800450e:	f7fb fe7f 	bl	8000210 <__aeabi_dsub>
 8004512:	f804 5b01 	strb.w	r5, [r4], #1
 8004516:	4544      	cmp	r4, r8
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	d121      	bne.n	8004562 <_dtoa_r+0x5c2>
 800451e:	2200      	movs	r2, #0
 8004520:	4b87      	ldr	r3, [pc, #540]	; (8004740 <_dtoa_r+0x7a0>)
 8004522:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004526:	f7fb fe75 	bl	8000214 <__adddf3>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4630      	mov	r0, r6
 8004530:	4639      	mov	r1, r7
 8004532:	f7fc fab1 	bl	8000a98 <__aeabi_dcmpgt>
 8004536:	2800      	cmp	r0, #0
 8004538:	d17d      	bne.n	8004636 <_dtoa_r+0x696>
 800453a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800453e:	2000      	movs	r0, #0
 8004540:	497f      	ldr	r1, [pc, #508]	; (8004740 <_dtoa_r+0x7a0>)
 8004542:	f7fb fe65 	bl	8000210 <__aeabi_dsub>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4630      	mov	r0, r6
 800454c:	4639      	mov	r1, r7
 800454e:	f7fc fa85 	bl	8000a5c <__aeabi_dcmplt>
 8004552:	b168      	cbz	r0, 8004570 <_dtoa_r+0x5d0>
 8004554:	46a0      	mov	r8, r4
 8004556:	3c01      	subs	r4, #1
 8004558:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d0f9      	beq.n	8004554 <_dtoa_r+0x5b4>
 8004560:	e2bb      	b.n	8004ada <_dtoa_r+0xb3a>
 8004562:	2200      	movs	r2, #0
 8004564:	4b77      	ldr	r3, [pc, #476]	; (8004744 <_dtoa_r+0x7a4>)
 8004566:	f7fc f807 	bl	8000578 <__aeabi_dmul>
 800456a:	4606      	mov	r6, r0
 800456c:	460f      	mov	r7, r1
 800456e:	e7c2      	b.n	80044f6 <_dtoa_r+0x556>
 8004570:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8004574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800457a:	2b00      	cmp	r3, #0
 800457c:	db7c      	blt.n	8004678 <_dtoa_r+0x6d8>
 800457e:	f1b9 0f0e 	cmp.w	r9, #14
 8004582:	dc79      	bgt.n	8004678 <_dtoa_r+0x6d8>
 8004584:	4b70      	ldr	r3, [pc, #448]	; (8004748 <_dtoa_r+0x7a8>)
 8004586:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004588:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800458c:	2f00      	cmp	r7, #0
 800458e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004592:	da14      	bge.n	80045be <_dtoa_r+0x61e>
 8004594:	9f04      	ldr	r7, [sp, #16]
 8004596:	2f00      	cmp	r7, #0
 8004598:	dc11      	bgt.n	80045be <_dtoa_r+0x61e>
 800459a:	f040 816f 	bne.w	800487c <_dtoa_r+0x8dc>
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	2200      	movs	r2, #0
 80045a4:	4b69      	ldr	r3, [pc, #420]	; (800474c <_dtoa_r+0x7ac>)
 80045a6:	f7fb ffe7 	bl	8000578 <__aeabi_dmul>
 80045aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045ae:	f7fc fa69 	bl	8000a84 <__aeabi_dcmpge>
 80045b2:	9d04      	ldr	r5, [sp, #16]
 80045b4:	462c      	mov	r4, r5
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f040 8162 	bne.w	8004880 <_dtoa_r+0x8e0>
 80045bc:	e16a      	b.n	8004894 <_dtoa_r+0x8f4>
 80045be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	4630      	mov	r0, r6
 80045cc:	4639      	mov	r1, r7
 80045ce:	f7fc f8fd 	bl	80007cc <__aeabi_ddiv>
 80045d2:	f7fc fa6b 	bl	8000aac <__aeabi_d2iz>
 80045d6:	9002      	str	r0, [sp, #8]
 80045d8:	f7fb ff68 	bl	80004ac <__aeabi_i2d>
 80045dc:	4622      	mov	r2, r4
 80045de:	462b      	mov	r3, r5
 80045e0:	f7fb ffca 	bl	8000578 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fb fe10 	bl	8000210 <__aeabi_dsub>
 80045f0:	9f02      	ldr	r7, [sp, #8]
 80045f2:	f107 0630 	add.w	r6, r7, #48	; 0x30
 80045f6:	f808 6b01 	strb.w	r6, [r8], #1
 80045fa:	9f07      	ldr	r7, [sp, #28]
 80045fc:	ebc7 0608 	rsb	r6, r7, r8
 8004600:	9f04      	ldr	r7, [sp, #16]
 8004602:	42be      	cmp	r6, r7
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	d129      	bne.n	800465e <_dtoa_r+0x6be>
 800460a:	f7fb fe03 	bl	8000214 <__adddf3>
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
 8004616:	f7fc fa3f 	bl	8000a98 <__aeabi_dcmpgt>
 800461a:	b970      	cbnz	r0, 800463a <_dtoa_r+0x69a>
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	4622      	mov	r2, r4
 8004622:	462b      	mov	r3, r5
 8004624:	f7fc fa10 	bl	8000a48 <__aeabi_dcmpeq>
 8004628:	2800      	cmp	r0, #0
 800462a:	f000 8258 	beq.w	8004ade <_dtoa_r+0xb3e>
 800462e:	9f02      	ldr	r7, [sp, #8]
 8004630:	07fb      	lsls	r3, r7, #31
 8004632:	d402      	bmi.n	800463a <_dtoa_r+0x69a>
 8004634:	e253      	b.n	8004ade <_dtoa_r+0xb3e>
 8004636:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800463a:	4643      	mov	r3, r8
 800463c:	4698      	mov	r8, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004644:	2a39      	cmp	r2, #57	; 0x39
 8004646:	d106      	bne.n	8004656 <_dtoa_r+0x6b6>
 8004648:	9f07      	ldr	r7, [sp, #28]
 800464a:	429f      	cmp	r7, r3
 800464c:	d1f6      	bne.n	800463c <_dtoa_r+0x69c>
 800464e:	2230      	movs	r2, #48	; 0x30
 8004650:	f109 0901 	add.w	r9, r9, #1
 8004654:	703a      	strb	r2, [r7, #0]
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	3201      	adds	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e23f      	b.n	8004ade <_dtoa_r+0xb3e>
 800465e:	2200      	movs	r2, #0
 8004660:	4b38      	ldr	r3, [pc, #224]	; (8004744 <_dtoa_r+0x7a4>)
 8004662:	f7fb ff89 	bl	8000578 <__aeabi_dmul>
 8004666:	2200      	movs	r2, #0
 8004668:	2300      	movs	r3, #0
 800466a:	4606      	mov	r6, r0
 800466c:	460f      	mov	r7, r1
 800466e:	f7fc f9eb 	bl	8000a48 <__aeabi_dcmpeq>
 8004672:	2800      	cmp	r0, #0
 8004674:	d0a7      	beq.n	80045c6 <_dtoa_r+0x626>
 8004676:	e232      	b.n	8004ade <_dtoa_r+0xb3e>
 8004678:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800467a:	2f00      	cmp	r7, #0
 800467c:	d030      	beq.n	80046e0 <_dtoa_r+0x740>
 800467e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004680:	2f01      	cmp	r7, #1
 8004682:	dc0a      	bgt.n	800469a <_dtoa_r+0x6fa>
 8004684:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004686:	b117      	cbz	r7, 800468e <_dtoa_r+0x6ee>
 8004688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800468c:	e002      	b.n	8004694 <_dtoa_r+0x6f4>
 800468e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004690:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004694:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004696:	9e05      	ldr	r6, [sp, #20]
 8004698:	e016      	b.n	80046c8 <_dtoa_r+0x728>
 800469a:	9f04      	ldr	r7, [sp, #16]
 800469c:	1e7d      	subs	r5, r7, #1
 800469e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80046a0:	42af      	cmp	r7, r5
 80046a2:	db01      	blt.n	80046a8 <_dtoa_r+0x708>
 80046a4:	1b7d      	subs	r5, r7, r5
 80046a6:	e006      	b.n	80046b6 <_dtoa_r+0x716>
 80046a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80046aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80046ac:	1beb      	subs	r3, r5, r7
 80046ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80046b0:	441f      	add	r7, r3
 80046b2:	9710      	str	r7, [sp, #64]	; 0x40
 80046b4:	2500      	movs	r5, #0
 80046b6:	9f04      	ldr	r7, [sp, #16]
 80046b8:	2f00      	cmp	r7, #0
 80046ba:	da03      	bge.n	80046c4 <_dtoa_r+0x724>
 80046bc:	9905      	ldr	r1, [sp, #20]
 80046be:	2300      	movs	r3, #0
 80046c0:	1bce      	subs	r6, r1, r7
 80046c2:	e001      	b.n	80046c8 <_dtoa_r+0x728>
 80046c4:	9e05      	ldr	r6, [sp, #20]
 80046c6:	9b04      	ldr	r3, [sp, #16]
 80046c8:	9f05      	ldr	r7, [sp, #20]
 80046ca:	441f      	add	r7, r3
 80046cc:	9705      	str	r7, [sp, #20]
 80046ce:	9f06      	ldr	r7, [sp, #24]
 80046d0:	4650      	mov	r0, sl
 80046d2:	441f      	add	r7, r3
 80046d4:	2101      	movs	r1, #1
 80046d6:	9706      	str	r7, [sp, #24]
 80046d8:	f000 fd25 	bl	8005126 <__i2b>
 80046dc:	4604      	mov	r4, r0
 80046de:	e002      	b.n	80046e6 <_dtoa_r+0x746>
 80046e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80046e2:	9e05      	ldr	r6, [sp, #20]
 80046e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80046e6:	b16e      	cbz	r6, 8004704 <_dtoa_r+0x764>
 80046e8:	9f06      	ldr	r7, [sp, #24]
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	dd0a      	ble.n	8004704 <_dtoa_r+0x764>
 80046ee:	463b      	mov	r3, r7
 80046f0:	9f05      	ldr	r7, [sp, #20]
 80046f2:	42b3      	cmp	r3, r6
 80046f4:	bfa8      	it	ge
 80046f6:	4633      	movge	r3, r6
 80046f8:	1aff      	subs	r7, r7, r3
 80046fa:	9705      	str	r7, [sp, #20]
 80046fc:	9f06      	ldr	r7, [sp, #24]
 80046fe:	1aff      	subs	r7, r7, r3
 8004700:	1af6      	subs	r6, r6, r3
 8004702:	9706      	str	r7, [sp, #24]
 8004704:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004706:	2f00      	cmp	r7, #0
 8004708:	dd28      	ble.n	800475c <_dtoa_r+0x7bc>
 800470a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800470c:	b307      	cbz	r7, 8004750 <_dtoa_r+0x7b0>
 800470e:	2d00      	cmp	r5, #0
 8004710:	dd10      	ble.n	8004734 <_dtoa_r+0x794>
 8004712:	4621      	mov	r1, r4
 8004714:	462a      	mov	r2, r5
 8004716:	4650      	mov	r0, sl
 8004718:	f000 fda6 	bl	8005268 <__pow5mult>
 800471c:	4604      	mov	r4, r0
 800471e:	465a      	mov	r2, fp
 8004720:	4621      	mov	r1, r4
 8004722:	4650      	mov	r0, sl
 8004724:	f000 fd08 	bl	8005138 <__multiply>
 8004728:	4659      	mov	r1, fp
 800472a:	4607      	mov	r7, r0
 800472c:	4650      	mov	r0, sl
 800472e:	f000 fc5c 	bl	8004fea <_Bfree>
 8004732:	46bb      	mov	fp, r7
 8004734:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004736:	1b7a      	subs	r2, r7, r5
 8004738:	d010      	beq.n	800475c <_dtoa_r+0x7bc>
 800473a:	4650      	mov	r0, sl
 800473c:	4659      	mov	r1, fp
 800473e:	e00a      	b.n	8004756 <_dtoa_r+0x7b6>
 8004740:	3fe00000 	.word	0x3fe00000
 8004744:	40240000 	.word	0x40240000
 8004748:	08005fd0 	.word	0x08005fd0
 800474c:	40140000 	.word	0x40140000
 8004750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004752:	4650      	mov	r0, sl
 8004754:	4659      	mov	r1, fp
 8004756:	f000 fd87 	bl	8005268 <__pow5mult>
 800475a:	4683      	mov	fp, r0
 800475c:	4650      	mov	r0, sl
 800475e:	2101      	movs	r1, #1
 8004760:	f000 fce1 	bl	8005126 <__i2b>
 8004764:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004766:	2f00      	cmp	r7, #0
 8004768:	4605      	mov	r5, r0
 800476a:	dd05      	ble.n	8004778 <_dtoa_r+0x7d8>
 800476c:	4629      	mov	r1, r5
 800476e:	4650      	mov	r0, sl
 8004770:	463a      	mov	r2, r7
 8004772:	f000 fd79 	bl	8005268 <__pow5mult>
 8004776:	4605      	mov	r5, r0
 8004778:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800477a:	2f01      	cmp	r7, #1
 800477c:	dc12      	bgt.n	80047a4 <_dtoa_r+0x804>
 800477e:	9902      	ldr	r1, [sp, #8]
 8004780:	b981      	cbnz	r1, 80047a4 <_dtoa_r+0x804>
 8004782:	9a03      	ldr	r2, [sp, #12]
 8004784:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8004788:	b973      	cbnz	r3, 80047a8 <_dtoa_r+0x808>
 800478a:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 800478e:	0d3f      	lsrs	r7, r7, #20
 8004790:	053f      	lsls	r7, r7, #20
 8004792:	b157      	cbz	r7, 80047aa <_dtoa_r+0x80a>
 8004794:	9f05      	ldr	r7, [sp, #20]
 8004796:	3701      	adds	r7, #1
 8004798:	9705      	str	r7, [sp, #20]
 800479a:	9f06      	ldr	r7, [sp, #24]
 800479c:	3701      	adds	r7, #1
 800479e:	9706      	str	r7, [sp, #24]
 80047a0:	2701      	movs	r7, #1
 80047a2:	e002      	b.n	80047aa <_dtoa_r+0x80a>
 80047a4:	2700      	movs	r7, #0
 80047a6:	e000      	b.n	80047aa <_dtoa_r+0x80a>
 80047a8:	9f02      	ldr	r7, [sp, #8]
 80047aa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80047ac:	b141      	cbz	r1, 80047c0 <_dtoa_r+0x820>
 80047ae:	692b      	ldr	r3, [r5, #16]
 80047b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80047b4:	6918      	ldr	r0, [r3, #16]
 80047b6:	f000 fc69 	bl	800508c <__hi0bits>
 80047ba:	f1c0 0020 	rsb	r0, r0, #32
 80047be:	e000      	b.n	80047c2 <_dtoa_r+0x822>
 80047c0:	2001      	movs	r0, #1
 80047c2:	9b06      	ldr	r3, [sp, #24]
 80047c4:	4403      	add	r3, r0
 80047c6:	f013 031f 	ands.w	r3, r3, #31
 80047ca:	d008      	beq.n	80047de <_dtoa_r+0x83e>
 80047cc:	f1c3 0220 	rsb	r2, r3, #32
 80047d0:	2a04      	cmp	r2, #4
 80047d2:	dd02      	ble.n	80047da <_dtoa_r+0x83a>
 80047d4:	f1c3 031c 	rsb	r3, r3, #28
 80047d8:	e002      	b.n	80047e0 <_dtoa_r+0x840>
 80047da:	d008      	beq.n	80047ee <_dtoa_r+0x84e>
 80047dc:	4613      	mov	r3, r2
 80047de:	331c      	adds	r3, #28
 80047e0:	9a05      	ldr	r2, [sp, #20]
 80047e2:	9906      	ldr	r1, [sp, #24]
 80047e4:	441a      	add	r2, r3
 80047e6:	4419      	add	r1, r3
 80047e8:	9205      	str	r2, [sp, #20]
 80047ea:	441e      	add	r6, r3
 80047ec:	9106      	str	r1, [sp, #24]
 80047ee:	9a05      	ldr	r2, [sp, #20]
 80047f0:	2a00      	cmp	r2, #0
 80047f2:	dd04      	ble.n	80047fe <_dtoa_r+0x85e>
 80047f4:	4659      	mov	r1, fp
 80047f6:	4650      	mov	r0, sl
 80047f8:	f000 fd84 	bl	8005304 <__lshift>
 80047fc:	4683      	mov	fp, r0
 80047fe:	9b06      	ldr	r3, [sp, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	dd05      	ble.n	8004810 <_dtoa_r+0x870>
 8004804:	4629      	mov	r1, r5
 8004806:	4650      	mov	r0, sl
 8004808:	461a      	mov	r2, r3
 800480a:	f000 fd7b 	bl	8005304 <__lshift>
 800480e:	4605      	mov	r5, r0
 8004810:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004812:	b1e1      	cbz	r1, 800484e <_dtoa_r+0x8ae>
 8004814:	4658      	mov	r0, fp
 8004816:	4629      	mov	r1, r5
 8004818:	f000 fdc7 	bl	80053aa <__mcmp>
 800481c:	2800      	cmp	r0, #0
 800481e:	da16      	bge.n	800484e <_dtoa_r+0x8ae>
 8004820:	4659      	mov	r1, fp
 8004822:	220a      	movs	r2, #10
 8004824:	4650      	mov	r0, sl
 8004826:	2300      	movs	r3, #0
 8004828:	f000 fbf6 	bl	8005018 <__multadd>
 800482c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800482e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004832:	4683      	mov	fp, r0
 8004834:	b14a      	cbz	r2, 800484a <_dtoa_r+0x8aa>
 8004836:	4621      	mov	r1, r4
 8004838:	2300      	movs	r3, #0
 800483a:	4650      	mov	r0, sl
 800483c:	220a      	movs	r2, #10
 800483e:	f000 fbeb 	bl	8005018 <__multadd>
 8004842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	4604      	mov	r4, r0
 8004848:	e001      	b.n	800484e <_dtoa_r+0x8ae>
 800484a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800484c:	9104      	str	r1, [sp, #16]
 800484e:	9a04      	ldr	r2, [sp, #16]
 8004850:	2a00      	cmp	r2, #0
 8004852:	dc29      	bgt.n	80048a8 <_dtoa_r+0x908>
 8004854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004856:	2b02      	cmp	r3, #2
 8004858:	dd26      	ble.n	80048a8 <_dtoa_r+0x908>
 800485a:	b98a      	cbnz	r2, 8004880 <_dtoa_r+0x8e0>
 800485c:	4629      	mov	r1, r5
 800485e:	2205      	movs	r2, #5
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	4650      	mov	r0, sl
 8004864:	f000 fbd8 	bl	8005018 <__multadd>
 8004868:	4605      	mov	r5, r0
 800486a:	4629      	mov	r1, r5
 800486c:	4658      	mov	r0, fp
 800486e:	f000 fd9c 	bl	80053aa <__mcmp>
 8004872:	2800      	cmp	r0, #0
 8004874:	dc0e      	bgt.n	8004894 <_dtoa_r+0x8f4>
 8004876:	e003      	b.n	8004880 <_dtoa_r+0x8e0>
 8004878:	9d08      	ldr	r5, [sp, #32]
 800487a:	e000      	b.n	800487e <_dtoa_r+0x8de>
 800487c:	2500      	movs	r5, #0
 800487e:	462c      	mov	r4, r5
 8004880:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004882:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004886:	ea6f 0907 	mvn.w	r9, r7
 800488a:	e00a      	b.n	80048a2 <_dtoa_r+0x902>
 800488c:	9d08      	ldr	r5, [sp, #32]
 800488e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004892:	462c      	mov	r4, r5
 8004894:	9f07      	ldr	r7, [sp, #28]
 8004896:	2331      	movs	r3, #49	; 0x31
 8004898:	f107 0801 	add.w	r8, r7, #1
 800489c:	703b      	strb	r3, [r7, #0]
 800489e:	f109 0901 	add.w	r9, r9, #1
 80048a2:	4627      	mov	r7, r4
 80048a4:	2400      	movs	r4, #0
 80048a6:	e107      	b.n	8004ab8 <_dtoa_r+0xb18>
 80048a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048aa:	2900      	cmp	r1, #0
 80048ac:	f000 80bb 	beq.w	8004a26 <_dtoa_r+0xa86>
 80048b0:	2e00      	cmp	r6, #0
 80048b2:	dd05      	ble.n	80048c0 <_dtoa_r+0x920>
 80048b4:	4621      	mov	r1, r4
 80048b6:	4650      	mov	r0, sl
 80048b8:	4632      	mov	r2, r6
 80048ba:	f000 fd23 	bl	8005304 <__lshift>
 80048be:	4604      	mov	r4, r0
 80048c0:	b19f      	cbz	r7, 80048ea <_dtoa_r+0x94a>
 80048c2:	6861      	ldr	r1, [r4, #4]
 80048c4:	4650      	mov	r0, sl
 80048c6:	f000 fb5b 	bl	8004f80 <_Balloc>
 80048ca:	6922      	ldr	r2, [r4, #16]
 80048cc:	3202      	adds	r2, #2
 80048ce:	4606      	mov	r6, r0
 80048d0:	f104 010c 	add.w	r1, r4, #12
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	300c      	adds	r0, #12
 80048d8:	f000 fb47 	bl	8004f6a <memcpy>
 80048dc:	4650      	mov	r0, sl
 80048de:	4631      	mov	r1, r6
 80048e0:	2201      	movs	r2, #1
 80048e2:	f000 fd0f 	bl	8005304 <__lshift>
 80048e6:	4607      	mov	r7, r0
 80048e8:	e000      	b.n	80048ec <_dtoa_r+0x94c>
 80048ea:	4627      	mov	r7, r4
 80048ec:	9e07      	ldr	r6, [sp, #28]
 80048ee:	4629      	mov	r1, r5
 80048f0:	4658      	mov	r0, fp
 80048f2:	f7ff fac5 	bl	8003e80 <quorem>
 80048f6:	4621      	mov	r1, r4
 80048f8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80048fc:	4680      	mov	r8, r0
 80048fe:	4658      	mov	r0, fp
 8004900:	f8cd c000 	str.w	ip, [sp]
 8004904:	f000 fd51 	bl	80053aa <__mcmp>
 8004908:	463a      	mov	r2, r7
 800490a:	9005      	str	r0, [sp, #20]
 800490c:	4629      	mov	r1, r5
 800490e:	4650      	mov	r0, sl
 8004910:	f000 fd68 	bl	80053e4 <__mdiff>
 8004914:	68c3      	ldr	r3, [r0, #12]
 8004916:	f8dd c000 	ldr.w	ip, [sp]
 800491a:	4602      	mov	r2, r0
 800491c:	b94b      	cbnz	r3, 8004932 <_dtoa_r+0x992>
 800491e:	4611      	mov	r1, r2
 8004920:	4658      	mov	r0, fp
 8004922:	9201      	str	r2, [sp, #4]
 8004924:	f000 fd41 	bl	80053aa <__mcmp>
 8004928:	9a01      	ldr	r2, [sp, #4]
 800492a:	f8dd c000 	ldr.w	ip, [sp]
 800492e:	4603      	mov	r3, r0
 8004930:	e000      	b.n	8004934 <_dtoa_r+0x994>
 8004932:	2301      	movs	r3, #1
 8004934:	4650      	mov	r0, sl
 8004936:	4611      	mov	r1, r2
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	f8cd c000 	str.w	ip, [sp]
 800493e:	f000 fb54 	bl	8004fea <_Bfree>
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	f8dd c000 	ldr.w	ip, [sp]
 8004948:	b963      	cbnz	r3, 8004964 <_dtoa_r+0x9c4>
 800494a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800494c:	b952      	cbnz	r2, 8004964 <_dtoa_r+0x9c4>
 800494e:	9902      	ldr	r1, [sp, #8]
 8004950:	f001 0201 	and.w	r2, r1, #1
 8004954:	b932      	cbnz	r2, 8004964 <_dtoa_r+0x9c4>
 8004956:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800495a:	d035      	beq.n	80049c8 <_dtoa_r+0xa28>
 800495c:	9b05      	ldr	r3, [sp, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	dc24      	bgt.n	80049ac <_dtoa_r+0xa0c>
 8004962:	e025      	b.n	80049b0 <_dtoa_r+0xa10>
 8004964:	9905      	ldr	r1, [sp, #20]
 8004966:	2900      	cmp	r1, #0
 8004968:	da02      	bge.n	8004970 <_dtoa_r+0x9d0>
 800496a:	2b00      	cmp	r3, #0
 800496c:	dc08      	bgt.n	8004980 <_dtoa_r+0x9e0>
 800496e:	e01f      	b.n	80049b0 <_dtoa_r+0xa10>
 8004970:	d123      	bne.n	80049ba <_dtoa_r+0xa1a>
 8004972:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004974:	bb0a      	cbnz	r2, 80049ba <_dtoa_r+0xa1a>
 8004976:	9902      	ldr	r1, [sp, #8]
 8004978:	f001 0201 	and.w	r2, r1, #1
 800497c:	b9ea      	cbnz	r2, 80049ba <_dtoa_r+0xa1a>
 800497e:	e7f4      	b.n	800496a <_dtoa_r+0x9ca>
 8004980:	4659      	mov	r1, fp
 8004982:	2201      	movs	r2, #1
 8004984:	4650      	mov	r0, sl
 8004986:	f8cd c000 	str.w	ip, [sp]
 800498a:	f000 fcbb 	bl	8005304 <__lshift>
 800498e:	4629      	mov	r1, r5
 8004990:	4683      	mov	fp, r0
 8004992:	f000 fd0a 	bl	80053aa <__mcmp>
 8004996:	2800      	cmp	r0, #0
 8004998:	f8dd c000 	ldr.w	ip, [sp]
 800499c:	dc03      	bgt.n	80049a6 <_dtoa_r+0xa06>
 800499e:	d107      	bne.n	80049b0 <_dtoa_r+0xa10>
 80049a0:	f01c 0f01 	tst.w	ip, #1
 80049a4:	d004      	beq.n	80049b0 <_dtoa_r+0xa10>
 80049a6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80049aa:	d00d      	beq.n	80049c8 <_dtoa_r+0xa28>
 80049ac:	f108 0c31 	add.w	ip, r8, #49	; 0x31
 80049b0:	f106 0801 	add.w	r8, r6, #1
 80049b4:	f886 c000 	strb.w	ip, [r6]
 80049b8:	e07e      	b.n	8004ab8 <_dtoa_r+0xb18>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f106 0801 	add.w	r8, r6, #1
 80049c0:	dd09      	ble.n	80049d6 <_dtoa_r+0xa36>
 80049c2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80049c6:	d103      	bne.n	80049d0 <_dtoa_r+0xa30>
 80049c8:	2339      	movs	r3, #57	; 0x39
 80049ca:	7033      	strb	r3, [r6, #0]
 80049cc:	3601      	adds	r6, #1
 80049ce:	e05b      	b.n	8004a88 <_dtoa_r+0xae8>
 80049d0:	f10c 0301 	add.w	r3, ip, #1
 80049d4:	e068      	b.n	8004aa8 <_dtoa_r+0xb08>
 80049d6:	9a07      	ldr	r2, [sp, #28]
 80049d8:	9904      	ldr	r1, [sp, #16]
 80049da:	4646      	mov	r6, r8
 80049dc:	ebc2 0308 	rsb	r3, r2, r8
 80049e0:	428b      	cmp	r3, r1
 80049e2:	f806 cc01 	strb.w	ip, [r6, #-1]
 80049e6:	d03c      	beq.n	8004a62 <_dtoa_r+0xac2>
 80049e8:	4659      	mov	r1, fp
 80049ea:	220a      	movs	r2, #10
 80049ec:	2300      	movs	r3, #0
 80049ee:	4650      	mov	r0, sl
 80049f0:	f000 fb12 	bl	8005018 <__multadd>
 80049f4:	42bc      	cmp	r4, r7
 80049f6:	4683      	mov	fp, r0
 80049f8:	4621      	mov	r1, r4
 80049fa:	4650      	mov	r0, sl
 80049fc:	f04f 020a 	mov.w	r2, #10
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	d104      	bne.n	8004a10 <_dtoa_r+0xa70>
 8004a06:	f000 fb07 	bl	8005018 <__multadd>
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	e76e      	b.n	80048ee <_dtoa_r+0x94e>
 8004a10:	f000 fb02 	bl	8005018 <__multadd>
 8004a14:	4639      	mov	r1, r7
 8004a16:	4604      	mov	r4, r0
 8004a18:	220a      	movs	r2, #10
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f000 fafb 	bl	8005018 <__multadd>
 8004a22:	4607      	mov	r7, r0
 8004a24:	e763      	b.n	80048ee <_dtoa_r+0x94e>
 8004a26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004a28:	4658      	mov	r0, fp
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7ff fa28 	bl	8003e80 <quorem>
 8004a30:	9f07      	ldr	r7, [sp, #28]
 8004a32:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8004a36:	f807 c006 	strb.w	ip, [r7, r6]
 8004a3a:	9f04      	ldr	r7, [sp, #16]
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	42be      	cmp	r6, r7
 8004a40:	db07      	blt.n	8004a52 <_dtoa_r+0xab2>
 8004a42:	9e07      	ldr	r6, [sp, #28]
 8004a44:	2f01      	cmp	r7, #1
 8004a46:	bfac      	ite	ge
 8004a48:	19f6      	addge	r6, r6, r7
 8004a4a:	3601      	addlt	r6, #1
 8004a4c:	4627      	mov	r7, r4
 8004a4e:	2400      	movs	r4, #0
 8004a50:	e007      	b.n	8004a62 <_dtoa_r+0xac2>
 8004a52:	4659      	mov	r1, fp
 8004a54:	4650      	mov	r0, sl
 8004a56:	220a      	movs	r2, #10
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f000 fadd 	bl	8005018 <__multadd>
 8004a5e:	4683      	mov	fp, r0
 8004a60:	e7e2      	b.n	8004a28 <_dtoa_r+0xa88>
 8004a62:	4659      	mov	r1, fp
 8004a64:	2201      	movs	r2, #1
 8004a66:	4650      	mov	r0, sl
 8004a68:	f8cd c000 	str.w	ip, [sp]
 8004a6c:	f000 fc4a 	bl	8005304 <__lshift>
 8004a70:	4629      	mov	r1, r5
 8004a72:	4683      	mov	fp, r0
 8004a74:	f000 fc99 	bl	80053aa <__mcmp>
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f8dd c000 	ldr.w	ip, [sp]
 8004a7e:	dc03      	bgt.n	8004a88 <_dtoa_r+0xae8>
 8004a80:	d114      	bne.n	8004aac <_dtoa_r+0xb0c>
 8004a82:	f01c 0f01 	tst.w	ip, #1
 8004a86:	d011      	beq.n	8004aac <_dtoa_r+0xb0c>
 8004a88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004a8c:	2b39      	cmp	r3, #57	; 0x39
 8004a8e:	46b0      	mov	r8, r6
 8004a90:	f106 36ff 	add.w	r6, r6, #4294967295
 8004a94:	d107      	bne.n	8004aa6 <_dtoa_r+0xb06>
 8004a96:	9907      	ldr	r1, [sp, #28]
 8004a98:	42b1      	cmp	r1, r6
 8004a9a:	d1f5      	bne.n	8004a88 <_dtoa_r+0xae8>
 8004a9c:	2331      	movs	r3, #49	; 0x31
 8004a9e:	f109 0901 	add.w	r9, r9, #1
 8004aa2:	700b      	strb	r3, [r1, #0]
 8004aa4:	e008      	b.n	8004ab8 <_dtoa_r+0xb18>
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	7033      	strb	r3, [r6, #0]
 8004aaa:	e005      	b.n	8004ab8 <_dtoa_r+0xb18>
 8004aac:	46b0      	mov	r8, r6
 8004aae:	3e01      	subs	r6, #1
 8004ab0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d0f9      	beq.n	8004aac <_dtoa_r+0xb0c>
 8004ab8:	4650      	mov	r0, sl
 8004aba:	4629      	mov	r1, r5
 8004abc:	f000 fa95 	bl	8004fea <_Bfree>
 8004ac0:	b16f      	cbz	r7, 8004ade <_dtoa_r+0xb3e>
 8004ac2:	b12c      	cbz	r4, 8004ad0 <_dtoa_r+0xb30>
 8004ac4:	42bc      	cmp	r4, r7
 8004ac6:	d003      	beq.n	8004ad0 <_dtoa_r+0xb30>
 8004ac8:	4650      	mov	r0, sl
 8004aca:	4621      	mov	r1, r4
 8004acc:	f000 fa8d 	bl	8004fea <_Bfree>
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f000 fa89 	bl	8004fea <_Bfree>
 8004ad8:	e001      	b.n	8004ade <_dtoa_r+0xb3e>
 8004ada:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004ade:	4650      	mov	r0, sl
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	f000 fa82 	bl	8004fea <_Bfree>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004aea:	f888 3000 	strb.w	r3, [r8]
 8004aee:	f109 0301 	add.w	r3, r9, #1
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004af6:	b127      	cbz	r7, 8004b02 <_dtoa_r+0xb62>
 8004af8:	f8c7 8000 	str.w	r8, [r7]
 8004afc:	e001      	b.n	8004b02 <_dtoa_r+0xb62>
 8004afe:	4803      	ldr	r0, [pc, #12]	; (8004b0c <_dtoa_r+0xb6c>)
 8004b00:	e000      	b.n	8004b04 <_dtoa_r+0xb64>
 8004b02:	9807      	ldr	r0, [sp, #28]
 8004b04:	b01b      	add	sp, #108	; 0x6c
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08005efe 	.word	0x08005efe

08004b10 <_localeconv_r>:
 8004b10:	4800      	ldr	r0, [pc, #0]	; (8004b14 <_localeconv_r+0x4>)
 8004b12:	4770      	bx	lr
 8004b14:	200000f8 	.word	0x200000f8

08004b18 <malloc>:
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <malloc+0xc>)
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	f000 b803 	b.w	8004b28 <_malloc_r>
 8004b22:	bf00      	nop
 8004b24:	200000f4 	.word	0x200000f4

08004b28 <_malloc_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	f101 040b 	add.w	r4, r1, #11
 8004b30:	2c16      	cmp	r4, #22
 8004b32:	b085      	sub	sp, #20
 8004b34:	4607      	mov	r7, r0
 8004b36:	d903      	bls.n	8004b40 <_malloc_r+0x18>
 8004b38:	f034 0407 	bics.w	r4, r4, #7
 8004b3c:	d501      	bpl.n	8004b42 <_malloc_r+0x1a>
 8004b3e:	e002      	b.n	8004b46 <_malloc_r+0x1e>
 8004b40:	2410      	movs	r4, #16
 8004b42:	428c      	cmp	r4, r1
 8004b44:	d202      	bcs.n	8004b4c <_malloc_r+0x24>
 8004b46:	230c      	movs	r3, #12
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	e1dd      	b.n	8004f08 <_malloc_r+0x3e0>
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f000 fa15 	bl	8004f7c <__malloc_lock>
 8004b52:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004b56:	4d97      	ldr	r5, [pc, #604]	; (8004db4 <_malloc_r+0x28c>)
 8004b58:	d214      	bcs.n	8004b84 <_malloc_r+0x5c>
 8004b5a:	08e2      	lsrs	r2, r4, #3
 8004b5c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8004b60:	68de      	ldr	r6, [r3, #12]
 8004b62:	429e      	cmp	r6, r3
 8004b64:	d106      	bne.n	8004b74 <_malloc_r+0x4c>
 8004b66:	f106 0308 	add.w	r3, r6, #8
 8004b6a:	6976      	ldr	r6, [r6, #20]
 8004b6c:	429e      	cmp	r6, r3
 8004b6e:	bf08      	it	eq
 8004b70:	3202      	addeq	r2, #2
 8004b72:	d043      	beq.n	8004bfc <_malloc_r+0xd4>
 8004b74:	6873      	ldr	r3, [r6, #4]
 8004b76:	68f2      	ldr	r2, [r6, #12]
 8004b78:	68b1      	ldr	r1, [r6, #8]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60ca      	str	r2, [r1, #12]
 8004b80:	6091      	str	r1, [r2, #8]
 8004b82:	e05d      	b.n	8004c40 <_malloc_r+0x118>
 8004b84:	0a62      	lsrs	r2, r4, #9
 8004b86:	d01a      	beq.n	8004bbe <_malloc_r+0x96>
 8004b88:	2a04      	cmp	r2, #4
 8004b8a:	d802      	bhi.n	8004b92 <_malloc_r+0x6a>
 8004b8c:	09a2      	lsrs	r2, r4, #6
 8004b8e:	3238      	adds	r2, #56	; 0x38
 8004b90:	e018      	b.n	8004bc4 <_malloc_r+0x9c>
 8004b92:	2a14      	cmp	r2, #20
 8004b94:	d801      	bhi.n	8004b9a <_malloc_r+0x72>
 8004b96:	325b      	adds	r2, #91	; 0x5b
 8004b98:	e014      	b.n	8004bc4 <_malloc_r+0x9c>
 8004b9a:	2a54      	cmp	r2, #84	; 0x54
 8004b9c:	d802      	bhi.n	8004ba4 <_malloc_r+0x7c>
 8004b9e:	0b22      	lsrs	r2, r4, #12
 8004ba0:	326e      	adds	r2, #110	; 0x6e
 8004ba2:	e00f      	b.n	8004bc4 <_malloc_r+0x9c>
 8004ba4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004ba8:	d802      	bhi.n	8004bb0 <_malloc_r+0x88>
 8004baa:	0be2      	lsrs	r2, r4, #15
 8004bac:	3277      	adds	r2, #119	; 0x77
 8004bae:	e009      	b.n	8004bc4 <_malloc_r+0x9c>
 8004bb0:	f240 5354 	movw	r3, #1364	; 0x554
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d804      	bhi.n	8004bc2 <_malloc_r+0x9a>
 8004bb8:	0ca2      	lsrs	r2, r4, #18
 8004bba:	327c      	adds	r2, #124	; 0x7c
 8004bbc:	e002      	b.n	8004bc4 <_malloc_r+0x9c>
 8004bbe:	223f      	movs	r2, #63	; 0x3f
 8004bc0:	e000      	b.n	8004bc4 <_malloc_r+0x9c>
 8004bc2:	227e      	movs	r2, #126	; 0x7e
 8004bc4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8004bc8:	68de      	ldr	r6, [r3, #12]
 8004bca:	429e      	cmp	r6, r3
 8004bcc:	d015      	beq.n	8004bfa <_malloc_r+0xd2>
 8004bce:	6871      	ldr	r1, [r6, #4]
 8004bd0:	f021 0103 	bic.w	r1, r1, #3
 8004bd4:	1b08      	subs	r0, r1, r4
 8004bd6:	280f      	cmp	r0, #15
 8004bd8:	dd01      	ble.n	8004bde <_malloc_r+0xb6>
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	e00d      	b.n	8004bfa <_malloc_r+0xd2>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	db09      	blt.n	8004bf6 <_malloc_r+0xce>
 8004be2:	68f3      	ldr	r3, [r6, #12]
 8004be4:	68b2      	ldr	r2, [r6, #8]
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	1873      	adds	r3, r6, r1
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	e193      	b.n	8004f1e <_malloc_r+0x3f6>
 8004bf6:	68f6      	ldr	r6, [r6, #12]
 8004bf8:	e7e7      	b.n	8004bca <_malloc_r+0xa2>
 8004bfa:	3201      	adds	r2, #1
 8004bfc:	496d      	ldr	r1, [pc, #436]	; (8004db4 <_malloc_r+0x28c>)
 8004bfe:	692e      	ldr	r6, [r5, #16]
 8004c00:	f101 0008 	add.w	r0, r1, #8
 8004c04:	4286      	cmp	r6, r0
 8004c06:	4686      	mov	lr, r0
 8004c08:	d06d      	beq.n	8004ce6 <_malloc_r+0x1be>
 8004c0a:	6873      	ldr	r3, [r6, #4]
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	ebc4 0c03 	rsb	ip, r4, r3
 8004c14:	f1bc 0f0f 	cmp.w	ip, #15
 8004c18:	dd0d      	ble.n	8004c36 <_malloc_r+0x10e>
 8004c1a:	1933      	adds	r3, r6, r4
 8004c1c:	f04c 0201 	orr.w	r2, ip, #1
 8004c20:	f044 0401 	orr.w	r4, r4, #1
 8004c24:	6074      	str	r4, [r6, #4]
 8004c26:	614b      	str	r3, [r1, #20]
 8004c28:	610b      	str	r3, [r1, #16]
 8004c2a:	60d8      	str	r0, [r3, #12]
 8004c2c:	6098      	str	r0, [r3, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	f843 c00c 	str.w	ip, [r3, ip]
 8004c34:	e173      	b.n	8004f1e <_malloc_r+0x3f6>
 8004c36:	f1bc 0f00 	cmp.w	ip, #0
 8004c3a:	6148      	str	r0, [r1, #20]
 8004c3c:	6108      	str	r0, [r1, #16]
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x11c>
 8004c40:	4433      	add	r3, r6
 8004c42:	e7d3      	b.n	8004bec <_malloc_r+0xc4>
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d211      	bcs.n	8004c6e <_malloc_r+0x146>
 8004c4a:	08db      	lsrs	r3, r3, #3
 8004c4c:	1098      	asrs	r0, r3, #2
 8004c4e:	f04f 0c01 	mov.w	ip, #1
 8004c52:	fa0c fc00 	lsl.w	ip, ip, r0
 8004c56:	6848      	ldr	r0, [r1, #4]
 8004c58:	ea4c 0000 	orr.w	r0, ip, r0
 8004c5c:	6048      	str	r0, [r1, #4]
 8004c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004c62:	688b      	ldr	r3, [r1, #8]
 8004c64:	60b3      	str	r3, [r6, #8]
 8004c66:	60f1      	str	r1, [r6, #12]
 8004c68:	608e      	str	r6, [r1, #8]
 8004c6a:	60de      	str	r6, [r3, #12]
 8004c6c:	e03b      	b.n	8004ce6 <_malloc_r+0x1be>
 8004c6e:	0a58      	lsrs	r0, r3, #9
 8004c70:	2804      	cmp	r0, #4
 8004c72:	d802      	bhi.n	8004c7a <_malloc_r+0x152>
 8004c74:	0998      	lsrs	r0, r3, #6
 8004c76:	3038      	adds	r0, #56	; 0x38
 8004c78:	e015      	b.n	8004ca6 <_malloc_r+0x17e>
 8004c7a:	2814      	cmp	r0, #20
 8004c7c:	d801      	bhi.n	8004c82 <_malloc_r+0x15a>
 8004c7e:	305b      	adds	r0, #91	; 0x5b
 8004c80:	e011      	b.n	8004ca6 <_malloc_r+0x17e>
 8004c82:	2854      	cmp	r0, #84	; 0x54
 8004c84:	d802      	bhi.n	8004c8c <_malloc_r+0x164>
 8004c86:	0b18      	lsrs	r0, r3, #12
 8004c88:	306e      	adds	r0, #110	; 0x6e
 8004c8a:	e00c      	b.n	8004ca6 <_malloc_r+0x17e>
 8004c8c:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8004c90:	d802      	bhi.n	8004c98 <_malloc_r+0x170>
 8004c92:	0bd8      	lsrs	r0, r3, #15
 8004c94:	3077      	adds	r0, #119	; 0x77
 8004c96:	e006      	b.n	8004ca6 <_malloc_r+0x17e>
 8004c98:	f240 5154 	movw	r1, #1364	; 0x554
 8004c9c:	4288      	cmp	r0, r1
 8004c9e:	bf9a      	itte	ls
 8004ca0:	0c98      	lsrls	r0, r3, #18
 8004ca2:	307c      	addls	r0, #124	; 0x7c
 8004ca4:	207e      	movhi	r0, #126	; 0x7e
 8004ca6:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 8004caa:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8004db4 <_malloc_r+0x28c>
 8004cae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8004cb2:	4561      	cmp	r1, ip
 8004cb4:	d10d      	bne.n	8004cd2 <_malloc_r+0x1aa>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	1080      	asrs	r0, r0, #2
 8004cba:	fa03 f000 	lsl.w	r0, r3, r0
 8004cbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004cc2:	4303      	orrs	r3, r0
 8004cc4:	f8c8 3004 	str.w	r3, [r8, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	e008      	b.n	8004cde <_malloc_r+0x1b6>
 8004ccc:	6889      	ldr	r1, [r1, #8]
 8004cce:	4561      	cmp	r1, ip
 8004cd0:	d004      	beq.n	8004cdc <_malloc_r+0x1b4>
 8004cd2:	6848      	ldr	r0, [r1, #4]
 8004cd4:	f020 0003 	bic.w	r0, r0, #3
 8004cd8:	4283      	cmp	r3, r0
 8004cda:	d3f7      	bcc.n	8004ccc <_malloc_r+0x1a4>
 8004cdc:	68cb      	ldr	r3, [r1, #12]
 8004cde:	60f3      	str	r3, [r6, #12]
 8004ce0:	60b1      	str	r1, [r6, #8]
 8004ce2:	609e      	str	r6, [r3, #8]
 8004ce4:	60ce      	str	r6, [r1, #12]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	1093      	asrs	r3, r2, #2
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	6869      	ldr	r1, [r5, #4]
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d861      	bhi.n	8004db8 <_malloc_r+0x290>
 8004cf4:	420b      	tst	r3, r1
 8004cf6:	d106      	bne.n	8004d06 <_malloc_r+0x1de>
 8004cf8:	f022 0203 	bic.w	r2, r2, #3
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	420b      	tst	r3, r1
 8004d00:	f102 0204 	add.w	r2, r2, #4
 8004d04:	d0fa      	beq.n	8004cfc <_malloc_r+0x1d4>
 8004d06:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4694      	mov	ip, r2
 8004d0e:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004d12:	4546      	cmp	r6, r8
 8004d14:	d02d      	beq.n	8004d72 <_malloc_r+0x24a>
 8004d16:	6871      	ldr	r1, [r6, #4]
 8004d18:	f021 0903 	bic.w	r9, r1, #3
 8004d1c:	ebc4 0109 	rsb	r1, r4, r9
 8004d20:	290f      	cmp	r1, #15
 8004d22:	dd13      	ble.n	8004d4c <_malloc_r+0x224>
 8004d24:	1933      	adds	r3, r6, r4
 8004d26:	f044 0401 	orr.w	r4, r4, #1
 8004d2a:	68f2      	ldr	r2, [r6, #12]
 8004d2c:	6074      	str	r4, [r6, #4]
 8004d2e:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8004d32:	60c2      	str	r2, [r0, #12]
 8004d34:	6090      	str	r0, [r2, #8]
 8004d36:	f041 0201 	orr.w	r2, r1, #1
 8004d3a:	616b      	str	r3, [r5, #20]
 8004d3c:	612b      	str	r3, [r5, #16]
 8004d3e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004d42:	f8c3 e008 	str.w	lr, [r3, #8]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	5059      	str	r1, [r3, r1]
 8004d4a:	e00c      	b.n	8004d66 <_malloc_r+0x23e>
 8004d4c:	2900      	cmp	r1, #0
 8004d4e:	db0e      	blt.n	8004d6e <_malloc_r+0x246>
 8004d50:	eb06 0109 	add.w	r1, r6, r9
 8004d54:	684b      	ldr	r3, [r1, #4]
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	68f3      	ldr	r3, [r6, #12]
 8004d5e:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	609a      	str	r2, [r3, #8]
 8004d66:	4638      	mov	r0, r7
 8004d68:	f000 f909 	bl	8004f7e <__malloc_unlock>
 8004d6c:	e0db      	b.n	8004f26 <_malloc_r+0x3fe>
 8004d6e:	68f6      	ldr	r6, [r6, #12]
 8004d70:	e7cf      	b.n	8004d12 <_malloc_r+0x1ea>
 8004d72:	f10c 0c01 	add.w	ip, ip, #1
 8004d76:	f01c 0f03 	tst.w	ip, #3
 8004d7a:	f108 0808 	add.w	r8, r8, #8
 8004d7e:	d1c6      	bne.n	8004d0e <_malloc_r+0x1e6>
 8004d80:	0791      	lsls	r1, r2, #30
 8004d82:	d104      	bne.n	8004d8e <_malloc_r+0x266>
 8004d84:	686a      	ldr	r2, [r5, #4]
 8004d86:	ea22 0203 	bic.w	r2, r2, r3
 8004d8a:	606a      	str	r2, [r5, #4]
 8004d8c:	e006      	b.n	8004d9c <_malloc_r+0x274>
 8004d8e:	f1a0 0108 	sub.w	r1, r0, #8
 8004d92:	6800      	ldr	r0, [r0, #0]
 8004d94:	4288      	cmp	r0, r1
 8004d96:	f102 32ff 	add.w	r2, r2, #4294967295
 8004d9a:	d0f1      	beq.n	8004d80 <_malloc_r+0x258>
 8004d9c:	6869      	ldr	r1, [r5, #4]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d809      	bhi.n	8004db8 <_malloc_r+0x290>
 8004da4:	b143      	cbz	r3, 8004db8 <_malloc_r+0x290>
 8004da6:	4662      	mov	r2, ip
 8004da8:	420b      	tst	r3, r1
 8004daa:	d1ac      	bne.n	8004d06 <_malloc_r+0x1de>
 8004dac:	3204      	adds	r2, #4
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	e7fa      	b.n	8004da8 <_malloc_r+0x280>
 8004db2:	bf00      	nop
 8004db4:	20000130 	.word	0x20000130
 8004db8:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8004dbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004dc0:	f023 0903 	bic.w	r9, r3, #3
 8004dc4:	45a1      	cmp	r9, r4
 8004dc6:	d304      	bcc.n	8004dd2 <_malloc_r+0x2aa>
 8004dc8:	ebc4 0309 	rsb	r3, r4, r9
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	f300 809d 	bgt.w	8004f0c <_malloc_r+0x3e4>
 8004dd2:	4b57      	ldr	r3, [pc, #348]	; (8004f30 <_malloc_r+0x408>)
 8004dd4:	4a57      	ldr	r2, [pc, #348]	; (8004f34 <_malloc_r+0x40c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6811      	ldr	r1, [r2, #0]
 8004dda:	f103 0a10 	add.w	sl, r3, #16
 8004dde:	3101      	adds	r1, #1
 8004de0:	eb08 0c09 	add.w	ip, r8, r9
 8004de4:	44a2      	add	sl, r4
 8004de6:	4b54      	ldr	r3, [pc, #336]	; (8004f38 <_malloc_r+0x410>)
 8004de8:	d004      	beq.n	8004df4 <_malloc_r+0x2cc>
 8004dea:	1e59      	subs	r1, r3, #1
 8004dec:	448a      	add	sl, r1
 8004dee:	4259      	negs	r1, r3
 8004df0:	ea0a 0a01 	and.w	sl, sl, r1
 8004df4:	4638      	mov	r0, r7
 8004df6:	4651      	mov	r1, sl
 8004df8:	9201      	str	r2, [sp, #4]
 8004dfa:	9302      	str	r3, [sp, #8]
 8004dfc:	f8cd c00c 	str.w	ip, [sp, #12]
 8004e00:	f000 fbc2 	bl	8005588 <_sbrk_r>
 8004e04:	1c42      	adds	r2, r0, #1
 8004e06:	aa01      	add	r2, sp, #4
 8004e08:	4606      	mov	r6, r0
 8004e0a:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 8004e0e:	d06e      	beq.n	8004eee <_malloc_r+0x3c6>
 8004e10:	4560      	cmp	r0, ip
 8004e12:	d201      	bcs.n	8004e18 <_malloc_r+0x2f0>
 8004e14:	45a8      	cmp	r8, r5
 8004e16:	d16a      	bne.n	8004eee <_malloc_r+0x3c6>
 8004e18:	4948      	ldr	r1, [pc, #288]	; (8004f3c <_malloc_r+0x414>)
 8004e1a:	6808      	ldr	r0, [r1, #0]
 8004e1c:	4566      	cmp	r6, ip
 8004e1e:	eb0a 0e00 	add.w	lr, sl, r0
 8004e22:	f8c1 e000 	str.w	lr, [r1]
 8004e26:	4846      	ldr	r0, [pc, #280]	; (8004f40 <_malloc_r+0x418>)
 8004e28:	468b      	mov	fp, r1
 8004e2a:	d107      	bne.n	8004e3c <_malloc_r+0x314>
 8004e2c:	4206      	tst	r6, r0
 8004e2e:	d105      	bne.n	8004e3c <_malloc_r+0x314>
 8004e30:	68ab      	ldr	r3, [r5, #8]
 8004e32:	44d1      	add	r9, sl
 8004e34:	f049 0201 	orr.w	r2, r9, #1
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	e04c      	b.n	8004ed6 <_malloc_r+0x3ae>
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	3201      	adds	r2, #1
 8004e40:	d102      	bne.n	8004e48 <_malloc_r+0x320>
 8004e42:	4a3c      	ldr	r2, [pc, #240]	; (8004f34 <_malloc_r+0x40c>)
 8004e44:	6016      	str	r6, [r2, #0]
 8004e46:	e005      	b.n	8004e54 <_malloc_r+0x32c>
 8004e48:	ebcc 0c06 	rsb	ip, ip, r6
 8004e4c:	eb0e 020c 	add.w	r2, lr, ip
 8004e50:	f8cb 2000 	str.w	r2, [fp]
 8004e54:	f016 0207 	ands.w	r2, r6, #7
 8004e58:	bf1c      	itt	ne
 8004e5a:	f1c2 0208 	rsbne	r2, r2, #8
 8004e5e:	18b6      	addne	r6, r6, r2
 8004e60:	44b2      	add	sl, r6
 8004e62:	4413      	add	r3, r2
 8004e64:	ea0a 0000 	and.w	r0, sl, r0
 8004e68:	ebc0 0a03 	rsb	sl, r0, r3
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f000 fb8a 	bl	8005588 <_sbrk_r>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	bf04      	itt	eq
 8004e78:	4630      	moveq	r0, r6
 8004e7a:	f04f 0a00 	moveq.w	sl, #0
 8004e7e:	f8db 3000 	ldr.w	r3, [fp]
 8004e82:	60ae      	str	r6, [r5, #8]
 8004e84:	1b80      	subs	r0, r0, r6
 8004e86:	4450      	add	r0, sl
 8004e88:	4453      	add	r3, sl
 8004e8a:	f040 0001 	orr.w	r0, r0, #1
 8004e8e:	45a8      	cmp	r8, r5
 8004e90:	f8cb 3000 	str.w	r3, [fp]
 8004e94:	6070      	str	r0, [r6, #4]
 8004e96:	d01e      	beq.n	8004ed6 <_malloc_r+0x3ae>
 8004e98:	f1b9 0f0f 	cmp.w	r9, #15
 8004e9c:	d802      	bhi.n	8004ea4 <_malloc_r+0x37c>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	6073      	str	r3, [r6, #4]
 8004ea2:	e024      	b.n	8004eee <_malloc_r+0x3c6>
 8004ea4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004ea8:	f1a9 090c 	sub.w	r9, r9, #12
 8004eac:	f029 0907 	bic.w	r9, r9, #7
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	ea49 0303 	orr.w	r3, r9, r3
 8004eb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8004ebc:	eb08 0309 	add.w	r3, r8, r9
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f1b9 0f0f 	cmp.w	r9, #15
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	609a      	str	r2, [r3, #8]
 8004eca:	d904      	bls.n	8004ed6 <_malloc_r+0x3ae>
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f108 0108 	add.w	r1, r8, #8
 8004ed2:	f000 fc7f 	bl	80057d4 <_free_r>
 8004ed6:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <_malloc_r+0x41c>)
 8004ed8:	f8db 3000 	ldr.w	r3, [fp]
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	428b      	cmp	r3, r1
 8004ee0:	bf88      	it	hi
 8004ee2:	6013      	strhi	r3, [r2, #0]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <_malloc_r+0x420>)
 8004ee6:	6811      	ldr	r1, [r2, #0]
 8004ee8:	428b      	cmp	r3, r1
 8004eea:	bf88      	it	hi
 8004eec:	6013      	strhi	r3, [r2, #0]
 8004eee:	68ab      	ldr	r3, [r5, #8]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	f022 0203 	bic.w	r2, r2, #3
 8004ef6:	42a2      	cmp	r2, r4
 8004ef8:	ebc4 0302 	rsb	r3, r4, r2
 8004efc:	d301      	bcc.n	8004f02 <_malloc_r+0x3da>
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	dc04      	bgt.n	8004f0c <_malloc_r+0x3e4>
 8004f02:	4638      	mov	r0, r7
 8004f04:	f000 f83b 	bl	8004f7e <__malloc_unlock>
 8004f08:	2600      	movs	r6, #0
 8004f0a:	e00c      	b.n	8004f26 <_malloc_r+0x3fe>
 8004f0c:	68ae      	ldr	r6, [r5, #8]
 8004f0e:	f044 0201 	orr.w	r2, r4, #1
 8004f12:	4434      	add	r4, r6
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6072      	str	r2, [r6, #4]
 8004f1a:	60ac      	str	r4, [r5, #8]
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f000 f82d 	bl	8004f7e <__malloc_unlock>
 8004f24:	3608      	adds	r6, #8
 8004f26:	4630      	mov	r0, r6
 8004f28:	b005      	add	sp, #20
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000570 	.word	0x20000570
 8004f34:	2000053c 	.word	0x2000053c
 8004f38:	00001000 	.word	0x00001000
 8004f3c:	20000574 	.word	0x20000574
 8004f40:	00000fff 	.word	0x00000fff
 8004f44:	2000056c 	.word	0x2000056c
 8004f48:	20000568 	.word	0x20000568

08004f4c <memchr>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	b2c9      	uxtb	r1, r1
 8004f50:	4402      	add	r2, r0
 8004f52:	4290      	cmp	r0, r2
 8004f54:	4603      	mov	r3, r0
 8004f56:	d006      	beq.n	8004f66 <memchr+0x1a>
 8004f58:	781c      	ldrb	r4, [r3, #0]
 8004f5a:	428c      	cmp	r4, r1
 8004f5c:	f100 0001 	add.w	r0, r0, #1
 8004f60:	d1f7      	bne.n	8004f52 <memchr+0x6>
 8004f62:	4618      	mov	r0, r3
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	2000      	movs	r0, #0
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <memcpy>:
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <memcpy+0x10>
 8004f72:	5ccc      	ldrb	r4, [r1, r3]
 8004f74:	54c4      	strb	r4, [r0, r3]
 8004f76:	3301      	adds	r3, #1
 8004f78:	e7f9      	b.n	8004f6e <memcpy+0x4>
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <__malloc_lock>:
 8004f7c:	4770      	bx	lr

08004f7e <__malloc_unlock>:
 8004f7e:	4770      	bx	lr

08004f80 <_Balloc>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f84:	4604      	mov	r4, r0
 8004f86:	460e      	mov	r6, r1
 8004f88:	b93d      	cbnz	r5, 8004f9a <_Balloc+0x1a>
 8004f8a:	2010      	movs	r0, #16
 8004f8c:	f7ff fdc4 	bl	8004b18 <malloc>
 8004f90:	6260      	str	r0, [r4, #36]	; 0x24
 8004f92:	6045      	str	r5, [r0, #4]
 8004f94:	6085      	str	r5, [r0, #8]
 8004f96:	6005      	str	r5, [r0, #0]
 8004f98:	60c5      	str	r5, [r0, #12]
 8004f9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f9c:	68eb      	ldr	r3, [r5, #12]
 8004f9e:	b143      	cbz	r3, 8004fb2 <_Balloc+0x32>
 8004fa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8004fa8:	b178      	cbz	r0, 8004fca <_Balloc+0x4a>
 8004faa:	6801      	ldr	r1, [r0, #0]
 8004fac:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8004fb0:	e017      	b.n	8004fe2 <_Balloc+0x62>
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	2104      	movs	r1, #4
 8004fb6:	2221      	movs	r2, #33	; 0x21
 8004fb8:	f000 fb8a 	bl	80056d0 <_calloc_r>
 8004fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fbe:	60e8      	str	r0, [r5, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ec      	bne.n	8004fa0 <_Balloc+0x20>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f506 	lsl.w	r5, r1, r6
 8004fd0:	1d6a      	adds	r2, r5, #5
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	0092      	lsls	r2, r2, #2
 8004fd6:	f000 fb7b 	bl	80056d0 <_calloc_r>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d0f3      	beq.n	8004fc6 <_Balloc+0x46>
 8004fde:	6046      	str	r6, [r0, #4]
 8004fe0:	6085      	str	r5, [r0, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6102      	str	r2, [r0, #16]
 8004fe6:	60c2      	str	r2, [r0, #12]
 8004fe8:	bd70      	pop	{r4, r5, r6, pc}

08004fea <_Bfree>:
 8004fea:	b570      	push	{r4, r5, r6, lr}
 8004fec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	b93c      	cbnz	r4, 8005004 <_Bfree+0x1a>
 8004ff4:	2010      	movs	r0, #16
 8004ff6:	f7ff fd8f 	bl	8004b18 <malloc>
 8004ffa:	6270      	str	r0, [r6, #36]	; 0x24
 8004ffc:	6044      	str	r4, [r0, #4]
 8004ffe:	6084      	str	r4, [r0, #8]
 8005000:	6004      	str	r4, [r0, #0]
 8005002:	60c4      	str	r4, [r0, #12]
 8005004:	b13d      	cbz	r5, 8005016 <_Bfree+0x2c>
 8005006:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005008:	686a      	ldr	r2, [r5, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005010:	6029      	str	r1, [r5, #0]
 8005012:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005016:	bd70      	pop	{r4, r5, r6, pc}

08005018 <__multadd>:
 8005018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800501c:	460c      	mov	r4, r1
 800501e:	461e      	mov	r6, r3
 8005020:	690d      	ldr	r5, [r1, #16]
 8005022:	4607      	mov	r7, r0
 8005024:	3114      	adds	r1, #20
 8005026:	2300      	movs	r3, #0
 8005028:	6808      	ldr	r0, [r1, #0]
 800502a:	fa1f fc80 	uxth.w	ip, r0
 800502e:	0c00      	lsrs	r0, r0, #16
 8005030:	fb02 6c0c 	mla	ip, r2, ip, r6
 8005034:	4350      	muls	r0, r2
 8005036:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 800503a:	3301      	adds	r3, #1
 800503c:	fa1f fc8c 	uxth.w	ip, ip
 8005040:	0c06      	lsrs	r6, r0, #16
 8005042:	42ab      	cmp	r3, r5
 8005044:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
 8005048:	f841 0b04 	str.w	r0, [r1], #4
 800504c:	dbec      	blt.n	8005028 <__multadd+0x10>
 800504e:	b1d6      	cbz	r6, 8005086 <__multadd+0x6e>
 8005050:	68a3      	ldr	r3, [r4, #8]
 8005052:	429d      	cmp	r5, r3
 8005054:	db12      	blt.n	800507c <__multadd+0x64>
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	4638      	mov	r0, r7
 800505a:	3101      	adds	r1, #1
 800505c:	f7ff ff90 	bl	8004f80 <_Balloc>
 8005060:	6922      	ldr	r2, [r4, #16]
 8005062:	3202      	adds	r2, #2
 8005064:	f104 010c 	add.w	r1, r4, #12
 8005068:	4680      	mov	r8, r0
 800506a:	0092      	lsls	r2, r2, #2
 800506c:	300c      	adds	r0, #12
 800506e:	f7ff ff7c 	bl	8004f6a <memcpy>
 8005072:	4621      	mov	r1, r4
 8005074:	4638      	mov	r0, r7
 8005076:	f7ff ffb8 	bl	8004fea <_Bfree>
 800507a:	4644      	mov	r4, r8
 800507c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005080:	3501      	adds	r5, #1
 8005082:	615e      	str	r6, [r3, #20]
 8005084:	6125      	str	r5, [r4, #16]
 8005086:	4620      	mov	r0, r4
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800508c <__hi0bits>:
 800508c:	0c03      	lsrs	r3, r0, #16
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	b913      	cbnz	r3, 8005098 <__hi0bits+0xc>
 8005092:	0400      	lsls	r0, r0, #16
 8005094:	2310      	movs	r3, #16
 8005096:	e000      	b.n	800509a <__hi0bits+0xe>
 8005098:	2300      	movs	r3, #0
 800509a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800509e:	bf04      	itt	eq
 80050a0:	0200      	lsleq	r0, r0, #8
 80050a2:	3308      	addeq	r3, #8
 80050a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80050a8:	bf04      	itt	eq
 80050aa:	0100      	lsleq	r0, r0, #4
 80050ac:	3304      	addeq	r3, #4
 80050ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80050b2:	bf04      	itt	eq
 80050b4:	0080      	lsleq	r0, r0, #2
 80050b6:	3302      	addeq	r3, #2
 80050b8:	2800      	cmp	r0, #0
 80050ba:	db03      	blt.n	80050c4 <__hi0bits+0x38>
 80050bc:	0042      	lsls	r2, r0, #1
 80050be:	d503      	bpl.n	80050c8 <__hi0bits+0x3c>
 80050c0:	1c58      	adds	r0, r3, #1
 80050c2:	4770      	bx	lr
 80050c4:	4618      	mov	r0, r3
 80050c6:	4770      	bx	lr
 80050c8:	2020      	movs	r0, #32
 80050ca:	4770      	bx	lr

080050cc <__lo0bits>:
 80050cc:	6803      	ldr	r3, [r0, #0]
 80050ce:	f013 0207 	ands.w	r2, r3, #7
 80050d2:	d00b      	beq.n	80050ec <__lo0bits+0x20>
 80050d4:	07d9      	lsls	r1, r3, #31
 80050d6:	d422      	bmi.n	800511e <__lo0bits+0x52>
 80050d8:	079a      	lsls	r2, r3, #30
 80050da:	d503      	bpl.n	80050e4 <__lo0bits+0x18>
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	6003      	str	r3, [r0, #0]
 80050e0:	2001      	movs	r0, #1
 80050e2:	4770      	bx	lr
 80050e4:	089b      	lsrs	r3, r3, #2
 80050e6:	6003      	str	r3, [r0, #0]
 80050e8:	2002      	movs	r0, #2
 80050ea:	4770      	bx	lr
 80050ec:	b299      	uxth	r1, r3
 80050ee:	b909      	cbnz	r1, 80050f4 <__lo0bits+0x28>
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	2210      	movs	r2, #16
 80050f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80050f8:	bf04      	itt	eq
 80050fa:	0a1b      	lsreq	r3, r3, #8
 80050fc:	3208      	addeq	r2, #8
 80050fe:	0719      	lsls	r1, r3, #28
 8005100:	bf04      	itt	eq
 8005102:	091b      	lsreq	r3, r3, #4
 8005104:	3204      	addeq	r2, #4
 8005106:	0799      	lsls	r1, r3, #30
 8005108:	bf04      	itt	eq
 800510a:	089b      	lsreq	r3, r3, #2
 800510c:	3202      	addeq	r2, #2
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d402      	bmi.n	8005118 <__lo0bits+0x4c>
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	d005      	beq.n	8005122 <__lo0bits+0x56>
 8005116:	3201      	adds	r2, #1
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	4610      	mov	r0, r2
 800511c:	4770      	bx	lr
 800511e:	2000      	movs	r0, #0
 8005120:	4770      	bx	lr
 8005122:	2020      	movs	r0, #32
 8005124:	4770      	bx	lr

08005126 <__i2b>:
 8005126:	b510      	push	{r4, lr}
 8005128:	460c      	mov	r4, r1
 800512a:	2101      	movs	r1, #1
 800512c:	f7ff ff28 	bl	8004f80 <_Balloc>
 8005130:	2201      	movs	r2, #1
 8005132:	6144      	str	r4, [r0, #20]
 8005134:	6102      	str	r2, [r0, #16]
 8005136:	bd10      	pop	{r4, pc}

08005138 <__multiply>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	4616      	mov	r6, r2
 800513e:	690a      	ldr	r2, [r1, #16]
 8005140:	6933      	ldr	r3, [r6, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	b085      	sub	sp, #20
 8005146:	460d      	mov	r5, r1
 8005148:	da01      	bge.n	800514e <__multiply+0x16>
 800514a:	4635      	mov	r5, r6
 800514c:	460e      	mov	r6, r1
 800514e:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8005152:	6937      	ldr	r7, [r6, #16]
 8005154:	68ab      	ldr	r3, [r5, #8]
 8005156:	6869      	ldr	r1, [r5, #4]
 8005158:	eb08 0407 	add.w	r4, r8, r7
 800515c:	429c      	cmp	r4, r3
 800515e:	bfc8      	it	gt
 8005160:	3101      	addgt	r1, #1
 8005162:	f7ff ff0d 	bl	8004f80 <_Balloc>
 8005166:	f100 0314 	add.w	r3, r0, #20
 800516a:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800516e:	9101      	str	r1, [sp, #4]
 8005170:	461a      	mov	r2, r3
 8005172:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005176:	4552      	cmp	r2, sl
 8005178:	d203      	bcs.n	8005182 <__multiply+0x4a>
 800517a:	2100      	movs	r1, #0
 800517c:	f842 1b04 	str.w	r1, [r2], #4
 8005180:	e7f7      	b.n	8005172 <__multiply+0x3a>
 8005182:	f105 0114 	add.w	r1, r5, #20
 8005186:	f106 0214 	add.w	r2, r6, #20
 800518a:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 800518e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005192:	f8cd 8008 	str.w	r8, [sp, #8]
 8005196:	9703      	str	r7, [sp, #12]
 8005198:	9e03      	ldr	r6, [sp, #12]
 800519a:	42b2      	cmp	r2, r6
 800519c:	4615      	mov	r5, r2
 800519e:	d256      	bcs.n	800524e <__multiply+0x116>
 80051a0:	f8b5 c000 	ldrh.w	ip, [r5]
 80051a4:	3204      	adds	r2, #4
 80051a6:	f1bc 0f00 	cmp.w	ip, #0
 80051aa:	d025      	beq.n	80051f8 <__multiply+0xc0>
 80051ac:	460f      	mov	r7, r1
 80051ae:	461d      	mov	r5, r3
 80051b0:	2600      	movs	r6, #0
 80051b2:	f857 9b04 	ldr.w	r9, [r7], #4
 80051b6:	f8d5 8000 	ldr.w	r8, [r5]
 80051ba:	fa1f fb89 	uxth.w	fp, r9
 80051be:	fa1f fa88 	uxth.w	sl, r8
 80051c2:	fb0c aa0b 	mla	sl, ip, fp, sl
 80051c6:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80051ca:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80051ce:	44b2      	add	sl, r6
 80051d0:	fb0c 8809 	mla	r8, ip, r9, r8
 80051d4:	eb08 481a 	add.w	r8, r8, sl, lsr #16
 80051d8:	fa1f fa8a 	uxth.w	sl, sl
 80051dc:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
 80051e0:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80051e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80051e8:	46ab      	mov	fp, r5
 80051ea:	45b8      	cmp	r8, r7
 80051ec:	f84b ab04 	str.w	sl, [fp], #4
 80051f0:	d901      	bls.n	80051f6 <__multiply+0xbe>
 80051f2:	465d      	mov	r5, fp
 80051f4:	e7dd      	b.n	80051b2 <__multiply+0x7a>
 80051f6:	606e      	str	r6, [r5, #4]
 80051f8:	f832 8c02 	ldrh.w	r8, [r2, #-2]
 80051fc:	f1b8 0f00 	cmp.w	r8, #0
 8005200:	d023      	beq.n	800524a <__multiply+0x112>
 8005202:	681e      	ldr	r6, [r3, #0]
 8005204:	460f      	mov	r7, r1
 8005206:	461d      	mov	r5, r3
 8005208:	f04f 0900 	mov.w	r9, #0
 800520c:	f8b7 a000 	ldrh.w	sl, [r7]
 8005210:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8005214:	fb08 cc0a 	mla	ip, r8, sl, ip
 8005218:	44e1      	add	r9, ip
 800521a:	b2b6      	uxth	r6, r6
 800521c:	46ac      	mov	ip, r5
 800521e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8005222:	f84c 6b04 	str.w	r6, [ip], #4
 8005226:	f857 6b04 	ldr.w	r6, [r7], #4
 800522a:	f8b5 a004 	ldrh.w	sl, [r5, #4]
 800522e:	0c36      	lsrs	r6, r6, #16
 8005230:	fb08 a606 	mla	r6, r8, r6, sl
 8005234:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005238:	eb06 4619 	add.w	r6, r6, r9, lsr #16
 800523c:	4557      	cmp	r7, sl
 800523e:	ea4f 4916 	mov.w	r9, r6, lsr #16
 8005242:	d201      	bcs.n	8005248 <__multiply+0x110>
 8005244:	4665      	mov	r5, ip
 8005246:	e7e1      	b.n	800520c <__multiply+0xd4>
 8005248:	606e      	str	r6, [r5, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	e7a4      	b.n	8005198 <__multiply+0x60>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	2c00      	cmp	r4, #0
 8005252:	dc03      	bgt.n	800525c <__multiply+0x124>
 8005254:	6104      	str	r4, [r0, #16]
 8005256:	b005      	add	sp, #20
 8005258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800525c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005260:	2a00      	cmp	r2, #0
 8005262:	d1f7      	bne.n	8005254 <__multiply+0x11c>
 8005264:	3c01      	subs	r4, #1
 8005266:	e7f3      	b.n	8005250 <__multiply+0x118>

08005268 <__pow5mult>:
 8005268:	f012 0303 	ands.w	r3, r2, #3
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	4605      	mov	r5, r0
 8005272:	460e      	mov	r6, r1
 8005274:	4617      	mov	r7, r2
 8005276:	d007      	beq.n	8005288 <__pow5mult+0x20>
 8005278:	3b01      	subs	r3, #1
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <__pow5mult+0x98>)
 800527c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005280:	2300      	movs	r3, #0
 8005282:	f7ff fec9 	bl	8005018 <__multadd>
 8005286:	4606      	mov	r6, r0
 8005288:	10bf      	asrs	r7, r7, #2
 800528a:	d035      	beq.n	80052f8 <__pow5mult+0x90>
 800528c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800528e:	b93c      	cbnz	r4, 80052a0 <__pow5mult+0x38>
 8005290:	2010      	movs	r0, #16
 8005292:	f7ff fc41 	bl	8004b18 <malloc>
 8005296:	6268      	str	r0, [r5, #36]	; 0x24
 8005298:	6044      	str	r4, [r0, #4]
 800529a:	6084      	str	r4, [r0, #8]
 800529c:	6004      	str	r4, [r0, #0]
 800529e:	60c4      	str	r4, [r0, #12]
 80052a0:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80052a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052a8:	b97c      	cbnz	r4, 80052ca <__pow5mult+0x62>
 80052aa:	4628      	mov	r0, r5
 80052ac:	f240 2171 	movw	r1, #625	; 0x271
 80052b0:	f7ff ff39 	bl	8005126 <__i2b>
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80052ba:	4604      	mov	r4, r0
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	e004      	b.n	80052ca <__pow5mult+0x62>
 80052c0:	107f      	asrs	r7, r7, #1
 80052c2:	d019      	beq.n	80052f8 <__pow5mult+0x90>
 80052c4:	6820      	ldr	r0, [r4, #0]
 80052c6:	b170      	cbz	r0, 80052e6 <__pow5mult+0x7e>
 80052c8:	4604      	mov	r4, r0
 80052ca:	07fb      	lsls	r3, r7, #31
 80052cc:	d5f8      	bpl.n	80052c0 <__pow5mult+0x58>
 80052ce:	4631      	mov	r1, r6
 80052d0:	4622      	mov	r2, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	f7ff ff30 	bl	8005138 <__multiply>
 80052d8:	4631      	mov	r1, r6
 80052da:	4680      	mov	r8, r0
 80052dc:	4628      	mov	r0, r5
 80052de:	f7ff fe84 	bl	8004fea <_Bfree>
 80052e2:	4646      	mov	r6, r8
 80052e4:	e7ec      	b.n	80052c0 <__pow5mult+0x58>
 80052e6:	4628      	mov	r0, r5
 80052e8:	4621      	mov	r1, r4
 80052ea:	4622      	mov	r2, r4
 80052ec:	f7ff ff24 	bl	8005138 <__multiply>
 80052f0:	2300      	movs	r3, #0
 80052f2:	6020      	str	r0, [r4, #0]
 80052f4:	6003      	str	r3, [r0, #0]
 80052f6:	e7e7      	b.n	80052c8 <__pow5mult+0x60>
 80052f8:	4630      	mov	r0, r6
 80052fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052fe:	bf00      	nop
 8005300:	080060c0 	.word	0x080060c0

08005304 <__lshift>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	6849      	ldr	r1, [r1, #4]
 8005312:	eb0a 0903 	add.w	r9, sl, r3
 8005316:	68a3      	ldr	r3, [r4, #8]
 8005318:	4680      	mov	r8, r0
 800531a:	4615      	mov	r5, r2
 800531c:	f109 0701 	add.w	r7, r9, #1
 8005320:	429f      	cmp	r7, r3
 8005322:	dd02      	ble.n	800532a <__lshift+0x26>
 8005324:	3101      	adds	r1, #1
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	e7fa      	b.n	8005320 <__lshift+0x1c>
 800532a:	4640      	mov	r0, r8
 800532c:	f7ff fe28 	bl	8004f80 <_Balloc>
 8005330:	2300      	movs	r3, #0
 8005332:	4606      	mov	r6, r0
 8005334:	f100 0214 	add.w	r2, r0, #20
 8005338:	4553      	cmp	r3, sl
 800533a:	da04      	bge.n	8005346 <__lshift+0x42>
 800533c:	2100      	movs	r1, #0
 800533e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005342:	3301      	adds	r3, #1
 8005344:	e7f8      	b.n	8005338 <__lshift+0x34>
 8005346:	6920      	ldr	r0, [r4, #16]
 8005348:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 800534c:	f104 0314 	add.w	r3, r4, #20
 8005350:	f015 0c1f 	ands.w	ip, r5, #31
 8005354:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005358:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800535c:	d016      	beq.n	800538c <__lshift+0x88>
 800535e:	f1cc 0a20 	rsb	sl, ip, #32
 8005362:	2500      	movs	r5, #0
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	460a      	mov	r2, r1
 8005368:	fa00 f00c 	lsl.w	r0, r0, ip
 800536c:	4305      	orrs	r5, r0
 800536e:	f842 5b04 	str.w	r5, [r2], #4
 8005372:	f853 5b04 	ldr.w	r5, [r3], #4
 8005376:	4573      	cmp	r3, lr
 8005378:	fa25 f50a 	lsr.w	r5, r5, sl
 800537c:	d201      	bcs.n	8005382 <__lshift+0x7e>
 800537e:	4611      	mov	r1, r2
 8005380:	e7f0      	b.n	8005364 <__lshift+0x60>
 8005382:	604d      	str	r5, [r1, #4]
 8005384:	b145      	cbz	r5, 8005398 <__lshift+0x94>
 8005386:	f109 0702 	add.w	r7, r9, #2
 800538a:	e005      	b.n	8005398 <__lshift+0x94>
 800538c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005390:	f841 2b04 	str.w	r2, [r1], #4
 8005394:	4573      	cmp	r3, lr
 8005396:	d3f9      	bcc.n	800538c <__lshift+0x88>
 8005398:	3f01      	subs	r7, #1
 800539a:	4640      	mov	r0, r8
 800539c:	6137      	str	r7, [r6, #16]
 800539e:	4621      	mov	r1, r4
 80053a0:	f7ff fe23 	bl	8004fea <_Bfree>
 80053a4:	4630      	mov	r0, r6
 80053a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053aa <__mcmp>:
 80053aa:	6902      	ldr	r2, [r0, #16]
 80053ac:	690b      	ldr	r3, [r1, #16]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	b510      	push	{r4, lr}
 80053b2:	d113      	bne.n	80053dc <__mcmp+0x32>
 80053b4:	009c      	lsls	r4, r3, #2
 80053b6:	3014      	adds	r0, #20
 80053b8:	f101 0214 	add.w	r2, r1, #20
 80053bc:	1903      	adds	r3, r0, r4
 80053be:	4422      	add	r2, r4
 80053c0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80053c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80053c8:	428c      	cmp	r4, r1
 80053ca:	d003      	beq.n	80053d4 <__mcmp+0x2a>
 80053cc:	d208      	bcs.n	80053e0 <__mcmp+0x36>
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	4298      	cmp	r0, r3
 80053d6:	d3f3      	bcc.n	80053c0 <__mcmp+0x16>
 80053d8:	2000      	movs	r0, #0
 80053da:	bd10      	pop	{r4, pc}
 80053dc:	4610      	mov	r0, r2
 80053de:	bd10      	pop	{r4, pc}
 80053e0:	2001      	movs	r0, #1
 80053e2:	bd10      	pop	{r4, pc}

080053e4 <__mdiff>:
 80053e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	4606      	mov	r6, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	4615      	mov	r5, r2
 80053f2:	f7ff ffda 	bl	80053aa <__mcmp>
 80053f6:	1e07      	subs	r7, r0, #0
 80053f8:	d108      	bne.n	800540c <__mdiff+0x28>
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7ff fdbf 	bl	8004f80 <_Balloc>
 8005402:	2301      	movs	r3, #1
 8005404:	6103      	str	r3, [r0, #16]
 8005406:	6147      	str	r7, [r0, #20]
 8005408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800540c:	db01      	blt.n	8005412 <__mdiff+0x2e>
 800540e:	2700      	movs	r7, #0
 8005410:	e003      	b.n	800541a <__mdiff+0x36>
 8005412:	4623      	mov	r3, r4
 8005414:	2701      	movs	r7, #1
 8005416:	462c      	mov	r4, r5
 8005418:	461d      	mov	r5, r3
 800541a:	6861      	ldr	r1, [r4, #4]
 800541c:	4630      	mov	r0, r6
 800541e:	f7ff fdaf 	bl	8004f80 <_Balloc>
 8005422:	6922      	ldr	r2, [r4, #16]
 8005424:	692b      	ldr	r3, [r5, #16]
 8005426:	60c7      	str	r7, [r0, #12]
 8005428:	3414      	adds	r4, #20
 800542a:	f105 0614 	add.w	r6, r5, #20
 800542e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8005432:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8005436:	f100 0314 	add.w	r3, r0, #20
 800543a:	2100      	movs	r1, #0
 800543c:	f854 7b04 	ldr.w	r7, [r4], #4
 8005440:	f856 9b04 	ldr.w	r9, [r6], #4
 8005444:	fa11 f187 	uxtah	r1, r1, r7
 8005448:	fa1f f589 	uxth.w	r5, r9
 800544c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8005450:	ebc5 0801 	rsb	r8, r5, r1
 8005454:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
 8005458:	eb07 4728 	add.w	r7, r7, r8, asr #16
 800545c:	fa1f f888 	uxth.w	r8, r8
 8005460:	1439      	asrs	r1, r7, #16
 8005462:	45b2      	cmp	sl, r6
 8005464:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8005468:	4625      	mov	r5, r4
 800546a:	f843 7b04 	str.w	r7, [r3], #4
 800546e:	d8e5      	bhi.n	800543c <__mdiff+0x58>
 8005470:	4565      	cmp	r5, ip
 8005472:	d20d      	bcs.n	8005490 <__mdiff+0xac>
 8005474:	f855 4b04 	ldr.w	r4, [r5], #4
 8005478:	fa11 f684 	uxtah	r6, r1, r4
 800547c:	0c24      	lsrs	r4, r4, #16
 800547e:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8005482:	b2b6      	uxth	r6, r6
 8005484:	1421      	asrs	r1, r4, #16
 8005486:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 800548a:	f843 4b04 	str.w	r4, [r3], #4
 800548e:	e7ef      	b.n	8005470 <__mdiff+0x8c>
 8005490:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005494:	b909      	cbnz	r1, 800549a <__mdiff+0xb6>
 8005496:	3a01      	subs	r2, #1
 8005498:	e7fa      	b.n	8005490 <__mdiff+0xac>
 800549a:	6102      	str	r2, [r0, #16]
 800549c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054a0 <__d2b>:
 80054a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	4689      	mov	r9, r1
 80054a6:	2101      	movs	r1, #1
 80054a8:	ec55 4b10 	vmov	r4, r5, d0
 80054ac:	4690      	mov	r8, r2
 80054ae:	f7ff fd67 	bl	8004f80 <_Balloc>
 80054b2:	f3c5 570a 	ubfx	r7, r5, #20, #11
 80054b6:	4606      	mov	r6, r0
 80054b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80054bc:	b10f      	cbz	r7, 80054c2 <__d2b+0x22>
 80054be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	b1d4      	cbz	r4, 80054fc <__d2b+0x5c>
 80054c6:	a802      	add	r0, sp, #8
 80054c8:	f840 4d08 	str.w	r4, [r0, #-8]!
 80054cc:	4668      	mov	r0, sp
 80054ce:	f7ff fdfd 	bl	80050cc <__lo0bits>
 80054d2:	9b00      	ldr	r3, [sp, #0]
 80054d4:	b148      	cbz	r0, 80054ea <__d2b+0x4a>
 80054d6:	9a01      	ldr	r2, [sp, #4]
 80054d8:	f1c0 0120 	rsb	r1, r0, #32
 80054dc:	fa02 f101 	lsl.w	r1, r2, r1
 80054e0:	430b      	orrs	r3, r1
 80054e2:	40c2      	lsrs	r2, r0
 80054e4:	6173      	str	r3, [r6, #20]
 80054e6:	9201      	str	r2, [sp, #4]
 80054e8:	e000      	b.n	80054ec <__d2b+0x4c>
 80054ea:	6173      	str	r3, [r6, #20]
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	61b3      	str	r3, [r6, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf0c      	ite	eq
 80054f4:	2401      	moveq	r4, #1
 80054f6:	2402      	movne	r4, #2
 80054f8:	6134      	str	r4, [r6, #16]
 80054fa:	e007      	b.n	800550c <__d2b+0x6c>
 80054fc:	a801      	add	r0, sp, #4
 80054fe:	f7ff fde5 	bl	80050cc <__lo0bits>
 8005502:	2401      	movs	r4, #1
 8005504:	9b01      	ldr	r3, [sp, #4]
 8005506:	6173      	str	r3, [r6, #20]
 8005508:	6134      	str	r4, [r6, #16]
 800550a:	3020      	adds	r0, #32
 800550c:	b13f      	cbz	r7, 800551e <__d2b+0x7e>
 800550e:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8005512:	4407      	add	r7, r0
 8005514:	f8c9 7000 	str.w	r7, [r9]
 8005518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800551c:	e00a      	b.n	8005534 <__d2b+0x94>
 800551e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005522:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005526:	f8c9 0000 	str.w	r0, [r9]
 800552a:	6918      	ldr	r0, [r3, #16]
 800552c:	f7ff fdae 	bl	800508c <__hi0bits>
 8005530:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005534:	f8c8 0000 	str.w	r0, [r8]
 8005538:	4630      	mov	r0, r6
 800553a:	b003      	add	sp, #12
 800553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005540 <__fpclassifyd>:
 8005540:	ec51 0b10 	vmov	r0, r1, d0
 8005544:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005548:	b510      	push	{r4, lr}
 800554a:	d100      	bne.n	800554e <__fpclassifyd+0xe>
 800554c:	b178      	cbz	r0, 800556e <__fpclassifyd+0x2e>
 800554e:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <__fpclassifyd+0x40>)
 8005550:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8005554:	4294      	cmp	r4, r2
 8005556:	d90c      	bls.n	8005572 <__fpclassifyd+0x32>
 8005558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555c:	d30b      	bcc.n	8005576 <__fpclassifyd+0x36>
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <__fpclassifyd+0x44>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d10a      	bne.n	800557a <__fpclassifyd+0x3a>
 8005564:	f1d0 0001 	rsbs	r0, r0, #1
 8005568:	bf38      	it	cc
 800556a:	2000      	movcc	r0, #0
 800556c:	bd10      	pop	{r4, pc}
 800556e:	2002      	movs	r0, #2
 8005570:	bd10      	pop	{r4, pc}
 8005572:	2004      	movs	r0, #4
 8005574:	bd10      	pop	{r4, pc}
 8005576:	2003      	movs	r0, #3
 8005578:	bd10      	pop	{r4, pc}
 800557a:	2000      	movs	r0, #0
 800557c:	bd10      	pop	{r4, pc}
 800557e:	bf00      	nop
 8005580:	7fdfffff 	.word	0x7fdfffff
 8005584:	7ff00000 	.word	0x7ff00000

08005588 <_sbrk_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4c06      	ldr	r4, [pc, #24]	; (80055a4 <_sbrk_r+0x1c>)
 800558c:	2300      	movs	r3, #0
 800558e:	4605      	mov	r5, r0
 8005590:	4608      	mov	r0, r1
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	f000 f882 	bl	800569c <_sbrk>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_sbrk_r+0x1a>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_sbrk_r+0x1a>
 80055a0:	602b      	str	r3, [r5, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	20000668 	.word	0x20000668

080055a8 <__ssprint_r>:
 80055a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	4680      	mov	r8, r0
 80055ae:	6890      	ldr	r0, [r2, #8]
 80055b0:	f8d2 9000 	ldr.w	r9, [r2]
 80055b4:	460c      	mov	r4, r1
 80055b6:	4615      	mov	r5, r2
 80055b8:	b118      	cbz	r0, 80055c2 <__ssprint_r+0x1a>
 80055ba:	2300      	movs	r3, #0
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	461e      	mov	r6, r3
 80055c0:	e008      	b.n	80055d4 <__ssprint_r+0x2c>
 80055c2:	6050      	str	r0, [r2, #4]
 80055c4:	e066      	b.n	8005694 <__ssprint_r+0xec>
 80055c6:	f8d9 3000 	ldr.w	r3, [r9]
 80055ca:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80055ce:	9301      	str	r3, [sp, #4]
 80055d0:	f109 0908 	add.w	r9, r9, #8
 80055d4:	2e00      	cmp	r6, #0
 80055d6:	d0f6      	beq.n	80055c6 <__ssprint_r+0x1e>
 80055d8:	68a7      	ldr	r7, [r4, #8]
 80055da:	42be      	cmp	r6, r7
 80055dc:	d347      	bcc.n	800566e <__ssprint_r+0xc6>
 80055de:	89a2      	ldrh	r2, [r4, #12]
 80055e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055e4:	d041      	beq.n	800566a <__ssprint_r+0xc2>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	6921      	ldr	r1, [r4, #16]
 80055ea:	ebc1 0a03 	rsb	sl, r1, r3
 80055ee:	6963      	ldr	r3, [r4, #20]
 80055f0:	2002      	movs	r0, #2
 80055f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80055f6:	fb93 fbf0 	sdiv	fp, r3, r0
 80055fa:	f10a 0001 	add.w	r0, sl, #1
 80055fe:	4430      	add	r0, r6
 8005600:	4583      	cmp	fp, r0
 8005602:	bf38      	it	cc
 8005604:	4683      	movcc	fp, r0
 8005606:	0553      	lsls	r3, r2, #21
 8005608:	4640      	mov	r0, r8
 800560a:	d50f      	bpl.n	800562c <__ssprint_r+0x84>
 800560c:	4659      	mov	r1, fp
 800560e:	f7ff fa8b 	bl	8004b28 <_malloc_r>
 8005612:	4607      	mov	r7, r0
 8005614:	b198      	cbz	r0, 800563e <__ssprint_r+0x96>
 8005616:	4652      	mov	r2, sl
 8005618:	6921      	ldr	r1, [r4, #16]
 800561a:	f7ff fca6 	bl	8004f6a <memcpy>
 800561e:	89a2      	ldrh	r2, [r4, #12]
 8005620:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005628:	81a2      	strh	r2, [r4, #12]
 800562a:	e015      	b.n	8005658 <__ssprint_r+0xb0>
 800562c:	465a      	mov	r2, fp
 800562e:	f000 f9a5 	bl	800597c <_realloc_r>
 8005632:	4607      	mov	r7, r0
 8005634:	b980      	cbnz	r0, 8005658 <__ssprint_r+0xb0>
 8005636:	4640      	mov	r0, r8
 8005638:	6921      	ldr	r1, [r4, #16]
 800563a:	f000 f8cb 	bl	80057d4 <_free_r>
 800563e:	230c      	movs	r3, #12
 8005640:	f8c8 3000 	str.w	r3, [r8]
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	2300      	movs	r3, #0
 800564e:	60ab      	str	r3, [r5, #8]
 8005650:	606b      	str	r3, [r5, #4]
 8005652:	f04f 30ff 	mov.w	r0, #4294967295
 8005656:	e01d      	b.n	8005694 <__ssprint_r+0xec>
 8005658:	6127      	str	r7, [r4, #16]
 800565a:	ebca 030b 	rsb	r3, sl, fp
 800565e:	4457      	add	r7, sl
 8005660:	6027      	str	r7, [r4, #0]
 8005662:	f8c4 b014 	str.w	fp, [r4, #20]
 8005666:	4637      	mov	r7, r6
 8005668:	60a3      	str	r3, [r4, #8]
 800566a:	42be      	cmp	r6, r7
 800566c:	d200      	bcs.n	8005670 <__ssprint_r+0xc8>
 800566e:	4637      	mov	r7, r6
 8005670:	463a      	mov	r2, r7
 8005672:	6820      	ldr	r0, [r4, #0]
 8005674:	9901      	ldr	r1, [sp, #4]
 8005676:	f000 f965 	bl	8005944 <memmove>
 800567a:	68a3      	ldr	r3, [r4, #8]
 800567c:	1bdb      	subs	r3, r3, r7
 800567e:	60a3      	str	r3, [r4, #8]
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	441f      	add	r7, r3
 8005684:	68ab      	ldr	r3, [r5, #8]
 8005686:	6027      	str	r7, [r4, #0]
 8005688:	1b9e      	subs	r6, r3, r6
 800568a:	60ae      	str	r6, [r5, #8]
 800568c:	2e00      	cmp	r6, #0
 800568e:	d19a      	bne.n	80055c6 <__ssprint_r+0x1e>
 8005690:	606e      	str	r6, [r5, #4]
 8005692:	4630      	mov	r0, r6
 8005694:	b003      	add	sp, #12
 8005696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800569c <_sbrk>:
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <_sbrk+0x28>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	b90a      	cbnz	r2, 80056a6 <_sbrk+0xa>
 80056a2:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <_sbrk+0x2c>)
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	466a      	mov	r2, sp
 80056aa:	4418      	add	r0, r3
 80056ac:	4290      	cmp	r0, r2
 80056ae:	d905      	bls.n	80056bc <_sbrk+0x20>
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <_sbrk+0x30>)
 80056b2:	220c      	movs	r2, #12
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	4770      	bx	lr
 80056bc:	4a01      	ldr	r2, [pc, #4]	; (80056c4 <_sbrk+0x28>)
 80056be:	6010      	str	r0, [r2, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	4770      	bx	lr
 80056c4:	2000059c 	.word	0x2000059c
 80056c8:	2000066c 	.word	0x2000066c
 80056cc:	20000668 	.word	0x20000668

080056d0 <_calloc_r>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	4351      	muls	r1, r2
 80056d4:	f7ff fa28 	bl	8004b28 <_malloc_r>
 80056d8:	4604      	mov	r4, r0
 80056da:	b320      	cbz	r0, 8005726 <_calloc_r+0x56>
 80056dc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80056e0:	f022 0203 	bic.w	r2, r2, #3
 80056e4:	3a04      	subs	r2, #4
 80056e6:	2a24      	cmp	r2, #36	; 0x24
 80056e8:	d81a      	bhi.n	8005720 <_calloc_r+0x50>
 80056ea:	2a13      	cmp	r2, #19
 80056ec:	d912      	bls.n	8005714 <_calloc_r+0x44>
 80056ee:	2100      	movs	r1, #0
 80056f0:	2a1b      	cmp	r2, #27
 80056f2:	6001      	str	r1, [r0, #0]
 80056f4:	6041      	str	r1, [r0, #4]
 80056f6:	d802      	bhi.n	80056fe <_calloc_r+0x2e>
 80056f8:	f100 0308 	add.w	r3, r0, #8
 80056fc:	e00b      	b.n	8005716 <_calloc_r+0x46>
 80056fe:	2a24      	cmp	r2, #36	; 0x24
 8005700:	6081      	str	r1, [r0, #8]
 8005702:	60c1      	str	r1, [r0, #12]
 8005704:	bf11      	iteee	ne
 8005706:	f100 0310 	addne.w	r3, r0, #16
 800570a:	6101      	streq	r1, [r0, #16]
 800570c:	f100 0318 	addeq.w	r3, r0, #24
 8005710:	6141      	streq	r1, [r0, #20]
 8005712:	e000      	b.n	8005716 <_calloc_r+0x46>
 8005714:	4603      	mov	r3, r0
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	e002      	b.n	8005726 <_calloc_r+0x56>
 8005720:	2100      	movs	r1, #0
 8005722:	f7fd fbcf 	bl	8002ec4 <memset>
 8005726:	4620      	mov	r0, r4
 8005728:	bd10      	pop	{r4, pc}
	...

0800572c <_malloc_trim_r>:
 800572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4d24      	ldr	r5, [pc, #144]	; (80057c4 <_malloc_trim_r+0x98>)
 8005732:	4f25      	ldr	r7, [pc, #148]	; (80057c8 <_malloc_trim_r+0x9c>)
 8005734:	460e      	mov	r6, r1
 8005736:	4604      	mov	r4, r0
 8005738:	f7ff fc20 	bl	8004f7c <__malloc_lock>
 800573c:	68ab      	ldr	r3, [r5, #8]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f023 0803 	bic.w	r8, r3, #3
 8005744:	f1a7 0311 	sub.w	r3, r7, #17
 8005748:	4443      	add	r3, r8
 800574a:	1b9e      	subs	r6, r3, r6
 800574c:	fbb6 f6f7 	udiv	r6, r6, r7
 8005750:	3e01      	subs	r6, #1
 8005752:	437e      	muls	r6, r7
 8005754:	42be      	cmp	r6, r7
 8005756:	da05      	bge.n	8005764 <_malloc_trim_r+0x38>
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fc10 	bl	8004f7e <__malloc_unlock>
 800575e:	2000      	movs	r0, #0
 8005760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005764:	4620      	mov	r0, r4
 8005766:	2100      	movs	r1, #0
 8005768:	f7ff ff0e 	bl	8005588 <_sbrk_r>
 800576c:	68ab      	ldr	r3, [r5, #8]
 800576e:	4443      	add	r3, r8
 8005770:	4298      	cmp	r0, r3
 8005772:	d1f1      	bne.n	8005758 <_malloc_trim_r+0x2c>
 8005774:	4620      	mov	r0, r4
 8005776:	4271      	negs	r1, r6
 8005778:	f7ff ff06 	bl	8005588 <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d110      	bne.n	80057a2 <_malloc_trim_r+0x76>
 8005780:	4620      	mov	r0, r4
 8005782:	2100      	movs	r1, #0
 8005784:	f7ff ff00 	bl	8005588 <_sbrk_r>
 8005788:	68ab      	ldr	r3, [r5, #8]
 800578a:	1ac2      	subs	r2, r0, r3
 800578c:	2a0f      	cmp	r2, #15
 800578e:	dde3      	ble.n	8005758 <_malloc_trim_r+0x2c>
 8005790:	490e      	ldr	r1, [pc, #56]	; (80057cc <_malloc_trim_r+0xa0>)
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	1a40      	subs	r0, r0, r1
 8005796:	490e      	ldr	r1, [pc, #56]	; (80057d0 <_malloc_trim_r+0xa4>)
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	6008      	str	r0, [r1, #0]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	e7da      	b.n	8005758 <_malloc_trim_r+0x2c>
 80057a2:	68ab      	ldr	r3, [r5, #8]
 80057a4:	ebc6 0808 	rsb	r8, r6, r8
 80057a8:	f048 0201 	orr.w	r2, r8, #1
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <_malloc_trim_r+0xa4>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4620      	mov	r0, r4
 80057b4:	1b96      	subs	r6, r2, r6
 80057b6:	601e      	str	r6, [r3, #0]
 80057b8:	f7ff fbe1 	bl	8004f7e <__malloc_unlock>
 80057bc:	2001      	movs	r0, #1
 80057be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c2:	bf00      	nop
 80057c4:	20000130 	.word	0x20000130
 80057c8:	00001000 	.word	0x00001000
 80057cc:	2000053c 	.word	0x2000053c
 80057d0:	20000574 	.word	0x20000574

080057d4 <_free_r>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	4606      	mov	r6, r0
 80057d8:	460d      	mov	r5, r1
 80057da:	2900      	cmp	r1, #0
 80057dc:	f000 80a9 	beq.w	8005932 <_free_r+0x15e>
 80057e0:	f7ff fbcc 	bl	8004f7c <__malloc_lock>
 80057e4:	f855 cc04 	ldr.w	ip, [r5, #-4]
 80057e8:	4c52      	ldr	r4, [pc, #328]	; (8005934 <_free_r+0x160>)
 80057ea:	f1a5 0308 	sub.w	r3, r5, #8
 80057ee:	f02c 0201 	bic.w	r2, ip, #1
 80057f2:	1898      	adds	r0, r3, r2
 80057f4:	68a1      	ldr	r1, [r4, #8]
 80057f6:	6847      	ldr	r7, [r0, #4]
 80057f8:	4288      	cmp	r0, r1
 80057fa:	f027 0703 	bic.w	r7, r7, #3
 80057fe:	f00c 0101 	and.w	r1, ip, #1
 8005802:	d11b      	bne.n	800583c <_free_r+0x68>
 8005804:	443a      	add	r2, r7
 8005806:	b939      	cbnz	r1, 8005818 <_free_r+0x44>
 8005808:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800580c:	1a5b      	subs	r3, r3, r1
 800580e:	440a      	add	r2, r1
 8005810:	6898      	ldr	r0, [r3, #8]
 8005812:	68d9      	ldr	r1, [r3, #12]
 8005814:	60c1      	str	r1, [r0, #12]
 8005816:	6088      	str	r0, [r1, #8]
 8005818:	f042 0101 	orr.w	r1, r2, #1
 800581c:	6059      	str	r1, [r3, #4]
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <_free_r+0x164>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d304      	bcc.n	8005832 <_free_r+0x5e>
 8005828:	4b44      	ldr	r3, [pc, #272]	; (800593c <_free_r+0x168>)
 800582a:	4630      	mov	r0, r6
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	f7ff ff7d 	bl	800572c <_malloc_trim_r>
 8005832:	4630      	mov	r0, r6
 8005834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005838:	f7ff bba1 	b.w	8004f7e <__malloc_unlock>
 800583c:	6047      	str	r7, [r0, #4]
 800583e:	b979      	cbnz	r1, 8005860 <_free_r+0x8c>
 8005840:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8005844:	1b5b      	subs	r3, r3, r5
 8005846:	442a      	add	r2, r5
 8005848:	689d      	ldr	r5, [r3, #8]
 800584a:	f104 0c08 	add.w	ip, r4, #8
 800584e:	4565      	cmp	r5, ip
 8005850:	d008      	beq.n	8005864 <_free_r+0x90>
 8005852:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005856:	f8c5 c00c 	str.w	ip, [r5, #12]
 800585a:	f8cc 5008 	str.w	r5, [ip, #8]
 800585e:	e002      	b.n	8005866 <_free_r+0x92>
 8005860:	2100      	movs	r1, #0
 8005862:	e000      	b.n	8005866 <_free_r+0x92>
 8005864:	2101      	movs	r1, #1
 8005866:	19c5      	adds	r5, r0, r7
 8005868:	686d      	ldr	r5, [r5, #4]
 800586a:	07ed      	lsls	r5, r5, #31
 800586c:	d40e      	bmi.n	800588c <_free_r+0xb8>
 800586e:	443a      	add	r2, r7
 8005870:	6885      	ldr	r5, [r0, #8]
 8005872:	b941      	cbnz	r1, 8005886 <_free_r+0xb2>
 8005874:	4f32      	ldr	r7, [pc, #200]	; (8005940 <_free_r+0x16c>)
 8005876:	42bd      	cmp	r5, r7
 8005878:	d105      	bne.n	8005886 <_free_r+0xb2>
 800587a:	6163      	str	r3, [r4, #20]
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	2101      	movs	r1, #1
 8005880:	60dd      	str	r5, [r3, #12]
 8005882:	609d      	str	r5, [r3, #8]
 8005884:	e002      	b.n	800588c <_free_r+0xb8>
 8005886:	68c0      	ldr	r0, [r0, #12]
 8005888:	60e8      	str	r0, [r5, #12]
 800588a:	6085      	str	r5, [r0, #8]
 800588c:	f042 0001 	orr.w	r0, r2, #1
 8005890:	6058      	str	r0, [r3, #4]
 8005892:	509a      	str	r2, [r3, r2]
 8005894:	2900      	cmp	r1, #0
 8005896:	d1cc      	bne.n	8005832 <_free_r+0x5e>
 8005898:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800589c:	d20e      	bcs.n	80058bc <_free_r+0xe8>
 800589e:	08d2      	lsrs	r2, r2, #3
 80058a0:	1091      	asrs	r1, r2, #2
 80058a2:	2001      	movs	r0, #1
 80058a4:	4088      	lsls	r0, r1
 80058a6:	6861      	ldr	r1, [r4, #4]
 80058a8:	4301      	orrs	r1, r0
 80058aa:	6061      	str	r1, [r4, #4]
 80058ac:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 80058b0:	68a2      	ldr	r2, [r4, #8]
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	60dc      	str	r4, [r3, #12]
 80058b6:	60a3      	str	r3, [r4, #8]
 80058b8:	60d3      	str	r3, [r2, #12]
 80058ba:	e7ba      	b.n	8005832 <_free_r+0x5e>
 80058bc:	0a51      	lsrs	r1, r2, #9
 80058be:	2904      	cmp	r1, #4
 80058c0:	d802      	bhi.n	80058c8 <_free_r+0xf4>
 80058c2:	0991      	lsrs	r1, r2, #6
 80058c4:	3138      	adds	r1, #56	; 0x38
 80058c6:	e015      	b.n	80058f4 <_free_r+0x120>
 80058c8:	2914      	cmp	r1, #20
 80058ca:	d801      	bhi.n	80058d0 <_free_r+0xfc>
 80058cc:	315b      	adds	r1, #91	; 0x5b
 80058ce:	e011      	b.n	80058f4 <_free_r+0x120>
 80058d0:	2954      	cmp	r1, #84	; 0x54
 80058d2:	d802      	bhi.n	80058da <_free_r+0x106>
 80058d4:	0b11      	lsrs	r1, r2, #12
 80058d6:	316e      	adds	r1, #110	; 0x6e
 80058d8:	e00c      	b.n	80058f4 <_free_r+0x120>
 80058da:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 80058de:	d802      	bhi.n	80058e6 <_free_r+0x112>
 80058e0:	0bd1      	lsrs	r1, r2, #15
 80058e2:	3177      	adds	r1, #119	; 0x77
 80058e4:	e006      	b.n	80058f4 <_free_r+0x120>
 80058e6:	f240 5054 	movw	r0, #1364	; 0x554
 80058ea:	4281      	cmp	r1, r0
 80058ec:	bf9a      	itte	ls
 80058ee:	0c91      	lsrls	r1, r2, #18
 80058f0:	317c      	addls	r1, #124	; 0x7c
 80058f2:	217e      	movhi	r1, #126	; 0x7e
 80058f4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 80058f8:	480e      	ldr	r0, [pc, #56]	; (8005934 <_free_r+0x160>)
 80058fa:	68a5      	ldr	r5, [r4, #8]
 80058fc:	42a5      	cmp	r5, r4
 80058fe:	d001      	beq.n	8005904 <_free_r+0x130>
 8005900:	4629      	mov	r1, r5
 8005902:	e00b      	b.n	800591c <_free_r+0x148>
 8005904:	2201      	movs	r2, #1
 8005906:	1089      	asrs	r1, r1, #2
 8005908:	fa02 f101 	lsl.w	r1, r2, r1
 800590c:	6842      	ldr	r2, [r0, #4]
 800590e:	430a      	orrs	r2, r1
 8005910:	6042      	str	r2, [r0, #4]
 8005912:	4629      	mov	r1, r5
 8005914:	e008      	b.n	8005928 <_free_r+0x154>
 8005916:	6889      	ldr	r1, [r1, #8]
 8005918:	42a1      	cmp	r1, r4
 800591a:	d004      	beq.n	8005926 <_free_r+0x152>
 800591c:	6848      	ldr	r0, [r1, #4]
 800591e:	f020 0003 	bic.w	r0, r0, #3
 8005922:	4282      	cmp	r2, r0
 8005924:	d3f7      	bcc.n	8005916 <_free_r+0x142>
 8005926:	68cd      	ldr	r5, [r1, #12]
 8005928:	60dd      	str	r5, [r3, #12]
 800592a:	6099      	str	r1, [r3, #8]
 800592c:	60ab      	str	r3, [r5, #8]
 800592e:	60cb      	str	r3, [r1, #12]
 8005930:	e77f      	b.n	8005832 <_free_r+0x5e>
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	20000130 	.word	0x20000130
 8005938:	20000538 	.word	0x20000538
 800593c:	20000570 	.word	0x20000570
 8005940:	20000138 	.word	0x20000138

08005944 <memmove>:
 8005944:	4281      	cmp	r1, r0
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	d301      	bcc.n	800594e <memmove+0xa>
 800594a:	2300      	movs	r3, #0
 800594c:	e00e      	b.n	800596c <memmove+0x28>
 800594e:	188c      	adds	r4, r1, r2
 8005950:	42a0      	cmp	r0, r4
 8005952:	d2fa      	bcs.n	800594a <memmove+0x6>
 8005954:	1885      	adds	r5, r0, r2
 8005956:	4613      	mov	r3, r2
 8005958:	f113 33ff 	adds.w	r3, r3, #4294967295
 800595c:	d305      	bcc.n	800596a <memmove+0x26>
 800595e:	4251      	negs	r1, r2
 8005960:	1866      	adds	r6, r4, r1
 8005962:	4429      	add	r1, r5
 8005964:	5cf6      	ldrb	r6, [r6, r3]
 8005966:	54ce      	strb	r6, [r1, r3]
 8005968:	e7f6      	b.n	8005958 <memmove+0x14>
 800596a:	bd70      	pop	{r4, r5, r6, pc}
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <memmove+0x34>
 8005970:	5ccc      	ldrb	r4, [r1, r3]
 8005972:	54c4      	strb	r4, [r0, r3]
 8005974:	3301      	adds	r3, #1
 8005976:	e7f9      	b.n	800596c <memmove+0x28>
 8005978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800597c <_realloc_r>:
 800597c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	4681      	mov	r9, r0
 8005982:	460c      	mov	r4, r1
 8005984:	b929      	cbnz	r1, 8005992 <_realloc_r+0x16>
 8005986:	4611      	mov	r1, r2
 8005988:	b003      	add	sp, #12
 800598a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598e:	f7ff b8cb 	b.w	8004b28 <_malloc_r>
 8005992:	9201      	str	r2, [sp, #4]
 8005994:	f7ff faf2 	bl	8004f7c <__malloc_lock>
 8005998:	9a01      	ldr	r2, [sp, #4]
 800599a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800599e:	f102 070b 	add.w	r7, r2, #11
 80059a2:	2f16      	cmp	r7, #22
 80059a4:	f1a4 0808 	sub.w	r8, r4, #8
 80059a8:	f025 0603 	bic.w	r6, r5, #3
 80059ac:	d903      	bls.n	80059b6 <_realloc_r+0x3a>
 80059ae:	f037 0707 	bics.w	r7, r7, #7
 80059b2:	d501      	bpl.n	80059b8 <_realloc_r+0x3c>
 80059b4:	e002      	b.n	80059bc <_realloc_r+0x40>
 80059b6:	2710      	movs	r7, #16
 80059b8:	4297      	cmp	r7, r2
 80059ba:	d204      	bcs.n	80059c6 <_realloc_r+0x4a>
 80059bc:	230c      	movs	r3, #12
 80059be:	f8c9 3000 	str.w	r3, [r9]
 80059c2:	2000      	movs	r0, #0
 80059c4:	e17e      	b.n	8005cc4 <_realloc_r+0x348>
 80059c6:	42be      	cmp	r6, r7
 80059c8:	f280 8154 	bge.w	8005c74 <_realloc_r+0x2f8>
 80059cc:	49a2      	ldr	r1, [pc, #648]	; (8005c58 <_realloc_r+0x2dc>)
 80059ce:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80059d2:	eb08 0306 	add.w	r3, r8, r6
 80059d6:	4573      	cmp	r3, lr
 80059d8:	468b      	mov	fp, r1
 80059da:	6858      	ldr	r0, [r3, #4]
 80059dc:	d005      	beq.n	80059ea <_realloc_r+0x6e>
 80059de:	f020 0101 	bic.w	r1, r0, #1
 80059e2:	4419      	add	r1, r3
 80059e4:	6849      	ldr	r1, [r1, #4]
 80059e6:	07c9      	lsls	r1, r1, #31
 80059e8:	d425      	bmi.n	8005a36 <_realloc_r+0xba>
 80059ea:	f020 0003 	bic.w	r0, r0, #3
 80059ee:	4573      	cmp	r3, lr
 80059f0:	eb00 0106 	add.w	r1, r0, r6
 80059f4:	d117      	bne.n	8005a26 <_realloc_r+0xaa>
 80059f6:	f107 0c10 	add.w	ip, r7, #16
 80059fa:	4561      	cmp	r1, ip
 80059fc:	db1d      	blt.n	8005a3a <_realloc_r+0xbe>
 80059fe:	eb08 0507 	add.w	r5, r8, r7
 8005a02:	1bc9      	subs	r1, r1, r7
 8005a04:	f041 0101 	orr.w	r1, r1, #1
 8005a08:	f8cb 5008 	str.w	r5, [fp, #8]
 8005a0c:	6069      	str	r1, [r5, #4]
 8005a0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	431f      	orrs	r7, r3
 8005a18:	4648      	mov	r0, r9
 8005a1a:	f844 7c04 	str.w	r7, [r4, #-4]
 8005a1e:	f7ff faae 	bl	8004f7e <__malloc_unlock>
 8005a22:	4620      	mov	r0, r4
 8005a24:	e14e      	b.n	8005cc4 <_realloc_r+0x348>
 8005a26:	42b9      	cmp	r1, r7
 8005a28:	db07      	blt.n	8005a3a <_realloc_r+0xbe>
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	460e      	mov	r6, r1
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	6093      	str	r3, [r2, #8]
 8005a34:	e11e      	b.n	8005c74 <_realloc_r+0x2f8>
 8005a36:	2000      	movs	r0, #0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	07e9      	lsls	r1, r5, #31
 8005a3c:	f100 80c9 	bmi.w	8005bd2 <_realloc_r+0x256>
 8005a40:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005a44:	ebc5 0508 	rsb	r5, r5, r8
 8005a48:	6869      	ldr	r1, [r5, #4]
 8005a4a:	f021 0103 	bic.w	r1, r1, #3
 8005a4e:	eb01 0a06 	add.w	sl, r1, r6
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 8088 	beq.w	8005b68 <_realloc_r+0x1ec>
 8005a58:	4573      	cmp	r3, lr
 8005a5a:	d14b      	bne.n	8005af4 <_realloc_r+0x178>
 8005a5c:	eb0a 0300 	add.w	r3, sl, r0
 8005a60:	f107 0110 	add.w	r1, r7, #16
 8005a64:	428b      	cmp	r3, r1
 8005a66:	db7f      	blt.n	8005b68 <_realloc_r+0x1ec>
 8005a68:	46a8      	mov	r8, r5
 8005a6a:	68ea      	ldr	r2, [r5, #12]
 8005a6c:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8005a70:	60ca      	str	r2, [r1, #12]
 8005a72:	6091      	str	r1, [r2, #8]
 8005a74:	1f32      	subs	r2, r6, #4
 8005a76:	2a24      	cmp	r2, #36	; 0x24
 8005a78:	d825      	bhi.n	8005ac6 <_realloc_r+0x14a>
 8005a7a:	2a13      	cmp	r2, #19
 8005a7c:	d91b      	bls.n	8005ab6 <_realloc_r+0x13a>
 8005a7e:	6821      	ldr	r1, [r4, #0]
 8005a80:	60a9      	str	r1, [r5, #8]
 8005a82:	6861      	ldr	r1, [r4, #4]
 8005a84:	60e9      	str	r1, [r5, #12]
 8005a86:	2a1b      	cmp	r2, #27
 8005a88:	d803      	bhi.n	8005a92 <_realloc_r+0x116>
 8005a8a:	f105 0210 	add.w	r2, r5, #16
 8005a8e:	3408      	adds	r4, #8
 8005a90:	e012      	b.n	8005ab8 <_realloc_r+0x13c>
 8005a92:	68a1      	ldr	r1, [r4, #8]
 8005a94:	6129      	str	r1, [r5, #16]
 8005a96:	68e1      	ldr	r1, [r4, #12]
 8005a98:	6169      	str	r1, [r5, #20]
 8005a9a:	2a24      	cmp	r2, #36	; 0x24
 8005a9c:	d003      	beq.n	8005aa6 <_realloc_r+0x12a>
 8005a9e:	f105 0218 	add.w	r2, r5, #24
 8005aa2:	3410      	adds	r4, #16
 8005aa4:	e008      	b.n	8005ab8 <_realloc_r+0x13c>
 8005aa6:	6922      	ldr	r2, [r4, #16]
 8005aa8:	61aa      	str	r2, [r5, #24]
 8005aaa:	6961      	ldr	r1, [r4, #20]
 8005aac:	61e9      	str	r1, [r5, #28]
 8005aae:	f105 0220 	add.w	r2, r5, #32
 8005ab2:	3418      	adds	r4, #24
 8005ab4:	e000      	b.n	8005ab8 <_realloc_r+0x13c>
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	6011      	str	r1, [r2, #0]
 8005abc:	6861      	ldr	r1, [r4, #4]
 8005abe:	6051      	str	r1, [r2, #4]
 8005ac0:	68a1      	ldr	r1, [r4, #8]
 8005ac2:	6091      	str	r1, [r2, #8]
 8005ac4:	e005      	b.n	8005ad2 <_realloc_r+0x156>
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4621      	mov	r1, r4
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	f7ff ff3a 	bl	8005944 <memmove>
 8005ad0:	9b01      	ldr	r3, [sp, #4]
 8005ad2:	19ea      	adds	r2, r5, r7
 8005ad4:	1bdb      	subs	r3, r3, r7
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	f8cb 2008 	str.w	r2, [fp, #8]
 8005ade:	6053      	str	r3, [r2, #4]
 8005ae0:	686b      	ldr	r3, [r5, #4]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	431f      	orrs	r7, r3
 8005ae8:	4648      	mov	r0, r9
 8005aea:	606f      	str	r7, [r5, #4]
 8005aec:	f7ff fa47 	bl	8004f7e <__malloc_unlock>
 8005af0:	4640      	mov	r0, r8
 8005af2:	e0e7      	b.n	8005cc4 <_realloc_r+0x348>
 8005af4:	eb0a 0b00 	add.w	fp, sl, r0
 8005af8:	45bb      	cmp	fp, r7
 8005afa:	db35      	blt.n	8005b68 <_realloc_r+0x1ec>
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4628      	mov	r0, r5
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	6093      	str	r3, [r2, #8]
 8005b06:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005b0a:	68eb      	ldr	r3, [r5, #12]
 8005b0c:	60d3      	str	r3, [r2, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	1f32      	subs	r2, r6, #4
 8005b12:	2a24      	cmp	r2, #36	; 0x24
 8005b14:	d823      	bhi.n	8005b5e <_realloc_r+0x1e2>
 8005b16:	2a13      	cmp	r2, #19
 8005b18:	d91a      	bls.n	8005b50 <_realloc_r+0x1d4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	60ab      	str	r3, [r5, #8]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	60eb      	str	r3, [r5, #12]
 8005b22:	2a1b      	cmp	r2, #27
 8005b24:	d803      	bhi.n	8005b2e <_realloc_r+0x1b2>
 8005b26:	f105 0010 	add.w	r0, r5, #16
 8005b2a:	3408      	adds	r4, #8
 8005b2c:	e010      	b.n	8005b50 <_realloc_r+0x1d4>
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	612b      	str	r3, [r5, #16]
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	616b      	str	r3, [r5, #20]
 8005b36:	2a24      	cmp	r2, #36	; 0x24
 8005b38:	d003      	beq.n	8005b42 <_realloc_r+0x1c6>
 8005b3a:	f105 0018 	add.w	r0, r5, #24
 8005b3e:	3410      	adds	r4, #16
 8005b40:	e006      	b.n	8005b50 <_realloc_r+0x1d4>
 8005b42:	6923      	ldr	r3, [r4, #16]
 8005b44:	61ab      	str	r3, [r5, #24]
 8005b46:	6963      	ldr	r3, [r4, #20]
 8005b48:	61eb      	str	r3, [r5, #28]
 8005b4a:	f105 0020 	add.w	r0, r5, #32
 8005b4e:	3418      	adds	r4, #24
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	6003      	str	r3, [r0, #0]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	6043      	str	r3, [r0, #4]
 8005b58:	68a3      	ldr	r3, [r4, #8]
 8005b5a:	6083      	str	r3, [r0, #8]
 8005b5c:	e002      	b.n	8005b64 <_realloc_r+0x1e8>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f7ff fef0 	bl	8005944 <memmove>
 8005b64:	465e      	mov	r6, fp
 8005b66:	e02e      	b.n	8005bc6 <_realloc_r+0x24a>
 8005b68:	45ba      	cmp	sl, r7
 8005b6a:	db32      	blt.n	8005bd2 <_realloc_r+0x256>
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	68eb      	ldr	r3, [r5, #12]
 8005b70:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005b74:	60d3      	str	r3, [r2, #12]
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	1f32      	subs	r2, r6, #4
 8005b7a:	2a24      	cmp	r2, #36	; 0x24
 8005b7c:	d825      	bhi.n	8005bca <_realloc_r+0x24e>
 8005b7e:	2a13      	cmp	r2, #19
 8005b80:	d91a      	bls.n	8005bb8 <_realloc_r+0x23c>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	60ab      	str	r3, [r5, #8]
 8005b86:	6863      	ldr	r3, [r4, #4]
 8005b88:	60eb      	str	r3, [r5, #12]
 8005b8a:	2a1b      	cmp	r2, #27
 8005b8c:	d803      	bhi.n	8005b96 <_realloc_r+0x21a>
 8005b8e:	f105 0010 	add.w	r0, r5, #16
 8005b92:	3408      	adds	r4, #8
 8005b94:	e010      	b.n	8005bb8 <_realloc_r+0x23c>
 8005b96:	68a3      	ldr	r3, [r4, #8]
 8005b98:	612b      	str	r3, [r5, #16]
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	616b      	str	r3, [r5, #20]
 8005b9e:	2a24      	cmp	r2, #36	; 0x24
 8005ba0:	d003      	beq.n	8005baa <_realloc_r+0x22e>
 8005ba2:	f105 0018 	add.w	r0, r5, #24
 8005ba6:	3410      	adds	r4, #16
 8005ba8:	e006      	b.n	8005bb8 <_realloc_r+0x23c>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	61ab      	str	r3, [r5, #24]
 8005bae:	6963      	ldr	r3, [r4, #20]
 8005bb0:	61eb      	str	r3, [r5, #28]
 8005bb2:	f105 0020 	add.w	r0, r5, #32
 8005bb6:	3418      	adds	r4, #24
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	6003      	str	r3, [r0, #0]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	6043      	str	r3, [r0, #4]
 8005bc0:	68a3      	ldr	r3, [r4, #8]
 8005bc2:	6083      	str	r3, [r0, #8]
 8005bc4:	4656      	mov	r6, sl
 8005bc6:	46a8      	mov	r8, r5
 8005bc8:	e054      	b.n	8005c74 <_realloc_r+0x2f8>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	f7ff feba 	bl	8005944 <memmove>
 8005bd0:	e7f8      	b.n	8005bc4 <_realloc_r+0x248>
 8005bd2:	4648      	mov	r0, r9
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	f7fe ffa7 	bl	8004b28 <_malloc_r>
 8005bda:	4605      	mov	r5, r0
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d044      	beq.n	8005c6a <_realloc_r+0x2ee>
 8005be0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f1a0 0208 	sub.w	r2, r0, #8
 8005bec:	4443      	add	r3, r8
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d105      	bne.n	8005bfe <_realloc_r+0x282>
 8005bf2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	441e      	add	r6, r3
 8005bfc:	e03a      	b.n	8005c74 <_realloc_r+0x2f8>
 8005bfe:	1f32      	subs	r2, r6, #4
 8005c00:	2a24      	cmp	r2, #36	; 0x24
 8005c02:	d82b      	bhi.n	8005c5c <_realloc_r+0x2e0>
 8005c04:	2a13      	cmp	r2, #19
 8005c06:	d91e      	bls.n	8005c46 <_realloc_r+0x2ca>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	6003      	str	r3, [r0, #0]
 8005c0c:	6863      	ldr	r3, [r4, #4]
 8005c0e:	6043      	str	r3, [r0, #4]
 8005c10:	2a1b      	cmp	r2, #27
 8005c12:	d804      	bhi.n	8005c1e <_realloc_r+0x2a2>
 8005c14:	f100 0308 	add.w	r3, r0, #8
 8005c18:	f104 0208 	add.w	r2, r4, #8
 8005c1c:	e015      	b.n	8005c4a <_realloc_r+0x2ce>
 8005c1e:	68a3      	ldr	r3, [r4, #8]
 8005c20:	6083      	str	r3, [r0, #8]
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	60c3      	str	r3, [r0, #12]
 8005c26:	2a24      	cmp	r2, #36	; 0x24
 8005c28:	d004      	beq.n	8005c34 <_realloc_r+0x2b8>
 8005c2a:	f100 0310 	add.w	r3, r0, #16
 8005c2e:	f104 0210 	add.w	r2, r4, #16
 8005c32:	e00a      	b.n	8005c4a <_realloc_r+0x2ce>
 8005c34:	6923      	ldr	r3, [r4, #16]
 8005c36:	6103      	str	r3, [r0, #16]
 8005c38:	6961      	ldr	r1, [r4, #20]
 8005c3a:	6141      	str	r1, [r0, #20]
 8005c3c:	f100 0318 	add.w	r3, r0, #24
 8005c40:	f104 0218 	add.w	r2, r4, #24
 8005c44:	e001      	b.n	8005c4a <_realloc_r+0x2ce>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4622      	mov	r2, r4
 8005c4a:	6811      	ldr	r1, [r2, #0]
 8005c4c:	6019      	str	r1, [r3, #0]
 8005c4e:	6851      	ldr	r1, [r2, #4]
 8005c50:	6059      	str	r1, [r3, #4]
 8005c52:	6892      	ldr	r2, [r2, #8]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	e004      	b.n	8005c62 <_realloc_r+0x2e6>
 8005c58:	20000130 	.word	0x20000130
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	f7ff fe71 	bl	8005944 <memmove>
 8005c62:	4648      	mov	r0, r9
 8005c64:	4621      	mov	r1, r4
 8005c66:	f7ff fdb5 	bl	80057d4 <_free_r>
 8005c6a:	4648      	mov	r0, r9
 8005c6c:	f7ff f987 	bl	8004f7e <__malloc_unlock>
 8005c70:	4628      	mov	r0, r5
 8005c72:	e027      	b.n	8005cc4 <_realloc_r+0x348>
 8005c74:	1bf3      	subs	r3, r6, r7
 8005c76:	2b0f      	cmp	r3, #15
 8005c78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005c7c:	d913      	bls.n	8005ca6 <_realloc_r+0x32a>
 8005c7e:	eb08 0107 	add.w	r1, r8, r7
 8005c82:	f002 0201 	and.w	r2, r2, #1
 8005c86:	4317      	orrs	r7, r2
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f8c8 7004 	str.w	r7, [r8, #4]
 8005c92:	604a      	str	r2, [r1, #4]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	4648      	mov	r0, r9
 8005c9e:	3108      	adds	r1, #8
 8005ca0:	f7ff fd98 	bl	80057d4 <_free_r>
 8005ca4:	e009      	b.n	8005cba <_realloc_r+0x33e>
 8005ca6:	f002 0201 	and.w	r2, r2, #1
 8005caa:	4332      	orrs	r2, r6
 8005cac:	4446      	add	r6, r8
 8005cae:	f8c8 2004 	str.w	r2, [r8, #4]
 8005cb2:	6873      	ldr	r3, [r6, #4]
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6073      	str	r3, [r6, #4]
 8005cba:	4648      	mov	r0, r9
 8005cbc:	f7ff f95f 	bl	8004f7e <__malloc_unlock>
 8005cc0:	f108 0008 	add.w	r0, r8, #8
 8005cc4:	b003      	add	sp, #12
 8005cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop

08005ccc <_init>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr

08005cd8 <_fini>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr
