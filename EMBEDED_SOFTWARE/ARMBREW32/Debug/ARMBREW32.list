
C:\Users\Rotule\Documents\GitHub\ARMbrew32c\ARMBREW32\Debug\ARMBREW32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000175c  08009ae8  08009ae8  00019ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b244  0800b244  0001b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  0800b254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000045e0  2000068c  0800b8e0  0002068c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20004c6c  0800b8e0  00024c6c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000232cc  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005088  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013274  00000000  00000000  00048a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001748  00000000  00000000  0005bc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001f80  00000000  00000000  0005d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c498  00000000  00000000  0005f350  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000080b9  00000000  00000000  0006b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000738a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004b84  00000000  00000000  00073920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000068c 	.word	0x2000068c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ad0 	.word	0x08009ad0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000690 	.word	0x20000690
 800020c:	08009ad0 	.word	0x08009ad0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efa:	2003      	movs	r0, #3
 8000efc:	f000 f808 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f004 f893 	bl	800502c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f06:	f003 ff8d 	bl	8004e24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	bd08      	pop	{r3, pc}
	...

08000f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f12:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000f2c:	60d3      	str	r3, [r2, #12]
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_NVIC_SetPriority+0x68>)
 8000f36:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	2c04      	cmp	r4, #4
 8000f46:	bf28      	it	cs
 8000f48:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	2d06      	cmp	r5, #6

  return (
 8000f4c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f50:	bf8c      	ite	hi
 8000f52:	3b03      	subhi	r3, #3
 8000f54:	2300      	movls	r3, #0

  return (
 8000f56:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000f5a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000f5c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000f60:	ea04 0401 	and.w	r4, r4, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	fa05 f303 	lsl.w	r3, r5, r3
 8000f6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000f70:	ea02 0203 	and.w	r2, r2, r3
 8000f74:	ea42 0204 	orr.w	r2, r2, r4
 8000f78:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000f7c:	da05      	bge.n	8000f8a <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	f000 000f 	and.w	r0, r0, #15
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_NVIC_SetPriority+0x6c>)
 8000f86:	541a      	strb	r2, [r3, r0]
 8000f88:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f94:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000f98:	bd30      	pop	{r4, r5, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	e000ed14 	.word	0xe000ed14

08000fa4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fa4:	0942      	lsrs	r2, r0, #5
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 001f 	and.w	r0, r0, #31
 8000fac:	fa03 f000 	lsl.w	r0, r3, r0
 8000fb0:	4b01      	ldr	r3, [pc, #4]	; (8000fb8 <HAL_NVIC_EnableIRQ+0x14>)
 8000fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fbc:	3801      	subs	r0, #1
 8000fbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fc2:	d20a      	bcs.n	8000fda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	21f0      	movs	r1, #240	; 0xf0
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fca:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fea:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	bf0c      	ite	eq
 8000ff0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ff4:	f022 0204 	bicne.w	r2, r2, #4
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001002:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	4d25      	ldr	r5, [pc, #148]	; (800109c <DMA2D_SetConfig+0x9c>)
 8001006:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8001008:	fa95 f5a5 	rbit	r5, r5
 800100c:	f006 4740 	and.w	r7, r6, #3221225472	; 0xc0000000
 8001010:	fab5 f585 	clz	r5, r5
 8001014:	9e05      	ldr	r6, [sp, #20]
 8001016:	40ab      	lsls	r3, r5
 8001018:	433e      	orrs	r6, r7
 800101a:	4333      	orrs	r3, r6
 800101c:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800101e:	6843      	ldr	r3, [r0, #4]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001020:	63e2      	str	r2, [r4, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001026:	d136      	bne.n	8001096 <DMA2D_SetConfig+0x96>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001028:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800102c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001030:	f401 427f 	and.w	r2, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001034:	b2cd      	uxtb	r5, r1
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001036:	6881      	ldr	r1, [r0, #8]
 8001038:	b921      	cbnz	r1, 8001044 <DMA2D_SetConfig+0x44>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800103a:	4333      	orrs	r3, r6
 800103c:	4313      	orrs	r3, r2
 800103e:	ea43 0105 	orr.w	r1, r3, r5
 8001042:	e026      	b.n	8001092 <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001044:	2901      	cmp	r1, #1
 8001046:	d103      	bne.n	8001050 <DMA2D_SetConfig+0x50>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8001048:	431a      	orrs	r2, r3
 800104a:	ea42 0105 	orr.w	r1, r2, r5
 800104e:	e020      	b.n	8001092 <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001050:	2902      	cmp	r1, #2
 8001052:	d107      	bne.n	8001064 <DMA2D_SetConfig+0x64>
    {
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 10);
      tmp4 = (tmp4 >> 3 );
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8001054:	0cd8      	lsrs	r0, r3, #19
 8001056:	0a92      	lsrs	r2, r2, #10
 8001058:	02c0      	lsls	r0, r0, #11
 800105a:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 800105e:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8001062:	e016      	b.n	8001092 <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001064:	2903      	cmp	r1, #3
 8001066:	d10a      	bne.n	800107e <DMA2D_SetConfig+0x7e>
    { 
      tmp1 = (tmp1 >> 31);
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 11);
      tmp4 = (tmp4 >> 3 );      
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8001068:	0cd8      	lsrs	r0, r3, #19
 800106a:	0ad2      	lsrs	r2, r2, #11
 800106c:	0280      	lsls	r0, r0, #10
 800106e:	0ff3      	lsrs	r3, r6, #31
 8001070:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8001074:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8001078:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 800107c:	e009      	b.n	8001092 <DMA2D_SetConfig+0x92>
    {
      tmp1 = (tmp1 >> 28);
      tmp2 = (tmp2 >> 20);
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800107e:	0d18      	lsrs	r0, r3, #20
 8001080:	0b12      	lsrs	r2, r2, #12
 8001082:	0200      	lsls	r0, r0, #8
 8001084:	0f33      	lsrs	r3, r6, #28
 8001086:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800108a:	ea42 1115 	orr.w	r1, r2, r5, lsr #4
 800108e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8001092:	63a1      	str	r1, [r4, #56]	; 0x38
 8001094:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001096:	60e1      	str	r1, [r4, #12]
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	bf00      	nop
 800109c:	3fff0000 	.word	0x3fff0000

080010a0 <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 80010a0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80010a2:	4604      	mov	r4, r0
 80010a4:	b330      	cbz	r0, 80010f4 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80010a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80010aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ae:	b91b      	cbnz	r3, 80010b8 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80010b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80010b4:	f003 fee6 	bl	8004e84 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80010b8:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80010ba:	2000      	movs	r0, #0
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80010bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80010c8:	6862      	ldr	r2, [r4, #4]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	f022 0107 	bic.w	r1, r2, #7
 80010d4:	68a2      	ldr	r2, [r4, #8]
 80010d6:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80010d8:	68e1      	ldr	r1, [r4, #12]

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80010da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80010dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010de:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80010e2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80010e6:	430a      	orrs	r2, r1
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80010ea:	2301      	movs	r3, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80010ec:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80010ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 80010f2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80010f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 80010fa:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80010fe:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001100:	2c01      	cmp	r4, #1
 8001102:	f04f 0402 	mov.w	r4, #2
 8001106:	d00e      	beq.n	8001126 <HAL_DMA2D_Start+0x2e>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001108:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800110c:	2601      	movs	r6, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800110e:	9c06      	ldr	r4, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001110:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001114:	9400      	str	r4, [sp, #0]
 8001116:	f7ff ff73 	bl	8001000 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800111a:	682a      	ldr	r2, [r5, #0]

  return HAL_OK;
 800111c:	2000      	movs	r0, #0
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800111e:	6813      	ldr	r3, [r2, #0]
 8001120:	4333      	orrs	r3, r6
 8001122:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001124:	e000      	b.n	8001128 <HAL_DMA2D_Start+0x30>
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001126:	4620      	mov	r0, r4

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 8001128:	b002      	add	sp, #8
 800112a:	bd70      	pop	{r4, r5, r6, pc}

0800112c <HAL_DMA2D_PollForTransfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 800112c:	2300      	movs	r3, #0
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800112e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 8001130:	9301      	str	r3, [sp, #4]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001132:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001134:	6803      	ldr	r3, [r0, #0]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001136:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	07db      	lsls	r3, r3, #31
 800113c:	d404      	bmi.n	8001148 <HAL_DMA2D_PollForTransfer+0x1c>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	69da      	ldr	r2, [r3, #28]
 8001142:	0696      	lsls	r6, r2, #26
 8001144:	d527      	bpl.n	8001196 <HAL_DMA2D_PollForTransfer+0x6a>
 8001146:	e033      	b.n	80011b0 <HAL_DMA2D_PollForTransfer+0x84>

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001148:	f004 f814 	bl	8005174 <HAL_GetTick>
 800114c:	4606      	mov	r6, r0

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	0792      	lsls	r2, r2, #30
 8001154:	d4f3      	bmi.n	800113e <HAL_DMA2D_PollForTransfer+0x12>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 800115a:	9a01      	ldr	r2, [sp, #4]
 800115c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001160:	d00f      	beq.n	8001182 <HAL_DMA2D_PollForTransfer+0x56>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001162:	9a01      	ldr	r2, [sp, #4]
 8001164:	0695      	lsls	r5, r2, #26
 8001166:	d503      	bpl.n	8001170 <HAL_DMA2D_PollForTransfer+0x44>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	f042 0202 	orr.w	r2, r2, #2
 800116e:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001170:	9a01      	ldr	r2, [sp, #4]
 8001172:	07d0      	lsls	r0, r2, #31
 8001174:	d503      	bpl.n	800117e <HAL_DMA2D_PollForTransfer+0x52>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001176:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800117e:	2221      	movs	r2, #33	; 0x21
 8001180:	e03b      	b.n	80011fa <HAL_DMA2D_PollForTransfer+0xce>
        __HAL_UNLOCK(hdma2d);
        
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001182:	1c69      	adds	r1, r5, #1
 8001184:	d0e4      	beq.n	8001150 <HAL_DMA2D_PollForTransfer+0x24>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001186:	2d00      	cmp	r5, #0
 8001188:	d041      	beq.n	800120e <HAL_DMA2D_PollForTransfer+0xe2>
 800118a:	f003 fff3 	bl	8005174 <HAL_GetTick>
 800118e:	1b80      	subs	r0, r0, r6
 8001190:	4285      	cmp	r5, r0
 8001192:	d2dc      	bcs.n	800114e <HAL_DMA2D_PollForTransfer+0x22>
 8001194:	e03b      	b.n	800120e <HAL_DMA2D_PollForTransfer+0xe2>
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001198:	069b      	lsls	r3, r3, #26
 800119a:	d409      	bmi.n	80011b0 <HAL_DMA2D_PollForTransfer+0x84>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	2212      	movs	r2, #18
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80011a0:	2000      	movs	r0, #0
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80011a2:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80011a4:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80011a6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80011aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
 80011ae:	e040      	b.n	8001232 <HAL_DMA2D_PollForTransfer+0x106>
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011b0:	f003 ffe0 	bl	8005174 <HAL_GetTick>
 80011b4:	4606      	mov	r6, r0
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80011b6:	e03a      	b.n	800122e <HAL_DMA2D_PollForTransfer+0x102>
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80011b8:	1c69      	adds	r1, r5, #1
 80011ba:	d127      	bne.n	800120c <HAL_DMA2D_PollForTransfer+0xe0>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	06d2      	lsls	r2, r2, #27
 80011c0:	d4ec      	bmi.n	800119c <HAL_DMA2D_PollForTransfer+0x70>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80011c6:	9a01      	ldr	r2, [sp, #4]
 80011c8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80011cc:	d0f4      	beq.n	80011b8 <HAL_DMA2D_PollForTransfer+0x8c>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80011ce:	9a01      	ldr	r2, [sp, #4]
 80011d0:	0716      	lsls	r6, r2, #28
 80011d2:	d503      	bpl.n	80011dc <HAL_DMA2D_PollForTransfer+0xb0>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 80011d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011d6:	f042 0204 	orr.w	r2, r2, #4
 80011da:	63e2      	str	r2, [r4, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	0695      	lsls	r5, r2, #26
 80011e0:	d503      	bpl.n	80011ea <HAL_DMA2D_PollForTransfer+0xbe>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80011e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011e4:	f042 0202 	orr.w	r2, r2, #2
 80011e8:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80011ea:	9a01      	ldr	r2, [sp, #4]
 80011ec:	07d0      	lsls	r0, r2, #31
 80011ee:	d503      	bpl.n	80011f8 <HAL_DMA2D_PollForTransfer+0xcc>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80011f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80011f8:	2229      	movs	r2, #41	; 0x29
 80011fa:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80011fc:	2304      	movs	r3, #4
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
 80011fe:	2001      	movs	r0, #1
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001200:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001204:	2300      	movs	r3, #0
 8001206:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          
        return HAL_ERROR;      
 800120a:	e012      	b.n	8001232 <HAL_DMA2D_PollForTransfer+0x106>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800120c:	b955      	cbnz	r5, 8001224 <HAL_DMA2D_PollForTransfer+0xf8>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800120e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001210:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	63e3      	str	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001218:	2300      	movs	r3, #0
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800121a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800121e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8001222:	e006      	b.n	8001232 <HAL_DMA2D_PollForTransfer+0x106>
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001224:	f003 ffa6 	bl	8005174 <HAL_GetTick>
 8001228:	1b80      	subs	r0, r0, r6
 800122a:	4285      	cmp	r5, r0
 800122c:	d3ef      	bcc.n	800120e <HAL_DMA2D_PollForTransfer+0xe2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	e7c4      	b.n	80011bc <HAL_DMA2D_PollForTransfer+0x90>
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
}
 8001232:	b002      	add	sp, #8
 8001234:	bd70      	pop	{r4, r5, r6, pc}
	...

08001238 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001238:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800123c:	2b01      	cmp	r3, #1
 800123e:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8001242:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001244:	d03a      	beq.n	80012bc <HAL_DMA2D_ConfigLayer+0x84>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8001246:	010e      	lsls	r6, r1, #4
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001248:	2201      	movs	r2, #1
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 800124a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800124e:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8001252:	1984      	adds	r4, r0, r6
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001254:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8001258:	69e7      	ldr	r7, [r4, #28]
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	fab3 f283 	clz	r2, r3
 8001262:	6a23      	ldr	r3, [r4, #32]
 8001264:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001266:	4093      	lsls	r3, r2
 8001268:	6804      	ldr	r4, [r0, #0]
 800126a:	ea43 0207 	orr.w	r2, r3, r7
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_POSITION_BGPFCCR_RBS);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800126e:	3f09      	subs	r7, #9
 8001270:	2f01      	cmp	r7, #1
 8001272:	d804      	bhi.n	800127e <HAL_DMA2D_ConfigLayer+0x46>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001274:	f005 437f 	and.w	r3, r5, #4278190080	; 0xff000000
 8001278:	4313      	orrs	r3, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800127a:	b951      	cbnz	r1, 8001292 <HAL_DMA2D_ConfigLayer+0x5a>
 800127c:	e020      	b.n	80012c0 <HAL_DMA2D_ConfigLayer+0x88>
 800127e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001282:	fa93 f3a3 	rbit	r3, r3
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	fa05 f303 	lsl.w	r3, r5, r3
 800128e:	4313      	orrs	r3, r2
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001290:	b311      	cbz	r1, 80012d8 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001292:	69e1      	ldr	r1, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8001294:	4406      	add	r6, r0
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_DMA2D_ConfigLayer+0xb0>)
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001298:	2f01      	cmp	r7, #1
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800129a:	ea02 0201 	and.w	r2, r2, r1
 800129e:	ea43 0302 	orr.w	r3, r3, r2
 80012a2:	61e3      	str	r3, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80012a4:	69b3      	ldr	r3, [r6, #24]
 80012a6:	6123      	str	r3, [r4, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012a8:	d802      	bhi.n	80012b0 <HAL_DMA2D_ConfigLayer+0x78>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 80012aa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80012ae:	6225      	str	r5, [r4, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 80012b6:	2300      	movs	r3, #0
 80012b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012bc:	4618      	mov	r0, r3
 80012be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_DMA2D_ConfigLayer+0xb0>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	4313      	orrs	r3, r2
 80012c8:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80012ca:	6983      	ldr	r3, [r0, #24]
 80012cc:	61a3      	str	r3, [r4, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80012ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80012d6:	e7eb      	b.n	80012b0 <HAL_DMA2D_ConfigLayer+0x78>
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012da:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <HAL_DMA2D_ConfigLayer+0xb0>)
 80012dc:	400a      	ands	r2, r1
 80012de:	4313      	orrs	r3, r2
 80012e0:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80012e2:	6983      	ldr	r3, [r0, #24]
 80012e4:	61a3      	str	r3, [r4, #24]
 80012e6:	e7e3      	b.n	80012b0 <HAL_DMA2D_ConfigLayer+0x78>
 80012e8:	00fcfff0 	.word	0x00fcfff0

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f0:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f2:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4e6f      	ldr	r6, [pc, #444]	; (80014b4 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012f8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80014bc <HAL_GPIO_Init+0x1d0>
 80012fe:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001300:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80014c0 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001304:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001306:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001308:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800130a:	ea32 0404 	bics.w	r4, r2, r4
 800130e:	f040 80c9 	bne.w	80014a4 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	684c      	ldr	r4, [r1, #4]
 8001314:	f024 0910 	bic.w	r9, r4, #16
 8001318:	f1b9 0f02 	cmp.w	r9, #2
 800131c:	d114      	bne.n	8001348 <HAL_GPIO_Init+0x5c>
 800131e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001322:	f003 0b07 	and.w	fp, r3, #7
 8001326:	250f      	movs	r5, #15
 8001328:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800132c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001330:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001334:	fa05 f50b 	lsl.w	r5, r5, fp
 8001338:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800133c:	690f      	ldr	r7, [r1, #16]
 800133e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001342:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001344:	f8ca 7020 	str.w	r7, [sl, #32]
 8001348:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800134c:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001350:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001354:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001358:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800135c:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001360:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001362:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001366:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800136a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800136e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001370:	d812      	bhi.n	8001398 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001372:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001374:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001378:	68cf      	ldr	r7, [r1, #12]
 800137a:	fa07 f70a 	lsl.w	r7, r7, sl
 800137e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001382:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8001386:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001388:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001392:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8001396:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001398:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800139a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800139c:	688f      	ldr	r7, [r1, #8]
 800139e:	fa07 f70a 	lsl.w	r7, r7, sl
 80013a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013a4:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	00e5      	lsls	r5, r4, #3
 80013a8:	d57c      	bpl.n	80014a4 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80013ae:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013b2:	f003 0a03 	and.w	sl, r3, #3
 80013b6:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80013be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80013ca:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80013ce:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80013d2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80013d6:	9503      	str	r5, [sp, #12]
 80013d8:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013da:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80013de:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013e2:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013e6:	4d34      	ldr	r5, [pc, #208]	; (80014b8 <HAL_GPIO_Init+0x1cc>)
 80013e8:	42a8      	cmp	r0, r5
 80013ea:	d024      	beq.n	8001436 <HAL_GPIO_Init+0x14a>
 80013ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d022      	beq.n	800143a <HAL_GPIO_Init+0x14e>
 80013f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d020      	beq.n	800143e <HAL_GPIO_Init+0x152>
 80013fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001400:	42a8      	cmp	r0, r5
 8001402:	d01e      	beq.n	8001442 <HAL_GPIO_Init+0x156>
 8001404:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001408:	42a8      	cmp	r0, r5
 800140a:	d01c      	beq.n	8001446 <HAL_GPIO_Init+0x15a>
 800140c:	4540      	cmp	r0, r8
 800140e:	d01c      	beq.n	800144a <HAL_GPIO_Init+0x15e>
 8001410:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001414:	42a8      	cmp	r0, r5
 8001416:	d01a      	beq.n	800144e <HAL_GPIO_Init+0x162>
 8001418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141c:	42a8      	cmp	r0, r5
 800141e:	d018      	beq.n	8001452 <HAL_GPIO_Init+0x166>
 8001420:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001424:	42a8      	cmp	r0, r5
 8001426:	d016      	beq.n	8001456 <HAL_GPIO_Init+0x16a>
 8001428:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800142c:	42a8      	cmp	r0, r5
 800142e:	bf14      	ite	ne
 8001430:	250a      	movne	r5, #10
 8001432:	2509      	moveq	r5, #9
 8001434:	e010      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 8001436:	2500      	movs	r5, #0
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 800143a:	2501      	movs	r5, #1
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 800143e:	2502      	movs	r5, #2
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 8001442:	2503      	movs	r5, #3
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 8001446:	2504      	movs	r5, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 800144a:	2505      	movs	r5, #5
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 800144e:	2506      	movs	r5, #6
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 8001452:	2507      	movs	r5, #7
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x16c>
 8001456:	2508      	movs	r5, #8
 8001458:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001460:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8001464:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001466:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146a:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800146c:	bf0c      	ite	eq
 800146e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001470:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001472:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001476:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 800147a:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800147e:	bf0c      	ite	eq
 8001480:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001482:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001484:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001488:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800148c:	bf0c      	ite	eq
 800148e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001490:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001492:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001494:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8001498:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800149c:	bf54      	ite	pl
 800149e:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80014a0:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80014a2:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014a4:	3301      	adds	r3, #1
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	f47f af2c 	bne.w	8001304 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80014ac:	b005      	add	sp, #20
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	bf00      	nop
 80014b4:	40013c00 	.word	0x40013c00
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40021400 	.word	0x40021400

080014c4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014c4:	6803      	ldr	r3, [r0, #0]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	0791      	lsls	r1, r2, #30
 80014ca:	d501      	bpl.n	80014d0 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	07d2      	lsls	r2, r2, #31
 80014d4:	d403      	bmi.n	80014de <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	4770      	bx	lr

080014e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80014e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80014e2:	6805      	ldr	r5, [r0, #0]
 80014e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80014e8:	4c05      	ldr	r4, [pc, #20]	; (8001500 <I2C_TransferConfig+0x20>)
 80014ea:	6868      	ldr	r0, [r5, #4]
 80014ec:	4004      	ands	r4, r0
 80014ee:	9803      	ldr	r0, [sp, #12]
 80014f0:	4320      	orrs	r0, r4
 80014f2:	4303      	orrs	r3, r0
 80014f4:	430b      	orrs	r3, r1

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80014f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80014fa:	606a      	str	r2, [r5, #4]
 80014fc:	bd30      	pop	{r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	fc009800 	.word	0xfc009800

08001504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001508:	9f06      	ldr	r7, [sp, #24]
 800150a:	4604      	mov	r4, r0
 800150c:	4688      	mov	r8, r1
 800150e:	4616      	mov	r6, r2
 8001510:	461d      	mov	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001512:	6822      	ldr	r2, [r4, #0]
 8001514:	6993      	ldr	r3, [r2, #24]
 8001516:	ea38 0303 	bics.w	r3, r8, r3
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	42b3      	cmp	r3, r6
 8001522:	d113      	bne.n	800154c <I2C_WaitOnFlagUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001524:	1c6b      	adds	r3, r5, #1
 8001526:	d0f5      	beq.n	8001514 <I2C_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001528:	b955      	cbnz	r5, 8001540 <I2C_WaitOnFlagUntilTimeout+0x3c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800152a:	2320      	movs	r3, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
 800152c:	2003      	movs	r0, #3
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800152e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001538:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001540:	f003 fe18 	bl	8005174 <HAL_GetTick>
 8001544:	1bc0      	subs	r0, r0, r7
 8001546:	4285      	cmp	r5, r0
 8001548:	d2e3      	bcs.n	8001512 <I2C_WaitOnFlagUntilTimeout+0xe>
 800154a:	e7ee      	b.n	800152a <I2C_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800154c:	2000      	movs	r0, #0
}
 800154e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001554 <I2C_IsAcknowledgeFailed>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001554:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001556:	b570      	push	{r4, r5, r6, lr}
 8001558:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800155a:	6998      	ldr	r0, [r3, #24]
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800155c:	460d      	mov	r5, r1
 800155e:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001560:	f010 0010 	ands.w	r0, r0, #16
 8001564:	d10b      	bne.n	800157e <I2C_IsAcknowledgeFailed+0x2a>
 8001566:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001568:	6999      	ldr	r1, [r3, #24]
 800156a:	068a      	lsls	r2, r1, #26
 800156c:	d413      	bmi.n	8001596 <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800156e:	1c69      	adds	r1, r5, #1
 8001570:	d0fa      	beq.n	8001568 <I2C_IsAcknowledgeFailed+0x14>
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001572:	b135      	cbz	r5, 8001582 <I2C_IsAcknowledgeFailed+0x2e>
 8001574:	f003 fdfe 	bl	8005174 <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	4285      	cmp	r5, r0
 800157c:	d301      	bcc.n	8001582 <I2C_IsAcknowledgeFailed+0x2e>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	e7f2      	b.n	8001568 <I2C_IsAcknowledgeFailed+0x14>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001582:	2320      	movs	r3, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001590:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001594:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001596:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001598:	2520      	movs	r5, #32

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800159a:	4620      	mov	r0, r4
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800159c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800159e:	61dd      	str	r5, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80015a0:	f7ff ff90 	bl	80014c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015a4:	6822      	ldr	r2, [r4, #0]
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <I2C_IsAcknowledgeFailed+0x70>)
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 80015a8:	2001      	movs	r0, #1

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015aa:	6851      	ldr	r1, [r2, #4]
 80015ac:	400b      	ands	r3, r1
 80015ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80015b0:	2304      	movs	r3, #4
 80015b2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b4:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 80015b6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
}
 80015c2:	bd70      	pop	{r4, r5, r6, pc}
 80015c4:	fe00e800 	.word	0xfe00e800

080015c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	079b      	lsls	r3, r3, #30
 80015d6:	d41c      	bmi.n	8001612 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d8:	4632      	mov	r2, r6
 80015da:	4629      	mov	r1, r5
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ffb9 	bl	8001554 <I2C_IsAcknowledgeFailed>
 80015e2:	b9c0      	cbnz	r0, 8001616 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80015e4:	1c6a      	adds	r2, r5, #1
 80015e6:	d0f3      	beq.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80015e8:	b96d      	cbnz	r5, 8001606 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015ec:	2003      	movs	r0, #3
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80015f4:	2320      	movs	r3, #32
 80015f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001600:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001604:	bd70      	pop	{r4, r5, r6, pc}
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001606:	f003 fdb5 	bl	8005174 <HAL_GetTick>
 800160a:	1b80      	subs	r0, r0, r6
 800160c:	4285      	cmp	r5, r0
 800160e:	d2df      	bcs.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8001610:	e7eb      	b.n	80015ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001612:	2000      	movs	r0, #0
 8001614:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001618:	bd70      	pop	{r4, r5, r6, pc}
	...

0800161c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800161c:	b570      	push	{r4, r5, r6, lr}
 800161e:	4604      	mov	r4, r0
 8001620:	460d      	mov	r5, r1
 8001622:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	075b      	lsls	r3, r3, #29
 800162a:	d42a      	bmi.n	8001682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800162c:	4632      	mov	r2, r6
 800162e:	4629      	mov	r1, r5
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff ff8f 	bl	8001554 <I2C_IsAcknowledgeFailed>
 8001636:	bb30      	cbnz	r0, 8001686 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    {
      return HAL_ERROR;
    }

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	699a      	ldr	r2, [r3, #24]
 800163c:	0692      	lsls	r2, r2, #26
 800163e:	d50d      	bpl.n	800165c <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001640:	2120      	movs	r1, #32

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <I2C_WaitOnRXNEFlagUntilTimeout+0x70>)

    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001644:	61d9      	str	r1, [r3, #28]

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);
 8001646:	685d      	ldr	r5, [r3, #4]
 8001648:	402a      	ands	r2, r5
 800164a:	605a      	str	r2, [r3, #4]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	6460      	str	r0, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800164e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

      /* Clear Configuration Register 2 */
      I2C_RESET_CR2(hi2c);

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
      hi2c->State= HAL_I2C_STATE_READY;
 8001652:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001656:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800165a:	e014      	b.n	8001686 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 800165c:	b95d      	cbnz	r5, 8001676 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800165e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001660:	2003      	movs	r0, #3
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001668:	2320      	movs	r3, #32
 800166a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800166e:	2300      	movs	r3, #0
 8001670:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001674:	bd70      	pop	{r4, r5, r6, pc}

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001676:	f003 fd7d 	bl	8005174 <HAL_GetTick>
 800167a:	1b80      	subs	r0, r0, r6
 800167c:	4285      	cmp	r5, r0
 800167e:	d2d1      	bcs.n	8001624 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001680:	e7ed      	b.n	800165e <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001682:	2000      	movs	r0, #0
 8001684:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8001686:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8001688:	bd70      	pop	{r4, r5, r6, pc}
 800168a:	bf00      	nop
 800168c:	fe00e800 	.word	0xfe00e800

08001690 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	460d      	mov	r5, r1
 8001696:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	069b      	lsls	r3, r3, #26
 800169e:	d41a      	bmi.n	80016d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a0:	4632      	mov	r2, r6
 80016a2:	4629      	mov	r1, r5
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff ff55 	bl	8001554 <I2C_IsAcknowledgeFailed>
 80016aa:	b9b0      	cbnz	r0, 80016da <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80016ac:	b96d      	cbnz	r5, 80016ca <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016b0:	2003      	movs	r0, #3
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 80016b8:	2320      	movs	r3, #32
 80016ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80016ca:	f003 fd53 	bl	8005174 <HAL_GetTick>
 80016ce:	1b80      	subs	r0, r0, r6
 80016d0:	4285      	cmp	r5, r0
 80016d2:	d2e1      	bcs.n	8001698 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80016d4:	e7eb      	b.n	80016ae <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80016d6:	2000      	movs	r0, #0
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 80016da:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 80016dc:	bd70      	pop	{r4, r5, r6, pc}

080016de <HAL_I2C_MspInit>:
 80016de:	4770      	bx	lr

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80016e2:	4604      	mov	r4, r0
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d04a      	beq.n	800177e <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80016e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016f0:	b91b      	cbnz	r3, 80016fa <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016f2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016f6:	f7ff fff2 	bl	80016de <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fa:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016fc:	68e1      	ldr	r1, [r4, #12]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001702:	2901      	cmp	r1, #1
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f022 0201 	bic.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800170e:	6862      	ldr	r2, [r4, #4]
 8001710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	68a2      	ldr	r2, [r4, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001720:	d103      	bne.n	800172a <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	e007      	b.n	800173a <HAL_I2C_Init+0x5a>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800172a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800172e:	2902      	cmp	r1, #2
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001730:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001732:	d102      	bne.n	800173a <HAL_I2C_Init+0x5a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001738:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800173a:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800173c:	2000      	movs	r0, #0
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800173e:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001740:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001752:	6962      	ldr	r2, [r4, #20]
 8001754:	430a      	orrs	r2, r1
 8001756:	69a1      	ldr	r1, [r4, #24]
 8001758:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175c:	69e1      	ldr	r1, [r4, #28]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800175e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001760:	6a22      	ldr	r2, [r4, #32]
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 800176e:	2320      	movs	r3, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001772:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800177c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8001780:	bd10      	pop	{r4, pc}
	...

08001784 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001788:	4698      	mov	r8, r3
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 800178a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800178e:	4604      	mov	r4, r0
 8001790:	460e      	mov	r6, r1
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001792:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001794:	4691      	mov	r9, r2
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001796:	f040 8086 	bne.w	80018a6 <HAL_I2C_Master_Transmit+0x122>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800179e:	2b01      	cmp	r3, #1
 80017a0:	f000 8081 	beq.w	80018a6 <HAL_I2C_Master_Transmit+0x122>
 80017a4:	2701      	movs	r7, #1
 80017a6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017aa:	f003 fce3 	bl	8005174 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ae:	2319      	movs	r3, #25
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b0:	4605      	mov	r5, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b2:	9000      	str	r0, [sp, #0]
 80017b4:	463a      	mov	r2, r7
 80017b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fea2 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d14f      	bne.n	8001864 <HAL_I2C_Master_Transmit+0xe0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017c4:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 80017ca:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017d0:	2310      	movs	r3, #16
 80017d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d6:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 80017d8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d905      	bls.n	80017f0 <HAL_I2C_Master_Transmit+0x6c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017e4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ea:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	e00d      	b.n	800180c <HAL_I2C_Master_Transmit+0x88>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80017f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f6:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80017f8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017fa:	8522      	strh	r2, [r4, #40]	; 0x28
 80017fc:	e038      	b.n	8001870 <HAL_I2C_Master_Transmit+0xec>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001800:	b29b      	uxth	r3, r3
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d930      	bls.n	8001868 <HAL_I2C_Master_Transmit+0xe4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001806:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001808:	9000      	str	r0, [sp, #0]
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800180a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001810:	4631      	mov	r1, r6
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff fe64 	bl	80014e0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001818:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181a:	462a      	mov	r2, r5
 800181c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800181e:	4620      	mov	r0, r4
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
    }

    while(hi2c->XferCount > 0U)
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02d      	beq.n	8001882 <HAL_I2C_Master_Transmit+0xfe>
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001826:	f7ff fecf 	bl	80015c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800182a:	bb28      	cbnz	r0, 8001878 <HAL_I2C_Master_Transmit+0xf4>
        {
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800182e:	6822      	ldr	r2, [r4, #0]
 8001830:	1c59      	adds	r1, r3, #1
 8001832:	6261      	str	r1, [r4, #36]	; 0x24
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
      hi2c->XferSize--;
 8001838:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 800183a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800183c:	3a01      	subs	r2, #1
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 800183e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001840:	b292      	uxth	r2, r2
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001842:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001844:	8522      	strh	r2, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8001846:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;

      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001848:	2a00      	cmp	r2, #0
 800184a:	d1e5      	bne.n	8001818 <HAL_I2C_Master_Transmit+0x94>
 800184c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0e1      	beq.n	8001818 <HAL_I2C_Master_Transmit+0x94>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001854:	9500      	str	r5, [sp, #0]
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff fe52 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 8001860:	2800      	cmp	r0, #0
 8001862:	d0cc      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x7a>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e01f      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001868:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186c:	b292      	uxth	r2, r2
 800186e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	e7cb      	b.n	8001810 <HAL_I2C_Master_Transmit+0x8c>
    while(hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800187a:	2b04      	cmp	r3, #4
 800187c:	d1f2      	bne.n	8001864 <HAL_I2C_Master_Transmit+0xe0>
        {
          return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e012      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x124>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001882:	f7ff ff05 	bl	8001690 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001886:	2800      	cmp	r0, #0
 8001888:	d1f6      	bne.n	8001878 <HAL_I2C_Master_Transmit+0xf4>
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	2120      	movs	r1, #32

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_I2C_Master_Transmit+0x12c>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001890:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001892:	685d      	ldr	r5, [r3, #4]
 8001894:	402a      	ands	r2, r5
 8001896:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001898:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 80018a4:	e000      	b.n	80018a8 <HAL_I2C_Master_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80018a6:	2002      	movs	r0, #2
  }
}
 80018a8:	b003      	add	sp, #12
 80018aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018ae:	bf00      	nop
 80018b0:	fe00e800 	.word	0xfe00e800

080018b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018b8:	4698      	mov	r8, r3
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 80018ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018be:	4604      	mov	r4, r0
 80018c0:	460e      	mov	r6, r1
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 80018c2:	2b20      	cmp	r3, #32
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c4:	4691      	mov	r9, r2
  uint32_t tickstart = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 80018c6:	f040 8086 	bne.w	80019d6 <HAL_I2C_Master_Receive+0x122>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	f000 8081 	beq.w	80019d6 <HAL_I2C_Master_Receive+0x122>
 80018d4:	2701      	movs	r7, #1
 80018d6:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018da:	f003 fc4b 	bl	8005174 <HAL_GetTick>

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018de:	2319      	movs	r3, #25
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018e0:	4605      	mov	r5, r0

    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018e2:	9000      	str	r0, [sp, #0]
 80018e4:	463a      	mov	r2, r7
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fe0a 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d14f      	bne.n	8001994 <HAL_I2C_Master_Receive+0xe0>
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018f4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018f6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 80018fa:	6360      	str	r0, [r4, #52]	; 0x34
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001900:	2310      	movs	r3, #16
 8001902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001906:	6460      	str	r0, [r4, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 8001908:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800190c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	2bff      	cmp	r3, #255	; 0xff
 8001912:	d905      	bls.n	8001920 <HAL_I2C_Master_Receive+0x6c>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001914:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001916:	f44f 5310 	mov.w	r3, #9216	; 0x2400

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800191a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	e00d      	b.n	800193c <HAL_I2C_Master_Receive+0x88>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001920:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001922:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001926:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001928:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800192a:	8522      	strh	r2, [r4, #40]	; 0x28
 800192c:	e038      	b.n	80019a0 <HAL_I2C_Master_Receive+0xec>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800192e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d930      	bls.n	8001998 <HAL_I2C_Master_Receive+0xe4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001936:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001938:	9000      	str	r0, [sp, #0]
          return HAL_TIMEOUT;
        }

        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800193a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800193c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001940:	4631      	mov	r1, r6
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff fdcc 	bl	80014e0 <I2C_TransferConfig>
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
    }

    while(hi2c->XferCount > 0U)
 8001948:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194a:	462a      	mov	r2, r5
 800194c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800194e:	4620      	mov	r0, r4
    {
      hi2c->XferSize = hi2c->XferCount;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
    }

    while(hi2c->XferCount > 0U)
 8001950:	b29b      	uxth	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02d      	beq.n	80019b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001956:	f7ff fe61 	bl	800161c <I2C_WaitOnRXNEFlagUntilTimeout>
 800195a:	bb28      	cbnz	r0, 80019a8 <HAL_I2C_Master_Receive+0xf4>
          return HAL_TIMEOUT;
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800195c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	6262      	str	r2, [r4, #36]	; 0x24
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001968:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800196a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 800196c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800196e:	3b01      	subs	r3, #1
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001970:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001972:	b29b      	uxth	r3, r3
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8001974:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001976:	8563      	strh	r3, [r4, #42]	; 0x2a

      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001978:	2a00      	cmp	r2, #0
 800197a:	d1e5      	bne.n	8001948 <HAL_I2C_Master_Receive+0x94>
 800197c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0e1      	beq.n	8001948 <HAL_I2C_Master_Receive+0x94>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001984:	9500      	str	r5, [sp, #0]
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fdba 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 8001990:	2800      	cmp	r0, #0
 8001992:	d0cc      	beq.n	800192e <HAL_I2C_Master_Receive+0x7a>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8001994:	2003      	movs	r0, #3
 8001996:	e01f      	b.n	80019d8 <HAL_I2C_Master_Receive+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001998:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800199a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800199c:	b292      	uxth	r2, r2
 800199e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	e7cb      	b.n	8001940 <HAL_I2C_Master_Receive+0x8c>
    while(hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d1f2      	bne.n	8001994 <HAL_I2C_Master_Receive+0xe0>
        {
          return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	e012      	b.n	80019d8 <HAL_I2C_Master_Receive+0x124>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b2:	f7ff fe6d 	bl	8001690 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d1f6      	bne.n	80019a8 <HAL_I2C_Master_Receive+0xf4>
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	2120      	movs	r1, #32

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_I2C_Master_Receive+0x12c>)
        return HAL_TIMEOUT;
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c0:	61d9      	str	r1, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c2:	685d      	ldr	r5, [r3, #4]
 80019c4:	402a      	ands	r2, r5
 80019c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_OK;
 80019d4:	e000      	b.n	80019d8 <HAL_I2C_Master_Receive+0x124>
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2002      	movs	r0, #2
  }
}
 80019d8:	b003      	add	sp, #12
 80019da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019de:	bf00      	nop
 80019e0:	fe00e800 	.word	0xfe00e800

080019e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019e8:	461d      	mov	r5, r3
  uint32_t tickstart = 0U;

  __IO uint32_t I2C_Trials = 0U;
 80019ea:	2300      	movs	r3, #0
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019ec:	4604      	mov	r4, r0
 80019ee:	4690      	mov	r8, r2
  uint32_t tickstart = 0U;

  __IO uint32_t I2C_Trials = 0U;
 80019f0:	9303      	str	r3, [sp, #12]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d177      	bne.n	8001aea <HAL_I2C_IsDeviceReady+0x106>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019fa:	6803      	ldr	r3, [r0, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8001a02:	d172      	bne.n	8001aea <HAL_I2C_IsDeviceReady+0x106>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001a08:	2a01      	cmp	r2, #1
 8001a0a:	d06e      	beq.n	8001aea <HAL_I2C_IsDeviceReady+0x106>
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f3c1 0609 	ubfx	r6, r1, #0, #10
 8001a12:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8001a16:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	6443      	str	r3, [r0, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);
 8001a22:	68e3      	ldr	r3, [r4, #12]
 8001a24:	6822      	ldr	r2, [r4, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	bf0a      	itet	eq
 8001a2a:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8001a2e:	464b      	movne	r3, r9
 8001a30:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8001a34:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a36:	f003 fb9d 	bl	8005174 <HAL_GetTick>
 8001a3a:	4607      	mov	r7, r0
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	0691      	lsls	r1, r2, #26
 8001a42:	d504      	bpl.n	8001a4e <HAL_I2C_IsDeviceReady+0x6a>
          }
        } 
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	f012 0210 	ands.w	r2, r2, #16
 8001a4a:	d120      	bne.n	8001a8e <HAL_I2C_IsDeviceReady+0xaa>
 8001a4c:	e010      	b.n	8001a70 <HAL_I2C_IsDeviceReady+0x8c>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode,DevAddress);

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
      while((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001a4e:	699a      	ldr	r2, [r3, #24]
 8001a50:	06d2      	lsls	r2, r2, #27
 8001a52:	d4f7      	bmi.n	8001a44 <HAL_I2C_IsDeviceReady+0x60>
 8001a54:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8001a58:	2aa0      	cmp	r2, #160	; 0xa0
 8001a5a:	d0f3      	beq.n	8001a44 <HAL_I2C_IsDeviceReady+0x60>
      {
      	if(Timeout != HAL_MAX_DELAY)
 8001a5c:	1c68      	adds	r0, r5, #1
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_I2C_IsDeviceReady+0x5a>
      	{
          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d03a      	beq.n	8001ada <HAL_I2C_IsDeviceReady+0xf6>
 8001a64:	f003 fb86 	bl	8005174 <HAL_GetTick>
 8001a68:	1bc0      	subs	r0, r0, r7
 8001a6a:	4285      	cmp	r5, r0
 8001a6c:	d2e6      	bcs.n	8001a3c <HAL_I2C_IsDeviceReady+0x58>
 8001a6e:	e034      	b.n	8001ada <HAL_I2C_IsDeviceReady+0xf6>

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
      {
        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a70:	9700      	str	r7, [sp, #0]
 8001a72:	462b      	mov	r3, r5
 8001a74:	2120      	movs	r1, #32
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff fd44 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	bb98      	cbnz	r0, 8001ae6 <HAL_I2C_IsDeviceReady+0x102>
        {
          return HAL_TIMEOUT;
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7e:	2320      	movs	r3, #32
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	61d3      	str	r3, [r2, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a88:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

        return HAL_OK;
 8001a8c:	e02e      	b.n	8001aec <HAL_I2C_IsDeviceReady+0x108>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	9700      	str	r7, [sp, #0]
 8001a92:	462b      	mov	r3, r5
 8001a94:	2120      	movs	r1, #32
 8001a96:	4620      	mov	r0, r4
 8001a98:	f7ff fd34 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	bb10      	cbnz	r0, 8001ae6 <HAL_I2C_IsDeviceReady+0x102>
        {
          return HAL_TIMEOUT;
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	2110      	movs	r1, #16

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aa4:	f04f 0a20 	mov.w	sl, #32
        {
          return HAL_TIMEOUT;
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa8:	61d9      	str	r1, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aaa:	f8c3 a01c 	str.w	sl, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 8001aae:	9903      	ldr	r1, [sp, #12]
 8001ab0:	1c48      	adds	r0, r1, #1
 8001ab2:	4541      	cmp	r1, r8
 8001ab4:	9003      	str	r0, [sp, #12]
 8001ab6:	d10d      	bne.n	8001ad4 <HAL_I2C_IsDeviceReady+0xf0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ab8:	6859      	ldr	r1, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001aba:	4620      	mov	r0, r4

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001abc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001ac0:	6059      	str	r1, [r3, #4]

        /* Wait until STOPF flag is reset */ 
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	9700      	str	r7, [sp, #0]
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	f7ff fd1c 	bl	8001504 <I2C_WaitOnFlagUntilTimeout>
 8001acc:	b958      	cbnz	r0, 8001ae6 <HAL_I2C_IsDeviceReady+0x102>
        {
          return HAL_TIMEOUT;
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	f8c3 a01c 	str.w	sl, [r3, #28]
      }
    }while(I2C_Trials < Trials);
 8001ad4:	9b03      	ldr	r3, [sp, #12]
 8001ad6:	4598      	cmp	r8, r3
 8001ad8:	d8a3      	bhi.n	8001a22 <HAL_I2C_IsDeviceReady+0x3e>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ada:	2320      	movs	r3, #32
 8001adc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

    return HAL_TIMEOUT;
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	e000      	b.n	8001aec <HAL_I2C_IsDeviceReady+0x108>
  }
  else
  {
    return HAL_BUSY;
 8001aea:	2002      	movs	r0, #2
  }
}
 8001aec:	b004      	add	sp, #16
 8001aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001af2 <HAL_I2C_GetError>:
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
  return hi2c->ErrorCode;
 8001af2:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8001af4:	4770      	bx	lr

08001af6 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001af6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	2a20      	cmp	r2, #32
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001afe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b00:	d11d      	bne.n	8001b3e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d019      	beq.n	8001b3e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0a:	2324      	movs	r3, #36	; 0x24
 8001b0c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b10:	6803      	ldr	r3, [r0, #0]
 8001b12:	681c      	ldr	r4, [r3, #0]
 8001b14:	f024 0401 	bic.w	r4, r4, #1
 8001b18:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b1a:	681c      	ldr	r4, [r3, #0]
 8001b1c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001b20:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b22:	681c      	ldr	r4, [r3, #0]
 8001b24:	4321      	orrs	r1, r4
 8001b26:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b28:	6819      	ldr	r1, [r3, #0]
 8001b2a:	f041 0101 	orr.w	r1, r1, #1
 8001b2e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b30:	2300      	movs	r3, #0
    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001b3e:	2002      	movs	r0, #2
  }
}
 8001b40:	bd10      	pop	{r4, pc}

08001b42 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001b42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001b46:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b48:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001b4a:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001b4c:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b50:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001b54:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b56:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b5a:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b5e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b62:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b64:	19ee      	adds	r6, r5, r7
 8001b66:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001b6a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001b6e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b70:	68e0      	ldr	r0, [r4, #12]
 8001b72:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8001b76:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001b78:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001b7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001b7e:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001b80:	68e0      	ldr	r0, [r4, #12]
 8001b82:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001b86:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001b88:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b8a:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001b8c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001b90:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b92:	1c68      	adds	r0, r5, #1
 8001b94:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001b96:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001b98:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8001b9c:	4420      	add	r0, r4
 8001b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001ba2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001ba4:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001ba6:	6918      	ldr	r0, [r3, #16]
 8001ba8:	f020 0007 	bic.w	r0, r0, #7
 8001bac:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001bae:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001bb0:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8001bb2:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8001bb6:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001bba:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001bbe:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8001bc2:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 8001bc6:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8001bca:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8001bce:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001bd0:	6958      	ldr	r0, [r3, #20]
 8001bd2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001bd6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001bd8:	6948      	ldr	r0, [r1, #20]
 8001bda:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001bdc:	69d8      	ldr	r0, [r3, #28]
 8001bde:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001be2:	f020 0007 	bic.w	r0, r0, #7
 8001be6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001be8:	69cd      	ldr	r5, [r1, #28]
 8001bea:	6a0c      	ldr	r4, [r1, #32]
 8001bec:	432c      	orrs	r4, r5
 8001bee:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001bf0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001bf2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001bf4:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001bf8:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001bfa:	b14e      	cbz	r6, 8001c10 <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001bfc:	2e01      	cmp	r6, #1
 8001bfe:	d009      	beq.n	8001c14 <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001c00:	1eb0      	subs	r0, r6, #2
 8001c02:	2802      	cmp	r0, #2
 8001c04:	d908      	bls.n	8001c18 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001c06:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8001c08:	bf0c      	ite	eq
 8001c0a:	2002      	moveq	r0, #2
 8001c0c:	2001      	movne	r0, #1
 8001c0e:	e004      	b.n	8001c1a <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 8001c10:	2004      	movs	r0, #4
 8001c12:	e002      	b.n	8001c1a <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 8001c14:	2003      	movs	r0, #3
 8001c16:	e000      	b.n	8001c1a <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8001c18:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001c1c:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001c20:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8001c24:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001c26:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001c2a:	4344      	muls	r4, r0
 8001c2c:	4378      	muls	r0, r7
 8001c2e:	3003      	adds	r0, #3
 8001c30:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001c34:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001c36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c38:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001c3c:	f020 0007 	bic.w	r0, r0, #7
 8001c40:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001c42:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001c44:	f852 300e 	ldr.w	r3, [r2, lr]
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f842 300e 	str.w	r3, [r2, lr]
 8001c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c54 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001c54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8001c56:	4604      	mov	r4, r0
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d06a      	beq.n	8001d32 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001c5c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001c60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c64:	b91b      	cbnz	r3, 8001c6e <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001c66:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001c6a:	f003 f91f 	bl	8004eac <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001c7c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001c7e:	6862      	ldr	r2, [r4, #4]
 8001c80:	6999      	ldr	r1, [r3, #24]
 8001c82:	4311      	orrs	r1, r2
 8001c84:	68a2      	ldr	r2, [r4, #8]
 8001c86:	4311      	orrs	r1, r2
 8001c88:	68e2      	ldr	r2, [r4, #12]
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	6922      	ldr	r2, [r4, #16]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001c92:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <HAL_LTDC_Init+0xe4>)
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001c98:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001c9a:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001c9c:	69a2      	ldr	r2, [r4, #24]
 8001c9e:	6898      	ldr	r0, [r3, #8]
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_LTDC_Init+0xe4>)
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001cae:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001cb0:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001cb2:	6a22      	ldr	r2, [r4, #32]
 8001cb4:	68d8      	ldr	r0, [r3, #12]
 8001cb6:	4302      	orrs	r2, r0
 8001cb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001cbc:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_LTDC_Init+0xe4>)
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001cc6:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001cc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cca:	6918      	ldr	r0, [r3, #16]
 8001ccc:	4302      	orrs	r2, r0
 8001cce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001cd2:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_LTDC_Init+0xe4>)
 8001cd6:	6959      	ldr	r1, [r3, #20]
 8001cd8:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001cda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001cdc:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001cde:	6958      	ldr	r0, [r3, #20]
 8001ce0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ce2:	4302      	orrs	r2, r0
 8001ce4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8001cec:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001cf0:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8001cf4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001cf8:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfc:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8001d00:	4329      	orrs	r1, r5
 8001d02:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8001d06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001d0a:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8001d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d10:	f042 0204 	orr.w	r2, r2, #4
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8001d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d18:	f042 0202 	orr.w	r2, r2, #2
 8001d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d26:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001d28:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001d2c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8001d30:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8001d32:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	bf00      	nop
 8001d38:	f000f800 	.word	0xf000f800

08001d3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d3e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8001d42:	4606      	mov	r6, r0
 8001d44:	468e      	mov	lr, r1
 8001d46:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	f04f 0002 	mov.w	r0, #2
 8001d4e:	d01d      	beq.n	8001d8c <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d50:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d52:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d54:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d56:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d5a:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d5e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d62:	3438      	adds	r4, #56	; 0x38
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d72:	4630      	mov	r0, r6
 8001d74:	4662      	mov	r2, ip
 8001d76:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001d78:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001d7a:	f7ff fee2 	bl	8001b42 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d7e:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d80:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001d82:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001d84:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001d88:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 8001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d8e <HAL_LTDC_SetAlpha>:
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d8e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0 or 1
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	4604      	mov	r4, r0
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001d9c:	d015      	beq.n	8001dca <HAL_LTDC_SetAlpha+0x3c>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d9e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8001da2:	2334      	movs	r3, #52	; 0x34
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001da4:	2501      	movs	r5, #1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8001da6:	4353      	muls	r3, r2
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001da8:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8001dac:	18c6      	adds	r6, r0, r3
 8001dae:	64f1      	str	r1, [r6, #76]	; 0x4c
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001db0:	f103 0138 	add.w	r1, r3, #56	; 0x38

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001db4:	4401      	add	r1, r0
 8001db6:	f7ff fec4 	bl	8001b42 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001dba:	6823      	ldr	r3, [r4, #0]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001dbc:	2000      	movs	r0, #0

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001dbe:	625d      	str	r5, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001dc0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001dc4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0

  return HAL_OK;
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
  LTDC_LayerCfgTypeDef *pLayerCfg;

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001dca:	4618      	mov	r0, r3

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);

  return HAL_OK;
}
 8001dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001dd0 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd0:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dd6:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	07d8      	lsls	r0, r3, #31
 8001dda:	d403      	bmi.n	8001de4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	0799      	lsls	r1, r3, #30
 8001de0:	d452      	bmi.n	8001e88 <HAL_RCC_OscConfig+0xb8>
 8001de2:	e0a5      	b.n	8001f30 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001de4:	4b9d      	ldr	r3, [pc, #628]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	f002 020c 	and.w	r2, r2, #12
 8001dec:	2a04      	cmp	r2, #4
 8001dee:	d007      	beq.n	8001e00 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	f002 020c 	and.w	r2, r2, #12
 8001df6:	2a08      	cmp	r2, #8
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x42>
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	025a      	lsls	r2, r3, #9
 8001dfe:	d508      	bpl.n	8001e12 <HAL_RCC_OscConfig+0x42>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b96      	ldr	r3, [pc, #600]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	d5e9      	bpl.n	8001ddc <HAL_RCC_OscConfig+0xc>
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e6      	bne.n	8001ddc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001e0e:	2001      	movs	r0, #1
 8001e10:	e183      	b.n	800211a <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	6863      	ldr	r3, [r4, #4]
 8001e14:	4d91      	ldr	r5, [pc, #580]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0x74>
 8001e1c:	b95b      	cbnz	r3, 8001e36 <HAL_RCC_OscConfig+0x66>
 8001e1e:	682b      	ldr	r3, [r5, #0]
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	602b      	str	r3, [r5, #0]
 8001e26:	682b      	ldr	r3, [r5, #0]
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2c:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2e:	f003 f9a1 	bl	8005174 <HAL_GetTick>
 8001e32:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e34:	e024      	b.n	8001e80 <HAL_RCC_OscConfig+0xb0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x7c>
 8001e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e42:	602b      	str	r3, [r5, #0]
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	e005      	b.n	8001e58 <HAL_RCC_OscConfig+0x88>
 8001e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e50:	602b      	str	r3, [r5, #0]
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e58:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f003 f98b 	bl	8005174 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4d7f      	ldr	r5, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x28c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	039f      	lsls	r7, r3, #14
 8001e66:	d4b9      	bmi.n	8001ddc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f003 f984 	bl	8005174 <HAL_GetTick>
 8001e6c:	1b80      	subs	r0, r0, r6
 8001e6e:	2864      	cmp	r0, #100	; 0x64
 8001e70:	d9f7      	bls.n	8001e62 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e151      	b.n	800211a <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e76:	f003 f97d 	bl	8005174 <HAL_GetTick>
 8001e7a:	1b80      	subs	r0, r0, r6
 8001e7c:	2864      	cmp	r0, #100	; 0x64
 8001e7e:	d8f8      	bhi.n	8001e72 <HAL_RCC_OscConfig+0xa2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	0398      	lsls	r0, r3, #14
 8001e84:	d4f7      	bmi.n	8001e76 <HAL_RCC_OscConfig+0xa6>
 8001e86:	e7a9      	b.n	8001ddc <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e88:	4b74      	ldr	r3, [pc, #464]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	f012 0f0c 	tst.w	r2, #12
 8001e90:	d007      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xd2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	f002 020c 	and.w	r2, r2, #12
 8001e98:	2a08      	cmp	r2, #8
 8001e9a:	d117      	bne.n	8001ecc <HAL_RCC_OscConfig+0xfc>
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	0259      	lsls	r1, r3, #9
 8001ea0:	d414      	bmi.n	8001ecc <HAL_RCC_OscConfig+0xfc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	0792      	lsls	r2, r2, #30
 8001ea8:	d502      	bpl.n	8001eb0 <HAL_RCC_OscConfig+0xe0>
 8001eaa:	68e2      	ldr	r2, [r4, #12]
 8001eac:	2a01      	cmp	r2, #1
 8001eae:	d1ae      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	21f8      	movs	r1, #248	; 0xf8
 8001eb4:	fa91 f1a1 	rbit	r1, r1
 8001eb8:	6920      	ldr	r0, [r4, #16]
 8001eba:	fab1 f181 	clz	r1, r1
 8001ebe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001ec2:	fa00 f101 	lsl.w	r1, r0, r1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e031      	b.n	8001f30 <HAL_RCC_OscConfig+0x160>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ecc:	68e3      	ldr	r3, [r4, #12]
 8001ece:	4d63      	ldr	r5, [pc, #396]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001ed0:	b1f3      	cbz	r3, 8001f10 <HAL_RCC_OscConfig+0x140>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f003 f94b 	bl	8005174 <HAL_GetTick>
 8001ede:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	485e      	ldr	r0, [pc, #376]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001ee4:	079f      	lsls	r7, r3, #30
 8001ee6:	d405      	bmi.n	8001ef4 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee8:	f003 f944 	bl	8005174 <HAL_GetTick>
 8001eec:	1b80      	subs	r0, r0, r6
 8001eee:	2802      	cmp	r0, #2
 8001ef0:	d9f6      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x110>
 8001ef2:	e7be      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	6803      	ldr	r3, [r0, #0]
 8001ef6:	22f8      	movs	r2, #248	; 0xf8
 8001ef8:	fa92 f2a2 	rbit	r2, r2
 8001efc:	6921      	ldr	r1, [r4, #16]
 8001efe:	fab2 f282 	clz	r2, r2
 8001f02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	6003      	str	r3, [r0, #0]
 8001f0e:	e00f      	b.n	8001f30 <HAL_RCC_OscConfig+0x160>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f003 f92c 	bl	8005174 <HAL_GetTick>
 8001f1c:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	682b      	ldr	r3, [r5, #0]
 8001f20:	0798      	lsls	r0, r3, #30
 8001f22:	d505      	bpl.n	8001f30 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f003 f926 	bl	8005174 <HAL_GetTick>
 8001f28:	1b80      	subs	r0, r0, r6
 8001f2a:	2802      	cmp	r0, #2
 8001f2c:	d9f7      	bls.n	8001f1e <HAL_RCC_OscConfig+0x14e>
 8001f2e:	e7a0      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	0719      	lsls	r1, r3, #28
 8001f34:	d403      	bmi.n	8001f3e <HAL_RCC_OscConfig+0x16e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	075a      	lsls	r2, r3, #29
 8001f3a:	d423      	bmi.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
 8001f3c:	e08a      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f3e:	6963      	ldr	r3, [r4, #20]
 8001f40:	4d46      	ldr	r5, [pc, #280]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001f42:	b17b      	cbz	r3, 8001f64 <HAL_RCC_OscConfig+0x194>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f003 f912 	bl	8005174 <HAL_GetTick>
 8001f50:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f54:	079b      	lsls	r3, r3, #30
 8001f56:	d4ee      	bmi.n	8001f36 <HAL_RCC_OscConfig+0x166>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f003 f90c 	bl	8005174 <HAL_GetTick>
 8001f5c:	1b80      	subs	r0, r0, r6
 8001f5e:	2802      	cmp	r0, #2
 8001f60:	d9f7      	bls.n	8001f52 <HAL_RCC_OscConfig+0x182>
 8001f62:	e786      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f003 f902 	bl	8005174 <HAL_GetTick>
 8001f70:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001f74:	079f      	lsls	r7, r3, #30
 8001f76:	d5de      	bpl.n	8001f36 <HAL_RCC_OscConfig+0x166>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f78:	f003 f8fc 	bl	8005174 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9f7      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1a2>
 8001f82:	e776      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f84:	4b35      	ldr	r3, [pc, #212]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	00d0      	lsls	r0, r2, #3
 8001f8a:	d40a      	bmi.n	8001fa2 <HAL_RCC_OscConfig+0x1d2>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001f8e:	2601      	movs	r6, #1
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	9b01      	ldr	r3, [sp, #4]
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1d4>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart = 0;
  FlagStatus pwrclkchanged = RESET;
 8001fa2:	2600      	movs	r6, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	4d2e      	ldr	r5, [pc, #184]	; (8002060 <HAL_RCC_OscConfig+0x290>)
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	05d9      	lsls	r1, r3, #23
 8001faa:	d504      	bpl.n	8001fb6 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	4d2b      	ldr	r5, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d110      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x206>
 8001fb4:	e024      	b.n	8002000 <HAL_RCC_OscConfig+0x230>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {    
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	602b      	str	r3, [r5, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f003 f8d9 	bl	8005174 <HAL_GetTick>
 8001fc2:	4607      	mov	r7, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	05da      	lsls	r2, r3, #23
 8001fc8:	d4f0      	bmi.n	8001fac <HAL_RCC_OscConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fca:	f003 f8d3 	bl	8005174 <HAL_GetTick>
 8001fce:	1bc0      	subs	r0, r0, r7
 8001fd0:	2864      	cmp	r0, #100	; 0x64
 8001fd2:	d9f7      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1f4>
 8001fd4:	e74d      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd6:	b96b      	cbnz	r3, 8001ff4 <HAL_RCC_OscConfig+0x224>
 8001fd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f241 3888 	movw	r8, #5000	; 0x1388
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	672b      	str	r3, [r5, #112]	; 0x70
 8001fe4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f003 f8c2 	bl	8005174 <HAL_GetTick>
 8001ff0:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	e026      	b.n	8002042 <HAL_RCC_OscConfig+0x272>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x238>
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	672b      	str	r3, [r5, #112]	; 0x70
 8002000:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	e005      	b.n	8002014 <HAL_RCC_OscConfig+0x244>
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	672b      	str	r3, [r5, #112]	; 0x70
 800200e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f003 f8ab 	bl	8005174 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201e:	4f0f      	ldr	r7, [pc, #60]	; (800205c <HAL_RCC_OscConfig+0x28c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	4680      	mov	r8, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002024:	079b      	lsls	r3, r3, #30
 8002026:	d40f      	bmi.n	8002048 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f003 f8a4 	bl	8005174 <HAL_GetTick>
 800202c:	ebc8 0000 	rsb	r0, r8, r0
 8002030:	42a8      	cmp	r0, r5
 8002032:	d9f6      	bls.n	8002022 <HAL_RCC_OscConfig+0x252>
 8002034:	e71d      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f003 f89d 	bl	8005174 <HAL_GetTick>
 800203a:	1bc0      	subs	r0, r0, r7
 800203c:	4540      	cmp	r0, r8
 800203e:	f63f af18 	bhi.w	8001e72 <HAL_RCC_OscConfig+0xa2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002044:	0798      	lsls	r0, r3, #30
 8002046:	d4f6      	bmi.n	8002036 <HAL_RCC_OscConfig+0x266>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002048:	b126      	cbz	r6, 8002054 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_RCC_OscConfig+0x28c>)
 800204c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002054:	69a2      	ldr	r2, [r4, #24]
 8002056:	b92a      	cbnz	r2, 8002064 <HAL_RCC_OscConfig+0x294>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002058:	2000      	movs	r0, #0
 800205a:	e05e      	b.n	800211a <HAL_RCC_OscConfig+0x34a>
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002064:	4d2e      	ldr	r5, [pc, #184]	; (8002120 <HAL_RCC_OscConfig+0x350>)
 8002066:	68ab      	ldr	r3, [r5, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	f43f aece 	beq.w	8001e0e <HAL_RCC_OscConfig+0x3e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800207a:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207c:	d141      	bne.n	8002102 <HAL_RCC_OscConfig+0x332>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f003 f879 	bl	8005174 <HAL_GetTick>
 8002082:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	4e26      	ldr	r6, [pc, #152]	; (8002120 <HAL_RCC_OscConfig+0x350>)
 8002088:	0199      	lsls	r1, r3, #6
 800208a:	d505      	bpl.n	8002098 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f003 f872 	bl	8005174 <HAL_GetTick>
 8002090:	1bc0      	subs	r0, r0, r7
 8002092:	2802      	cmp	r0, #2
 8002094:	d9f6      	bls.n	8002084 <HAL_RCC_OscConfig+0x2b4>
 8002096:	e6ec      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
 8002098:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a4:	fab2 f082 	clz	r0, r2
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80020b0:	fab3 f583 	clz	r5, r3
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	69e3      	ldr	r3, [r4, #28]
 80020ba:	fab2 f182 	clz	r1, r2
 80020be:	6a27      	ldr	r7, [r4, #32]
 80020c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020c2:	431f      	orrs	r7, r3
 80020c4:	4082      	lsls	r2, r0
 80020c6:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
 80020ca:	ea43 0002 	orr.w	r0, r3, r2
 80020ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80020d0:	085a      	lsrs	r2, r3, #1
 80020d2:	3a01      	subs	r2, #1
 80020d4:	fa02 f305 	lsl.w	r3, r2, r5
 80020d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020da:	4303      	orrs	r3, r0
 80020dc:	408a      	lsls	r2, r1
 80020de:	4313      	orrs	r3, r2
 80020e0:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e2:	6833      	ldr	r3, [r6, #0]
 80020e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e8:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f003 f843 	bl	8005174 <HAL_GetTick>
 80020ee:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	019a      	lsls	r2, r3, #6
 80020f4:	d4b0      	bmi.n	8002058 <HAL_RCC_OscConfig+0x288>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f6:	f003 f83d 	bl	8005174 <HAL_GetTick>
 80020fa:	1b00      	subs	r0, r0, r4
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d9f7      	bls.n	80020f0 <HAL_RCC_OscConfig+0x320>
 8002100:	e6b7      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f003 f837 	bl	8005174 <HAL_GetTick>
 8002106:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	019b      	lsls	r3, r3, #6
 800210c:	d5a4      	bpl.n	8002058 <HAL_RCC_OscConfig+0x288>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f003 f831 	bl	8005174 <HAL_GetTick>
 8002112:	1b00      	subs	r0, r0, r4
 8002114:	2802      	cmp	r0, #2
 8002116:	d9f7      	bls.n	8002108 <HAL_RCC_OscConfig+0x338>
 8002118:	e6ab      	b.n	8001e72 <HAL_RCC_OscConfig+0xa2>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800211a:	b002      	add	sp, #8
 800211c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002120:	40023800 	.word	0x40023800

08002124 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002124:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_GetSysClockFreq+0x70>)
 8002126:	688b      	ldr	r3, [r1, #8]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b04      	cmp	r3, #4
 800212e:	d02c      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x66>
 8002130:	2b08      	cmp	r3, #8
 8002132:	d12c      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002134:	6848      	ldr	r0, [r1, #4]
 8002136:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800213a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800213c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002140:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002144:	684b      	ldr	r3, [r1, #4]
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	ea01 0103 	and.w	r1, r1, r3
 8002156:	fa21 f102 	lsr.w	r1, r1, r2
 800215a:	bf14      	ite	ne
 800215c:	4a0e      	ldrne	r2, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800215e:	4a0f      	ldreq	r2, [pc, #60]	; (800219c <HAL_RCC_GetSysClockFreq+0x78>)
 8002160:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002166:	fb00 f301 	mul.w	r3, r0, r1
 800216a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800216e:	6852      	ldr	r2, [r2, #4]
 8002170:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8002174:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8002178:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800217c:	fa22 f000 	lsr.w	r0, r2, r0
 8002180:	3001      	adds	r0, #1
 8002182:	0040      	lsls	r0, r0, #1
 8002184:	fbb3 f0f0 	udiv	r0, r3, r0
 8002188:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218a:	4803      	ldr	r0, [pc, #12]	; (8002198 <HAL_RCC_GetSysClockFreq+0x74>)
 800218c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800218e:	4803      	ldr	r0, [pc, #12]	; (800219c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
 8002198:	017d7840 	.word	0x017d7840
 800219c:	00f42400 	.word	0x00f42400

080021a0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x144>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	f003 030f 	and.w	r3, r3, #15
 80021a8:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80021b2:	d30a      	bcc.n	80021ca <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	6821      	ldr	r1, [r4, #0]
 80021b6:	0788      	lsls	r0, r1, #30
 80021b8:	d514      	bpl.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ba:	484b      	ldr	r0, [pc, #300]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
 80021bc:	6883      	ldr	r3, [r0, #8]
 80021be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c2:	68a3      	ldr	r3, [r4, #8]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	6083      	str	r3, [r0, #8]
 80021c8:	e00c      	b.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	f023 030f 	bic.w	r3, r3, #15
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d4:	6813      	ldr	r3, [r2, #0]
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4299      	cmp	r1, r3
 80021dc:	d0ea      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
 80021e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e4:	07c9      	lsls	r1, r1, #31
 80021e6:	d406      	bmi.n	80021f6 <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021e8:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <HAL_RCC_ClockConfig+0x144>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	429d      	cmp	r5, r3
 80021f2:	d342      	bcc.n	800227a <HAL_RCC_ClockConfig+0xda>
 80021f4:	e04b      	b.n	800228e <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	6862      	ldr	r2, [r4, #4]
 80021f8:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
 80021fa:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fc:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002204:	e006      	b.n	8002214 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002206:	2a02      	cmp	r2, #2
 8002208:	d102      	bne.n	8002210 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 800220e:	e001      	b.n	8002214 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	f011 0f02 	tst.w	r1, #2
 8002214:	d0e3      	beq.n	80021de <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	4f32      	ldr	r7, [pc, #200]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221e:	f021 0103 	bic.w	r1, r1, #3
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002226:	f002 ffa5 	bl	8005174 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10c      	bne.n	800224c <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b04      	cmp	r3, #4
 800223a:	d0d5      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f002 ff9a 	bl	8005174 <HAL_GetTick>
 8002240:	1b80      	subs	r0, r0, r6
 8002242:	4540      	cmp	r0, r8
 8002244:	d9f5      	bls.n	8002232 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 8002246:	2003      	movs	r0, #3
 8002248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224c:	2b02      	cmp	r3, #2
 800224e:	d10f      	bne.n	8002270 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b08      	cmp	r3, #8
 8002258:	d0c6      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f002 ff8b 	bl	8005174 <HAL_GetTick>
 800225e:	1b80      	subs	r0, r0, r6
 8002260:	4540      	cmp	r0, r8
 8002262:	d9f5      	bls.n	8002250 <HAL_RCC_ClockConfig+0xb0>
 8002264:	e7ef      	b.n	8002246 <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002266:	f002 ff85 	bl	8005174 <HAL_GetTick>
 800226a:	1b80      	subs	r0, r0, r6
 800226c:	4540      	cmp	r0, r8
 800226e:	d8ea      	bhi.n	8002246 <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f013 0f0c 	tst.w	r3, #12
 8002276:	d1f6      	bne.n	8002266 <HAL_RCC_ClockConfig+0xc6>
 8002278:	e7b6      	b.n	80021e8 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	6813      	ldr	r3, [r2, #0]
 800227c:	f023 030f 	bic.w	r3, r3, #15
 8002280:	432b      	orrs	r3, r5
 8002282:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	429d      	cmp	r5, r3
 800228c:	d1a7      	bne.n	80021de <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228e:	6821      	ldr	r1, [r4, #0]
 8002290:	074a      	lsls	r2, r1, #29
 8002292:	d506      	bpl.n	80022a2 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
 8002296:	6883      	ldr	r3, [r0, #8]
 8002298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800229c:	68e3      	ldr	r3, [r4, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	070b      	lsls	r3, r1, #28
 80022a4:	d507      	bpl.n	80022b6 <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
 80022a8:	6921      	ldr	r1, [r4, #16]
 80022aa:	6893      	ldr	r3, [r2, #8]
 80022ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022b0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022b4:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80022b6:	f7ff ff35 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_ClockConfig+0x148>)
 80022bc:	22f0      	movs	r2, #240	; 0xf0
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	40d3      	lsrs	r3, r2
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RCC_ClockConfig+0x14c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	40d8      	lsrs	r0, r3
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_ClockConfig+0x150>)
 80022d6:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80022d8:	2000      	movs	r0, #0
 80022da:	f002 fea7 	bl	800502c <HAL_InitTick>
  
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
}
 80022e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e4:	40023c00 	.word	0x40023c00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	08009bfa 	.word	0x08009bfa
 80022f0:	20000008 	.word	0x20000008

080022f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <HAL_RCC_GetHCLKFreq+0x8>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002300:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002314:	40d3      	lsrs	r3, r2
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800231c:	6810      	ldr	r0, [r2, #0]
}
 800231e:	40d8      	lsrs	r0, r3
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	08009c0a 	.word	0x08009c0a
 800232c:	20000008 	.word	0x20000008

08002330 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002330:	230f      	movs	r3, #15
 8002332:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_GetClockConfig+0x34>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002344:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800234c:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002356:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_GetClockConfig+0x38>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	600b      	str	r3, [r1, #0]
 8002362:	4770      	bx	lr
 8002364:	40023800 	.word	0x40023800
 8002368:	40023c00 	.word	0x40023c00

0800236c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800236c:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800236e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002372:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002376:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002378:	d00b      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800237a:	4ab6      	ldr	r2, [pc, #728]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800237c:	6891      	ldr	r1, [r2, #8]
 800237e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002382:	6091      	str	r1, [r2, #8]
 8002384:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002386:	6891      	ldr	r1, [r2, #8]
 8002388:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 800238a:	fab6 f686 	clz	r6, r6
 800238e:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002390:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002392:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8002396:	d012      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002398:	49ae      	ldr	r1, [pc, #696]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800239a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800239c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80023a8:	bf08      	it	eq
 80023aa:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ac:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 80023b0:	bf16      	itet	ne
 80023b2:	fab5 f585 	clzne	r5, r5
 80023b6:	2500      	moveq	r5, #0
 80023b8:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023ba:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023be:	02d8      	lsls	r0, r3, #11
 80023c0:	d511      	bpl.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c2:	48a4      	ldr	r0, [pc, #656]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80023c6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023ca:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80023d2:	ea42 0201 	orr.w	r2, r2, r1
 80023d6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023da:	d003      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80023dc:	2900      	cmp	r1, #0
 80023de:	bf08      	it	eq
 80023e0:	2501      	moveq	r5, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80023e4:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80023e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80023ea:	bf18      	it	ne
 80023ec:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ee:	0699      	lsls	r1, r3, #26
 80023f0:	d55d      	bpl.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b98      	ldr	r3, [pc, #608]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023f4:	4f98      	ldr	r7, [pc, #608]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002410:	f002 feb0 	bl	8005174 <HAL_GetTick>
 8002414:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	05da      	lsls	r2, r3, #23
 800241a:	d407      	bmi.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f002 feaa 	bl	8005174 <HAL_GetTick>
 8002420:	ebc8 0000 	rsb	r0, r8, r0
 8002424:	2864      	cmp	r0, #100	; 0x64
 8002426:	d9f6      	bls.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
 800242a:	e340      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800242c:	4f89      	ldr	r7, [pc, #548]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800242e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002430:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002434:	d10f      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002436:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002438:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800243c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002442:	d12b      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 800244a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800244e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002452:	4301      	orrs	r1, r0
 8002454:	e025      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002456:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002458:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800245c:	4293      	cmp	r3, r2
 800245e:	d0ea      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002460:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002462:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002468:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800246c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800246e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002474:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002476:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247a:	07db      	lsls	r3, r3, #31
 800247c:	d5db      	bpl.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f002 fe79 	bl	8005174 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248a:	0798      	lsls	r0, r3, #30
 800248c:	d4d3      	bmi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f002 fe71 	bl	8005174 <HAL_GetTick>
 8002492:	ebc8 0000 	rsb	r0, r8, r0
 8002496:	4548      	cmp	r0, r9
 8002498:	d9f6      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800249a:	e7c5      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024a2:	6099      	str	r1, [r3, #8]
 80024a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80024a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80024aa:	430a      	orrs	r2, r1
 80024ac:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	06d9      	lsls	r1, r3, #27
 80024b2:	d50c      	bpl.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024b4:	4a67      	ldr	r2, [pc, #412]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024b6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80024ba:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80024be:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80024c2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80024c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024c8:	4301      	orrs	r1, r0
 80024ca:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ce:	045a      	lsls	r2, r3, #17
 80024d0:	d508      	bpl.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024d2:	4860      	ldr	r0, [pc, #384]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024d4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80024d8:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80024dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024de:	430a      	orrs	r2, r1
 80024e0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	d508      	bpl.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e8:	485a      	ldr	r0, [pc, #360]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80024ea:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80024ee:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 80024f2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80024f4:	430a      	orrs	r2, r1
 80024f6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fa:	03d8      	lsls	r0, r3, #15
 80024fc:	d508      	bpl.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024fe:	4855      	ldr	r0, [pc, #340]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002500:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002504:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 8002508:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800250a:	430a      	orrs	r2, r1
 800250c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002510:	0399      	lsls	r1, r3, #14
 8002512:	d508      	bpl.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002514:	484f      	ldr	r0, [pc, #316]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002516:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800251a:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 800251e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8002520:	430a      	orrs	r2, r1
 8002522:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002526:	065a      	lsls	r2, r3, #25
 8002528:	d508      	bpl.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252a:	484a      	ldr	r0, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800252c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002530:	f022 0103 	bic.w	r1, r2, #3
 8002534:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002536:	430a      	orrs	r2, r1
 8002538:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253c:	061f      	lsls	r7, r3, #24
 800253e:	d508      	bpl.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002540:	4844      	ldr	r0, [pc, #272]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002542:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002546:	f022 010c 	bic.w	r1, r2, #12
 800254a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800254c:	430a      	orrs	r2, r1
 800254e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002552:	05d8      	lsls	r0, r3, #23
 8002554:	d508      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002556:	483f      	ldr	r0, [pc, #252]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002558:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800255c:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8002560:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002562:	430a      	orrs	r2, r1
 8002564:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	0599      	lsls	r1, r3, #22
 800256a:	d508      	bpl.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800256c:	4839      	ldr	r0, [pc, #228]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800256e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002572:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002576:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002578:	430a      	orrs	r2, r1
 800257a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800257e:	055a      	lsls	r2, r3, #21
 8002580:	d508      	bpl.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002582:	4834      	ldr	r0, [pc, #208]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002584:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002588:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800258c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800258e:	430a      	orrs	r2, r1
 8002590:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002594:	051f      	lsls	r7, r3, #20
 8002596:	d508      	bpl.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002598:	482e      	ldr	r0, [pc, #184]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800259a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800259e:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 80025a2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80025a4:	430a      	orrs	r2, r1
 80025a6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025aa:	04d8      	lsls	r0, r3, #19
 80025ac:	d508      	bpl.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025ae:	4829      	ldr	r0, [pc, #164]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80025b4:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80025b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80025ba:	430a      	orrs	r2, r1
 80025bc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025c0:	0499      	lsls	r1, r3, #18
 80025c2:	d508      	bpl.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025c4:	4823      	ldr	r0, [pc, #140]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80025ca:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80025ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80025d0:	430a      	orrs	r2, r1
 80025d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025d6:	025a      	lsls	r2, r3, #9
 80025d8:	d508      	bpl.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025da:	481e      	ldr	r0, [pc, #120]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025dc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80025e0:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 80025e4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80025e6:	430a      	orrs	r2, r1
 80025e8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ec:	029f      	lsls	r7, r3, #10
 80025ee:	d50c      	bpl.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025f0:	4818      	ldr	r0, [pc, #96]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80025f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80025f4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80025f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025fc:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002600:	bf08      	it	eq
 8002602:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002604:	430a      	orrs	r2, r1
 8002606:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 800260a:	f013 0f08 	tst.w	r3, #8
 800260e:	bf18      	it	ne
 8002610:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002612:	0358      	lsls	r0, r3, #13
 8002614:	d508      	bpl.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002616:	480f      	ldr	r0, [pc, #60]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002618:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800261c:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8002620:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002622:	430a      	orrs	r2, r1
 8002624:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002628:	0219      	lsls	r1, r3, #8
 800262a:	d509      	bpl.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800262c:	4809      	ldr	r0, [pc, #36]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800262e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002632:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8002636:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800263a:	430a      	orrs	r2, r1
 800263c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002640:	2e01      	cmp	r6, #1
 8002642:	d00b      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800264a:	2d01      	cmp	r5, #1
 800264c:	f040 818c 	bne.w	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8002650:	e123      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800265c:	4ec8      	ldr	r6, [pc, #800]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800265e:	6833      	ldr	r3, [r6, #0]
 8002660:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002664:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002666:	f002 fd85 	bl	8005174 <HAL_GetTick>
 800266a:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800266c:	6833      	ldr	r3, [r6, #0]
 800266e:	f8df e310 	ldr.w	lr, [pc, #784]	; 8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002672:	011a      	lsls	r2, r3, #4
 8002674:	d505      	bpl.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002676:	f002 fd7d 	bl	8005174 <HAL_GetTick>
 800267a:	1bc0      	subs	r0, r0, r7
 800267c:	2864      	cmp	r0, #100	; 0x64
 800267e:	d9f5      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002680:	e6d2      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002682:	6827      	ldr	r7, [r4, #0]
 8002684:	07fb      	lsls	r3, r7, #31
 8002686:	d53c      	bpl.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x396>
 8002688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800268a:	bbd3      	cbnz	r3, 8002702 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800268c:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8002690:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8002694:	fa98 f9a8 	rbit	r9, r8
 8002698:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 800269c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80026a0:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80026a4:	fa96 fca6 	rbit	ip, r6
 80026a8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80026ac:	fabc fc8c 	clz	ip, ip
 80026b0:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026b4:	faba fa8a 	clz	sl, sl
 80026b8:	fa98 f8a8 	rbit	r8, r8
 80026bc:	fab8 f888 	clz	r8, r8
 80026c0:	fa96 f6a6 	rbit	r6, r6
 80026c4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80026c8:	fab6 f686 	clz	r6, r6
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	fab3 fb83 	clz	fp, r3
 80026d4:	6861      	ldr	r1, [r4, #4]
 80026d6:	68a3      	ldr	r3, [r4, #8]
 80026d8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80026dc:	fa01 f10a 	lsl.w	r1, r1, sl
 80026e0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80026e4:	fa03 f30b 	lsl.w	r3, r3, fp
 80026e8:	fa20 f009 	lsr.w	r0, r0, r9
 80026ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80026f0:	430b      	orrs	r3, r1
 80026f2:	fa00 f108 	lsl.w	r1, r0, r8
 80026f6:	4319      	orrs	r1, r3
 80026f8:	fa02 f306 	lsl.w	r3, r2, r6
 80026fc:	430b      	orrs	r3, r1
 80026fe:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002702:	033e      	lsls	r6, r7, #12
 8002704:	d503      	bpl.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800270c:	d005      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800270e:	02f8      	lsls	r0, r7, #11
 8002710:	d549      	bpl.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002718:	d145      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800271a:	f8df e264 	ldr.w	lr, [pc, #612]	; 8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800271e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8002722:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8002726:	fa98 f9a8 	rbit	r9, r8
 800272a:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800272e:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002732:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8002736:	fa96 fca6 	rbit	ip, r6
 800273a:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 800273e:	fabc fc8c 	clz	ip, ip
 8002742:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002746:	fabb fb8b 	clz	fp, fp
 800274a:	fa98 f8a8 	rbit	r8, r8
 800274e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8002752:	fab8 f888 	clz	r8, r8
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	fab3 fa83 	clz	sl, r3
 800275e:	fa96 f6a6 	rbit	r6, r6
 8002762:	6863      	ldr	r3, [r4, #4]
 8002764:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002768:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800276c:	fab6 f686 	clz	r6, r6
 8002770:	fa03 f10b 	lsl.w	r1, r3, fp
 8002774:	68e3      	ldr	r3, [r4, #12]
 8002776:	fa20 f009 	lsr.w	r0, r0, r9
 800277a:	fa22 f20c 	lsr.w	r2, r2, ip
 800277e:	fa03 f30a 	lsl.w	r3, r3, sl
 8002782:	430b      	orrs	r3, r1
 8002784:	fa00 f108 	lsl.w	r1, r0, r8
 8002788:	4319      	orrs	r1, r3
 800278a:	fa02 f306 	lsl.w	r3, r2, r6
 800278e:	430b      	orrs	r3, r1
 8002790:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002794:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8002798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800279a:	f023 031f 	bic.w	r3, r3, #31
 800279e:	3a01      	subs	r2, #1
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027a6:	01f9      	lsls	r1, r7, #7
 80027a8:	d53c      	bpl.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80027aa:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80027ae:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80027b2:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80027b6:	fa98 f9a8 	rbit	r9, r8
 80027ba:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80027be:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80027c2:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80027c6:	fa96 fca6 	rbit	ip, r6
 80027ca:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80027ce:	fabc fc8c 	clz	ip, ip
 80027d2:	fa9b fbab 	rbit	fp, fp
 80027d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027da:	fabb fb8b 	clz	fp, fp
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	fab3 fa83 	clz	sl, r3
 80027e6:	fa98 f8a8 	rbit	r8, r8
 80027ea:	fab8 f888 	clz	r8, r8
 80027ee:	fa96 f6a6 	rbit	r6, r6
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80027f8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80027fc:	fab6 f686 	clz	r6, r6
 8002800:	fa03 f10b 	lsl.w	r1, r3, fp
 8002804:	6923      	ldr	r3, [r4, #16]
 8002806:	fa20 f009 	lsr.w	r0, r0, r9
 800280a:	fa22 f20c 	lsr.w	r2, r2, ip
 800280e:	fa03 f30a 	lsl.w	r3, r3, sl
 8002812:	430b      	orrs	r3, r1
 8002814:	fa00 f108 	lsl.w	r1, r0, r8
 8002818:	4319      	orrs	r1, r3
 800281a:	fa02 f306 	lsl.w	r3, r2, r6
 800281e:	430b      	orrs	r3, r1
 8002820:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002824:	01ba      	lsls	r2, r7, #6
 8002826:	d526      	bpl.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002828:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 800282c:	fa9e feae 	rbit	lr, lr
 8002830:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002834:	fabe fe8e 	clz	lr, lr
 8002838:	fa90 f0a0 	rbit	r0, r0
 800283c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002840:	fab0 f780 	clz	r7, r0
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800284c:	fab2 f682 	clz	r6, r2
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	fab3 f183 	clz	r1, r3
 8002858:	6920      	ldr	r0, [r4, #16]
 800285a:	6863      	ldr	r3, [r4, #4]
 800285c:	68e2      	ldr	r2, [r4, #12]
 800285e:	40b8      	lsls	r0, r7
 8002860:	fa03 f30e 	lsl.w	r3, r3, lr
 8002864:	40b2      	lsls	r2, r6
 8002866:	4303      	orrs	r3, r0
 8002868:	431a      	orrs	r2, r3
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	408b      	lsls	r3, r1
 800286e:	4313      	orrs	r3, r2
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002876:	4e42      	ldr	r6, [pc, #264]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002878:	6833      	ldr	r3, [r6, #0]
 800287a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800287e:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f002 fc78 	bl	8005174 <HAL_GetTick>
 8002884:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002886:	6833      	ldr	r3, [r6, #0]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	f53f aede 	bmi.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800288e:	f002 fc71 	bl	8005174 <HAL_GetTick>
 8002892:	1bc0      	subs	r0, r0, r7
 8002894:	2864      	cmp	r0, #100	; 0x64
 8002896:	d9f6      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002898:	e5c6      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800289a:	4d39      	ldr	r5, [pc, #228]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f002 fc66 	bl	8005174 <HAL_GetTick>
 80028a8:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	009f      	lsls	r7, r3, #2
 80028ae:	d45d      	bmi.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028b0:	6825      	ldr	r5, [r4, #0]
 80028b2:	032e      	lsls	r6, r5, #12
 80028b4:	d460      	bmi.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80028b6:	02e8      	lsls	r0, r5, #11
 80028b8:	d464      	bmi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ba:	02a9      	lsls	r1, r5, #10
 80028bc:	f100 80ad 	bmi.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028c0:	072a      	lsls	r2, r5, #28
 80028c2:	d545      	bpl.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80028c4:	4f2e      	ldr	r7, [pc, #184]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80028c6:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80028ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80028ce:	fa95 fca5 	rbit	ip, r5
 80028d2:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 80028d6:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80028da:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028de:	fa96 f8a6 	rbit	r8, r6
 80028e2:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80028e6:	fab8 f888 	clz	r8, r8
 80028ea:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028ee:	fab9 f989 	clz	r9, r9
 80028f2:	fa96 f6a6 	rbit	r6, r6
 80028f6:	fab6 f686 	clz	r6, r6
 80028fa:	fa95 f5a5 	rbit	r5, r5
 80028fe:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8002902:	fab5 f585 	clz	r5, r5
 8002906:	fa9e feae 	rbit	lr, lr
 800290a:	6963      	ldr	r3, [r4, #20]
 800290c:	fabe fe8e 	clz	lr, lr
 8002910:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002914:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002918:	fa03 f109 	lsl.w	r1, r3, r9
 800291c:	69e3      	ldr	r3, [r4, #28]
 800291e:	fa20 f008 	lsr.w	r0, r0, r8
 8002922:	fa22 f20c 	lsr.w	r2, r2, ip
 8002926:	fa03 fe0e 	lsl.w	lr, r3, lr
 800292a:	fa02 f305 	lsl.w	r3, r2, r5
 800292e:	ea41 0e0e 	orr.w	lr, r1, lr
 8002932:	fa00 f106 	lsl.w	r1, r0, r6
 8002936:	ea4e 0101 	orr.w	r1, lr, r1
 800293a:	430b      	orrs	r3, r1
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002950:	4c0b      	ldr	r4, [pc, #44]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295a:	f002 fc0b 	bl	8005174 <HAL_GetTick>
 800295e:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f140 809c 	bpl.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002968:	2000      	movs	r0, #0
 800296a:	e0a0      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800296c:	f002 fc02 	bl	8005174 <HAL_GetTick>
 8002970:	1b80      	subs	r0, r0, r6
 8002972:	2864      	cmp	r0, #100	; 0x64
 8002974:	d999      	bls.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8002976:	e557      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800297a:	b133      	cbz	r3, 800298a <HAL_RCCEx_PeriphCLKConfig+0x61e>
 800297c:	e79b      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d197      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800298a:	4f4a      	ldr	r7, [pc, #296]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 800298c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8002990:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002994:	fa9c f9ac 	rbit	r9, ip
 8002998:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 800299c:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80029a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80029a4:	fa96 fea6 	rbit	lr, r6
 80029a8:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 80029ac:	fabe fe8e 	clz	lr, lr
 80029b0:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029b4:	faba fa8a 	clz	sl, sl
 80029b8:	fa9c fcac 	rbit	ip, ip
 80029bc:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80029c0:	fabc fc8c 	clz	ip, ip
 80029c4:	fa98 f8a8 	rbit	r8, r8
 80029c8:	fab8 f888 	clz	r8, r8
 80029cc:	fa96 f6a6 	rbit	r6, r6
 80029d0:	69a1      	ldr	r1, [r4, #24]
 80029d2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80029d6:	6963      	ldr	r3, [r4, #20]
 80029d8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80029dc:	fa01 f808 	lsl.w	r8, r1, r8
 80029e0:	fa20 f009 	lsr.w	r0, r0, r9
 80029e4:	fa03 f30a 	lsl.w	r3, r3, sl
 80029e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80029ec:	fab6 f686 	clz	r6, r6
 80029f0:	fa00 f10c 	lsl.w	r1, r0, ip
 80029f4:	ea43 0308 	orr.w	r3, r3, r8
 80029f8:	4319      	orrs	r1, r3
 80029fa:	fa02 f306 	lsl.w	r3, r2, r6
 80029fe:	430b      	orrs	r3, r1
 8002a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a0a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a18:	e74f      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a1a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a20:	f47f af4e 	bne.w	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002a24:	4f23      	ldr	r7, [pc, #140]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8002a26:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8002a2a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a2e:	fa9c f9ac 	rbit	r9, ip
 8002a32:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002a36:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002a3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a3e:	fa96 fea6 	rbit	lr, r6
 8002a42:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8002a46:	fabe fe8e 	clz	lr, lr
 8002a4a:	fa9a faaa 	rbit	sl, sl
 8002a4e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a52:	faba fa8a 	clz	sl, sl
 8002a56:	fa98 f8a8 	rbit	r8, r8
 8002a5a:	fab8 f888 	clz	r8, r8
 8002a5e:	fa9c fcac 	rbit	ip, ip
 8002a62:	fabc fc8c 	clz	ip, ip
 8002a66:	fa96 f6a6 	rbit	r6, r6
 8002a6a:	6a21      	ldr	r1, [r4, #32]
 8002a6c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002a70:	6963      	ldr	r3, [r4, #20]
 8002a72:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002a76:	fa01 f808 	lsl.w	r8, r1, r8
 8002a7a:	fa20 f009 	lsr.w	r0, r0, r9
 8002a7e:	fa03 f30a 	lsl.w	r3, r3, sl
 8002a82:	fab6 f686 	clz	r6, r6
 8002a86:	fa00 f10c 	lsl.w	r1, r0, ip
 8002a8a:	fa22 f20e 	lsr.w	r2, r2, lr
 8002a8e:	ea43 0308 	orr.w	r3, r3, r8
 8002a92:	4319      	orrs	r1, r3
 8002a94:	fa02 f306 	lsl.w	r3, r2, r6
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a9e:	e70f      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa0:	f002 fb68 	bl	8005174 <HAL_GetTick>
 8002aa4:	1b40      	subs	r0, r0, r5
 8002aa6:	2864      	cmp	r0, #100	; 0x64
 8002aa8:	f67f af5a 	bls.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8002aac:	e4bc      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002aae:	b003      	add	sp, #12
 8002ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8002ab8:	b538      	push	{r3, r4, r5, lr}
 8002aba:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8002abc:	4604      	mov	r4, r0
 8002abe:	b1c8      	cbz	r0, 8002af4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002ac0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002ac4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ac8:	b91b      	cbnz	r3, 8002ad2 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002aca:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002ace:	f002 fa45 	bl	8004f5c <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002ad2:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002ad4:	1d21      	adds	r1, r4, #4
 8002ad6:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002ad8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002adc:	f000 f978 	bl	8002dd0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002ae0:	6862      	ldr	r2, [r4, #4]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	6820      	ldr	r0, [r4, #0]
 8002ae6:	f000 f9b4 	bl	8002e52 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002aea:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002aec:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002aee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 8002af4:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 8002af6:	bd38      	pop	{r3, r4, r5, pc}

08002af8 <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002afc:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002b00:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002b02:	b2c0      	uxtb	r0, r0
 8002b04:	2802      	cmp	r0, #2
 8002b06:	d00d      	beq.n	8002b24 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002b08:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002b0a:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002b0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002b10:	f000 f9eb 	bl	8002eea <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002b14:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8002b16:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002b18:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002b1e:	2301      	movne	r3, #1
 8002b20:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 8002b24:	bd38      	pop	{r3, r4, r5, pc}

08002b26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002b26:	b510      	push	{r4, lr}
 8002b28:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002b2a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002b2e:	b2c0      	uxtb	r0, r0
 8002b30:	2802      	cmp	r0, #2
 8002b32:	d009      	beq.n	8002b48 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002b34:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002b36:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002b38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002b3c:	f000 f9fb 	bl	8002f36 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002b40:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8002b42:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002b44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 8002b48:	bd10      	pop	{r4, pc}

08002b4a <HAL_TIM_Base_MspInit>:
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b4c:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8002b4e:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002b60:	4770      	bx	lr

08002b62 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIM_IC_CaptureCallback>:
 8002b64:	4770      	bx	lr

08002b66 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_TriggerCallback>:
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b6a:	6803      	ldr	r3, [r0, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b70:	b510      	push	{r4, lr}
 8002b72:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b74:	d514      	bpl.n	8002ba0 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	0792      	lsls	r2, r2, #30
 8002b7a:	d511      	bpl.n	8002ba0 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b7c:	f06f 0202 	mvn.w	r2, #2
 8002b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b82:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002b84:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	7702      	strb	r2, [r0, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002b88:	0799      	lsls	r1, r3, #30
 8002b8a:	d002      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	f7ff ffea 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e004      	b.n	8002b9c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	f7ff ffe6 	bl	8002b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7ff ffe5 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	0752      	lsls	r2, r2, #29
 8002ba6:	d516      	bpl.n	8002bd6 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	0750      	lsls	r0, r2, #29
 8002bac:	d513      	bpl.n	8002bd6 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bae:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb6:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bb8:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bba:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002bbc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002bc0:	d002      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	f7ff ffcf 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002bc6:	e004      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc8:	f7ff ffcb 	bl	8002b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7ff ffca 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	0711      	lsls	r1, r2, #28
 8002bdc:	d515      	bpl.n	8002c0a <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	0712      	lsls	r2, r2, #28
 8002be2:	d512      	bpl.n	8002c0a <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be4:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002be8:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bec:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bee:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf0:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bf2:	079b      	lsls	r3, r3, #30
 8002bf4:	d002      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	f7ff ffb5 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002bfa:	e004      	b.n	8002c06 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfc:	f7ff ffb1 	bl	8002b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ffb0 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	2300      	movs	r3, #0
 8002c08:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	06d0      	lsls	r0, r2, #27
 8002c10:	d516      	bpl.n	8002c40 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	06d1      	lsls	r1, r2, #27
 8002c16:	d513      	bpl.n	8002c40 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c18:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1c:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c20:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c22:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c24:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c26:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c2a:	d002      	beq.n	8002c32 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2c:	f7ff ff9a 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002c30:	e004      	b.n	8002c3c <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c32:	f7ff ff96 	bl	8002b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff ff95 	bl	8002b66 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	07d2      	lsls	r2, r2, #31
 8002c46:	d508      	bpl.n	8002c5a <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	07d0      	lsls	r0, r2, #31
 8002c4c:	d505      	bpl.n	8002c5a <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c4e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c52:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c54:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c56:	f002 f8db 	bl	8004e10 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	0611      	lsls	r1, r2, #24
 8002c60:	d508      	bpl.n	8002c74 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	0612      	lsls	r2, r2, #24
 8002c66:	d505      	bpl.n	8002c74 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002c6c:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c70:	f000 f8ad 	bl	8002dce <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	05d0      	lsls	r0, r2, #23
 8002c7a:	d508      	bpl.n	8002c8e <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	0611      	lsls	r1, r2, #24
 8002c80:	d505      	bpl.n	8002c8e <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c82:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002c86:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002c8a:	f000 f8a0 	bl	8002dce <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	0652      	lsls	r2, r2, #25
 8002c94:	d508      	bpl.n	8002ca8 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	0650      	lsls	r0, r2, #25
 8002c9a:	d505      	bpl.n	8002ca8 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002ca0:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ca2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ca4:	f7ff ff60 	bl	8002b68 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	0691      	lsls	r1, r2, #26
 8002cae:	d50a      	bpl.n	8002cc6 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	0692      	lsls	r2, r2, #26
 8002cb4:	d507      	bpl.n	8002cc6 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002cba:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8002cc2:	f000 b883 	b.w	8002dcc <HAL_TIMEx_CommutationCallback>
 8002cc6:	bd10      	pop	{r4, pc}

08002cc8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002cc8:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <TIM_Base_SetConfig+0xc4>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002cca:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002ccc:	4290      	cmp	r0, r2
 8002cce:	d012      	beq.n	8002cf6 <TIM_Base_SetConfig+0x2e>
 8002cd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cd4:	d00f      	beq.n	8002cf6 <TIM_Base_SetConfig+0x2e>
 8002cd6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002cda:	4290      	cmp	r0, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x2e>
 8002cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ce2:	4290      	cmp	r0, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x2e>
 8002ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cea:	4290      	cmp	r0, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x2e>
 8002cee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002cf2:	4290      	cmp	r0, r2
 8002cf4:	d118      	bne.n	8002d28 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002cf6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002cfe:	4a23      	ldr	r2, [pc, #140]	; (8002d8c <TIM_Base_SetConfig+0xc4>)
 8002d00:	4290      	cmp	r0, r2
 8002d02:	d03b      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d08:	d038      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <TIM_Base_SetConfig+0xc8>)
 8002d0c:	4290      	cmp	r0, r2
 8002d0e:	d035      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d14:	4290      	cmp	r0, r2
 8002d16:	d031      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d1c:	4290      	cmp	r0, r2
 8002d1e:	d02d      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d20:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d24:	4290      	cmp	r0, r2
 8002d26:	d029      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <TIM_Base_SetConfig+0xcc>)
 8002d2a:	4290      	cmp	r0, r2
 8002d2c:	d026      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d32:	4290      	cmp	r0, r2
 8002d34:	d022      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d3a:	4290      	cmp	r0, r2
 8002d3c:	d01e      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d3e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002d42:	4290      	cmp	r0, r2
 8002d44:	d01a      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d4a:	4290      	cmp	r0, r2
 8002d4c:	d016      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
 8002d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d52:	4290      	cmp	r0, r2
 8002d54:	d012      	beq.n	8002d7c <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d56:	694a      	ldr	r2, [r1, #20]
 8002d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d5c:	431a      	orrs	r2, r3

  TIMx->CR1 = tmpcr1;

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d5e:	688b      	ldr	r3, [r1, #8]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;
 8002d60:	6002      	str	r2, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d62:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002d64:	680b      	ldr	r3, [r1, #0]
 8002d66:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <TIM_Base_SetConfig+0xc4>)
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0xbe>
 8002d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d72:	4298      	cmp	r0, r3
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d76:	2301      	movs	r3, #1
 8002d78:	6143      	str	r3, [r0, #20]
}
 8002d7a:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d80:	68ca      	ldr	r2, [r1, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	e7e7      	b.n	8002d56 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d86:	690b      	ldr	r3, [r1, #16]
 8002d88:	6303      	str	r3, [r0, #48]	; 0x30
 8002d8a:	e7f4      	b.n	8002d76 <TIM_Base_SetConfig+0xae>
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40014000 	.word	0x40014000

08002d98 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002d98:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	b1a0      	cbz	r0, 8002dc8 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002d9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002da2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002da6:	b91b      	cbnz	r3, 8002db0 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dac:	f7ff fecd 	bl	8002b4a <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002db0:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002db6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002dba:	f7ff ff85 	bl	8002cc8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002dbe:	2301      	movs	r3, #1
  
  return HAL_OK;
 8002dc0:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  return HAL_OK;
 8002dc6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002dc8:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <HAL_TIMEx_CommutationCallback>:
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	4770      	bx	lr

08002dd0 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002dd0:	680b      	ldr	r3, [r1, #0]
 8002dd2:	6a0a      	ldr	r2, [r1, #32]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ddc:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8002de0:	68cf      	ldr	r7, [r1, #12]
 8002de2:	690e      	ldr	r6, [r1, #16]
 8002de4:	694d      	ldr	r5, [r1, #20]
 8002de6:	698c      	ldr	r4, [r1, #24]
 8002de8:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8002dec:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002df0:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002df2:	d013      	beq.n	8002e1c <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002df4:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002df8:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002dfc:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002e00:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e04:	433e      	orrs	r6, r7
 8002e06:	4335      	orrs	r5, r6
 8002e08:	432c      	orrs	r4, r5
 8002e0a:	ea44 010a 	orr.w	r1, r4, sl
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	ea42 0309 	orr.w	r3, r2, r9
 8002e14:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002e18:	6003      	str	r3, [r0, #0]
 8002e1a:	e017      	b.n	8002e4c <FMC_SDRAM_Init+0x7c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e1c:	ea4e 0e03 	orr.w	lr, lr, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002e20:	ea4a 0202 	orr.w	r2, sl, r2
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002e24:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e28:	ea4e 0707 	orr.w	r7, lr, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002e2c:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002e30:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e32:	433e      	orrs	r6, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002e34:	ea49 0101 	orr.w	r1, r9, r1
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002e38:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e3c:	4335      	orrs	r5, r6
                       Init->MemoryDataWidth     |\
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002e3e:	6001      	str	r1, [r0, #0]
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002e40:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002e44:	432c      	orrs	r4, r5
 8002e46:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002e4a:	6044      	str	r4, [r0, #4]
  }
  
  return HAL_OK;
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e52 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002e52:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002e54:	2a01      	cmp	r2, #1
 8002e56:	f101 0404 	add.w	r4, r1, #4
 8002e5a:	680e      	ldr	r6, [r1, #0]
 8002e5c:	690a      	ldr	r2, [r1, #16]
 8002e5e:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8002e62:	698b      	ldr	r3, [r1, #24]
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002e64:	6887      	ldr	r7, [r0, #8]
 8002e66:	e894 1030 	ldmia.w	r4, {r4, r5, ip}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002e6a:	d019      	beq.n	8002ea0 <FMC_SDRAM_Timing_Init+0x4e>
 8002e6c:	3e01      	subs	r6, #1
 8002e6e:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8002e72:	3c01      	subs	r4, #1
 8002e74:	3d01      	subs	r5, #1
 8002e76:	4337      	orrs	r7, r6
 8002e78:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002e7c:	3a01      	subs	r2, #1
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 8002e84:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
 8002e88:	ea45 3401 	orr.w	r4, r5, r1, lsl #12
 8002e8c:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 8002e90:	f10e 32ff 	add.w	r2, lr, #4294967295
 8002e94:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8002e98:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002e9c:	6083      	str	r3, [r0, #8]
 8002e9e:	e022      	b.n	8002ee6 <FMC_SDRAM_Timing_Init+0x94>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002ea0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8002ea4:	f10c 31ff 	add.w	r1, ip, #4294967295
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002ea8:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 8002eac:	3e01      	subs	r6, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002eae:	ea4f 5c0e 	mov.w	ip, lr, lsl #20
 8002eb2:	3c01      	subs	r4, #1
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002eb4:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
 8002eb8:	3a01      	subs	r2, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002eba:	ea4c 3e01 	orr.w	lr, ip, r1, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002ebe:	68c1      	ldr	r1, [r0, #12]
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002ec0:	3b01      	subs	r3, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002ec2:	ea4e 0c07 	orr.w	ip, lr, r7
 8002ec6:	f001 4e70 	and.w	lr, r1, #4026531840	; 0xf0000000
 8002eca:	ea46 070e 	orr.w	r7, r6, lr
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002ece:	f8c0 c008 	str.w	ip, [r0, #8]
 8002ed2:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 8002ed6:	1e6c      	subs	r4, r5, #1
 8002ed8:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
 8002edc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002ee0:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002ee4:	60c3      	str	r3, [r0, #12]
  }
  
  return HAL_OK;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eea <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 8002eea:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002eee:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8002ef0:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002ef2:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002ef4:	e891 0009 	ldmia.w	r1, {r0, r3}
 8002ef8:	4303      	orrs	r3, r0
 8002efa:	68c8      	ldr	r0, [r1, #12]
 8002efc:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 8002f00:	688b      	ldr	r3, [r1, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 8002f08:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002f0e:	f002 f931 	bl	8005174 <HAL_GetTick>
 8002f12:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8002f14:	69a0      	ldr	r0, [r4, #24]
 8002f16:	f010 0020 	ands.w	r0, r0, #32
 8002f1a:	d00a      	beq.n	8002f32 <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f1c:	1c6b      	adds	r3, r5, #1
 8002f1e:	d0f9      	beq.n	8002f14 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f20:	b90d      	cbnz	r5, 8002f26 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8002f22:	2003      	movs	r0, #3
 8002f24:	e005      	b.n	8002f32 <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002f26:	f002 f925 	bl	8005174 <HAL_GetTick>
 8002f2a:	1b80      	subs	r0, r0, r6
 8002f2c:	4285      	cmp	r5, r0
 8002f2e:	d2f1      	bcs.n	8002f14 <FMC_SDRAM_SendCommand+0x2a>
 8002f30:	e7f7      	b.n	8002f22 <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 8002f32:	b002      	add	sp, #8
 8002f34:	bd70      	pop	{r4, r5, r6, pc}

08002f36 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8002f36:	6943      	ldr	r3, [r0, #20]
 8002f38:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8002f3c:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8002f3e:	2000      	movs	r0, #0
 8002f40:	4770      	bx	lr

08002f42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f42:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002f44:	f000 fe4e 	bl	8003be4 <vTaskStartScheduler>
  
  return osOK;
}
 8002f48:	2000      	movs	r0, #0
 8002f4a:	bd08      	pop	{r3, pc}

08002f4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f4c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f4e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f52:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f54:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f56:	460b      	mov	r3, r1
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002f58:	2c84      	cmp	r4, #132	; 0x84

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f5a:	e890 0022 	ldmia.w	r0, {r1, r5}
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8002f5e:	bf14      	ite	ne
 8002f60:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f62:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f64:	a803      	add	r0, sp, #12
 8002f66:	9400      	str	r4, [sp, #0]
 8002f68:	9001      	str	r0, [sp, #4]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 fd6c 	bl	8003a48 <xTaskCreate>
 8002f70:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f72:	bf0c      	ite	eq
 8002f74:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8002f76:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 8002f78:	b005      	add	sp, #20
 8002f7a:	bd30      	pop	{r4, r5, pc}

08002f7c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	bf08      	it	eq
 8002f80:	2001      	moveq	r0, #1
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f82:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f84:	f000 ffe4 	bl	8003f50 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	bd08      	pop	{r3, pc}

08002f8c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002f8c:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f8e:	f001 f931 	bl	80041f4 <xTaskGetSchedulerState>
 8002f92:	2801      	cmp	r0, #1
 8002f94:	d003      	beq.n	8002f9e <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002f9a:	f000 b913 	b.w	80031c4 <xPortSysTickHandler>
 8002f9e:	bd08      	pop	{r3, pc}

08002fa0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fa8:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002faa:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fac:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fae:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fb0:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fb2:	6003      	str	r3, [r0, #0]
 8002fb4:	4770      	bx	lr

08002fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6103      	str	r3, [r0, #16]
 8002fba:	4770      	bx	lr

08002fbc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fbc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fbe:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fc0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fc2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fc8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002fca:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fcc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6003      	str	r3, [r0, #0]
 8002fd2:	4770      	bx	lr

08002fd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fd4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fd6:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fd8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fda:	d101      	bne.n	8002fe0 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fdc:	6903      	ldr	r3, [r0, #16]
 8002fde:	e007      	b.n	8002ff0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe0:	f100 0308 	add.w	r3, r0, #8
 8002fe4:	685c      	ldr	r4, [r3, #4]
 8002fe6:	6825      	ldr	r5, [r4, #0]
 8002fe8:	42aa      	cmp	r2, r5
 8002fea:	d301      	bcc.n	8002ff0 <vListInsert+0x1c>
 8002fec:	4623      	mov	r3, r4
 8002fee:	e7f9      	b.n	8002fe4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ff4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ff6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ff8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002ffa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ffc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002ffe:	3301      	adds	r3, #1
 8003000:	6003      	str	r3, [r0, #0]
 8003002:	bd30      	pop	{r4, r5, pc}

08003004 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003004:	6841      	ldr	r1, [r0, #4]
 8003006:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003008:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800300a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800300c:	6882      	ldr	r2, [r0, #8]
 800300e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003014:	bf08      	it	eq
 8003016:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003018:	2200      	movs	r2, #0
 800301a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	3801      	subs	r0, #1
 8003020:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8003022:	4770      	bx	lr

08003024 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <prvTaskExitError+0x34>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	d00a      	beq.n	8003042 <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	b672      	cpsid	i
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	b662      	cpsie	i
 8003040:	e7fe      	b.n	8003040 <prvTaskExitError+0x1c>
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	b672      	cpsid	i
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	b662      	cpsie	i
 8003056:	e7fe      	b.n	8003056 <prvTaskExitError+0x32>
 8003058:	20000000 	.word	0x20000000

0800305c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <prvPortStartFirstTask+0x1c>)
 800305e:	6800      	ldr	r0, [r0, #0]
 8003060:	6800      	ldr	r0, [r0, #0]
 8003062:	f380 8808 	msr	MSP, r0
 8003066:	b662      	cpsie	i
 8003068:	b661      	cpsie	f
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	df00      	svc	0
 8003074:	bf00      	nop
 8003076:	0000      	.short	0x0000
 8003078:	e000ed08 	.word	0xe000ed08

0800307c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800307c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800308c <vPortEnableVFP+0x10>
 8003080:	6801      	ldr	r1, [r0, #0]
 8003082:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003086:	6001      	str	r1, [r0, #0]
 8003088:	4770      	bx	lr
 800308a:	0000      	.short	0x0000
 800308c:	e000ed88 	.word	0xe000ed88

08003090 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003094:	f021 0101 	bic.w	r1, r1, #1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003098:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800309c:	3844      	subs	r0, #68	; 0x44

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800309e:	6403      	str	r3, [r0, #64]	; 0x40
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <pxPortInitialiseStack+0x20>)
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030a2:	63c1      	str	r1, [r0, #60]	; 0x3c
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030a4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80030a6:	f06f 0302 	mvn.w	r3, #2
 80030aa:	6203      	str	r3, [r0, #32]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	08003025 	.word	0x08003025
	...

080030c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	4770      	bx	lr
 80030dc:	f3af 8000 	nop.w

080030e0 <pxCurrentTCBConst2>:
 80030e0:	20004394 	.word	0x20004394

080030e4 <vPortEnterCritical>:
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	b672      	cpsid	i
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <vPortEnterCritical+0x44>)
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030fe:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003100:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003102:	d10f      	bne.n	8003124 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <vPortEnterCritical+0x48>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f013 0fff 	tst.w	r3, #255	; 0xff
 800310c:	d00a      	beq.n	8003124 <vPortEnterCritical+0x40>
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	b672      	cpsid	i
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	b662      	cpsie	i
 8003122:	e7fe      	b.n	8003122 <vPortEnterCritical+0x3e>
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000000 	.word	0x20000000
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <vPortExitCritical+0x28>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	b953      	cbnz	r3, 800314c <vPortExitCritical+0x1c>
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	b672      	cpsid	i
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	b662      	cpsie	i
 800314a:	e7fe      	b.n	800314a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800314c:	3b01      	subs	r3, #1
 800314e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003150:	b90b      	cbnz	r3, 8003156 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	4770      	bx	lr
 8003158:	20000000 	.word	0x20000000
 800315c:	00000000 	.word	0x00000000

08003160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003160:	f3ef 8009 	mrs	r0, PSP
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <pxCurrentTCBConst>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f01e 0f10 	tst.w	lr, #16
 8003170:	bf08      	it	eq
 8003172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317a:	6010      	str	r0, [r2, #0]
 800317c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003184:	b672      	cpsid	i
 8003186:	f380 8811 	msr	BASEPRI, r0
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	b662      	cpsie	i
 8003194:	f000 ff3e 	bl	8004014 <vTaskSwitchContext>
 8003198:	f04f 0000 	mov.w	r0, #0
 800319c:	f380 8811 	msr	BASEPRI, r0
 80031a0:	bc08      	pop	{r3}
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	6808      	ldr	r0, [r1, #0]
 80031a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031aa:	f01e 0f10 	tst.w	lr, #16
 80031ae:	bf08      	it	eq
 80031b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031b4:	f380 8809 	msr	PSP, r0
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <pxCurrentTCBConst>:
 80031c0:	20004394 	.word	0x20004394

080031c4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031c4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	b672      	cpsid	i
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031da:	f000 fd51 	bl	8003c80 <xTaskIncrementTick>
 80031de:	b118      	cbz	r0, 80031e8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <xPortSysTickHandler+0x2c>)
 80031e6:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031e8:	2300      	movs	r3, #0
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	bd08      	pop	{r3, pc}
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <vPortSetupTimerInterrupt+0x1c>)
 80031f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <vPortSetupTimerInterrupt+0x20>)
 8003202:	3b01      	subs	r3, #1
 8003204:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003206:	2207      	movs	r2, #7
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <vPortSetupTimerInterrupt+0x24>)
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	20000008 	.word	0x20000008
 8003214:	e000e014 	.word	0xe000e014
 8003218:	e000e010 	.word	0xe000e010

0800321c <xPortStartScheduler>:
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <xPortStartScheduler+0x90>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800321e:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003220:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003222:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003228:	22ff      	movs	r2, #255	; 0xff
 800322a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800322c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <xPortStartScheduler+0x94>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003236:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800323a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800323e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003240:	2207      	movs	r2, #7
 8003242:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <xPortStartScheduler+0x98>)
 8003244:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003246:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800324a:	1e54      	subs	r4, r2, #1
 800324c:	0600      	lsls	r0, r0, #24
 800324e:	d508      	bpl.n	8003262 <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003250:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003254:	2101      	movs	r1, #1
 8003256:	0052      	lsls	r2, r2, #1
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f88d 2003 	strb.w	r2, [sp, #3]
 800325e:	4622      	mov	r2, r4
 8003260:	e7f1      	b.n	8003246 <xPortStartScheduler+0x2a>
 8003262:	b101      	cbz	r1, 8003266 <xPortStartScheduler+0x4a>
 8003264:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	0212      	lsls	r2, r2, #8
 800326a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800326e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <xPortStartScheduler+0x90>)
 8003274:	b2db      	uxtb	r3, r3
 8003276:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <xPortStartScheduler+0x9c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003280:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003288:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800328a:	f7ff ffb3 	bl	80031f4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800328e:	2200      	movs	r2, #0
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <xPortStartScheduler+0xa0>)
 8003292:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003294:	f7ff fef2 	bl	800307c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <xPortStartScheduler+0xa4>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80032a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032a2:	f7ff fedb 	bl	800305c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80032a6:	f7ff febd 	bl	8003024 <prvTaskExitError>
 80032aa:	bf00      	nop
 80032ac:	e000e400 	.word	0xe000e400
 80032b0:	200006a8 	.word	0x200006a8
 80032b4:	200006ac 	.word	0x200006ac
 80032b8:	e000ed20 	.word	0xe000ed20
 80032bc:	20000000 	.word	0x20000000
 80032c0:	e000ef34 	.word	0xe000ef34

080032c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <prvInsertBlockIntoFreeList+0x40>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032c6:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4282      	cmp	r2, r0
 80032cc:	d201      	bcs.n	80032d2 <prvInsertBlockIntoFreeList+0xe>
 80032ce:	4613      	mov	r3, r2
 80032d0:	e7fa      	b.n	80032c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	185c      	adds	r4, r3, r1
 80032d6:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80032d8:	bf01      	itttt	eq
 80032da:	6840      	ldreq	r0, [r0, #4]
 80032dc:	1809      	addeq	r1, r1, r0
 80032de:	4618      	moveq	r0, r3
 80032e0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80032e2:	6841      	ldr	r1, [r0, #4]
 80032e4:	1844      	adds	r4, r0, r1
 80032e6:	42a2      	cmp	r2, r4
 80032e8:	d107      	bne.n	80032fa <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80032ea:	4c07      	ldr	r4, [pc, #28]	; (8003308 <prvInsertBlockIntoFreeList+0x44>)
 80032ec:	6824      	ldr	r4, [r4, #0]
 80032ee:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032f0:	bf1f      	itttt	ne
 80032f2:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032f4:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032f6:	1909      	addne	r1, r1, r4
 80032f8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032fa:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032fc:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032fe:	bf18      	it	ne
 8003300:	6018      	strne	r0, [r3, #0]
 8003302:	bd10      	pop	{r4, pc}
 8003304:	200006b8 	.word	0x200006b8
 8003308:	200006b4 	.word	0x200006b4

0800330c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800330c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003310:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8003312:	f000 fca7 	bl	8003c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003316:	4942      	ldr	r1, [pc, #264]	; (8003420 <pvPortMalloc+0x114>)
 8003318:	4d42      	ldr	r5, [pc, #264]	; (8003424 <pvPortMalloc+0x118>)
 800331a:	680b      	ldr	r3, [r1, #0]
 800331c:	bb0b      	cbnz	r3, 8003362 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800331e:	4a42      	ldr	r2, [pc, #264]	; (8003428 <pvPortMalloc+0x11c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003320:	0756      	lsls	r6, r2, #29

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003322:	4e42      	ldr	r6, [pc, #264]	; (800342c <pvPortMalloc+0x120>)
	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003324:	bf1b      	ittet	ne
 8003326:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003328:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800332c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003330:	f020 0007 	bicne.w	r0, r0, #7
 8003334:	bf1c      	itt	ne
 8003336:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003338:	1a1b      	subne	r3, r3, r0
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800333a:	2000      	movs	r0, #0

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800333c:	4413      	add	r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800333e:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003340:	6070      	str	r0, [r6, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8003342:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003344:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 8003348:	6018      	str	r0, [r3, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800334a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800334c:	1a98      	subs	r0, r3, r2
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 800334e:	600b      	str	r3, [r1, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003350:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <pvPortMalloc+0x124>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003354:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003356:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <pvPortMalloc+0x128>)
 800335a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800335c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003360:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003362:	682f      	ldr	r7, [r5, #0]
 8003364:	4227      	tst	r7, r4
 8003366:	d147      	bne.n	80033f8 <pvPortMalloc+0xec>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003368:	2c00      	cmp	r4, #0
 800336a:	d046      	beq.n	80033fa <pvPortMalloc+0xee>
			{
				xWantedSize += xHeapStructSize;
 800336c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003370:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003372:	bf1c      	itt	ne
 8003374:	f023 0307 	bicne.w	r3, r3, #7
 8003378:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03a      	beq.n	80033f4 <pvPortMalloc+0xe8>
 800337e:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <pvPortMalloc+0x128>)
 8003380:	6816      	ldr	r6, [r2, #0]
 8003382:	4690      	mov	r8, r2
 8003384:	42b3      	cmp	r3, r6
 8003386:	d837      	bhi.n	80033f8 <pvPortMalloc+0xec>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003388:	4a28      	ldr	r2, [pc, #160]	; (800342c <pvPortMalloc+0x120>)
 800338a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800338c:	6868      	ldr	r0, [r5, #4]
 800338e:	4283      	cmp	r3, r0
 8003390:	d803      	bhi.n	800339a <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	428d      	cmp	r5, r1
 8003396:	d106      	bne.n	80033a6 <pvPortMalloc+0x9a>
 8003398:	e02e      	b.n	80033f8 <pvPortMalloc+0xec>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800339a:	682c      	ldr	r4, [r5, #0]
 800339c:	2c00      	cmp	r4, #0
 800339e:	d0f8      	beq.n	8003392 <pvPortMalloc+0x86>
 80033a0:	462a      	mov	r2, r5
 80033a2:	4625      	mov	r5, r4
 80033a4:	e7f2      	b.n	800338c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033a6:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033a8:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033aa:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033ac:	1ac2      	subs	r2, r0, r3
 80033ae:	2a10      	cmp	r2, #16
 80033b0:	d911      	bls.n	80033d6 <pvPortMalloc+0xca>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80033b2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033b4:	0741      	lsls	r1, r0, #29
 80033b6:	d00a      	beq.n	80033ce <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	b672      	cpsid	i
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	b662      	cpsie	i
 80033cc:	e7fe      	b.n	80033cc <pvPortMalloc+0xc0>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033ce:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033d0:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033d2:	f7ff ff77 	bl	80032c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033d6:	686b      	ldr	r3, [r5, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033d8:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033da:	4915      	ldr	r1, [pc, #84]	; (8003430 <pvPortMalloc+0x124>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033dc:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033de:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033e0:	6808      	ldr	r0, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80033e2:	2300      	movs	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033e4:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033e8:	4282      	cmp	r2, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033ea:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033ec:	602b      	str	r3, [r5, #0]

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ee:	bf38      	it	cc
 80033f0:	600a      	strcc	r2, [r1, #0]
 80033f2:	e002      	b.n	80033fa <pvPortMalloc+0xee>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80033f4:	461c      	mov	r4, r3
 80033f6:	e000      	b.n	80033fa <pvPortMalloc+0xee>
 80033f8:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033fa:	f000 fcdb 	bl	8003db4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033fe:	0763      	lsls	r3, r4, #29
 8003400:	d00a      	beq.n	8003418 <pvPortMalloc+0x10c>
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	b672      	cpsid	i
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	b662      	cpsie	i
 8003416:	e7fe      	b.n	8003416 <pvPortMalloc+0x10a>
	return pvReturn;
}
 8003418:	4620      	mov	r0, r4
 800341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800341e:	bf00      	nop
 8003420:	200006b4 	.word	0x200006b4
 8003424:	200042c0 	.word	0x200042c0
 8003428:	200006c0 	.word	0x200006c0
 800342c:	200006b8 	.word	0x200006b8
 8003430:	200042c4 	.word	0x200042c4
 8003434:	200006b0 	.word	0x200006b0

08003438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003438:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 800343a:	4604      	mov	r4, r0
 800343c:	2800      	cmp	r0, #0
 800343e:	d032      	beq.n	80034a6 <vPortFree+0x6e>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003440:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <vPortFree+0x70>)
 8003442:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4213      	tst	r3, r2
 800344a:	d10a      	bne.n	8003462 <vPortFree+0x2a>
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	b672      	cpsid	i
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	b662      	cpsie	i
 8003460:	e7fe      	b.n	8003460 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003462:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003466:	b151      	cbz	r1, 800347e <vPortFree+0x46>
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	b672      	cpsid	i
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	b662      	cpsie	i
 800347c:	e7fe      	b.n	800347c <vPortFree+0x44>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800347e:	ea23 0302 	bic.w	r3, r3, r2
 8003482:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8003486:	f000 fbed 	bl	8003c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <vPortFree+0x74>)
 800348c:	f854 1c04 	ldr.w	r1, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003490:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	440b      	add	r3, r1
 8003498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800349a:	f7ff ff13 	bl	80032c4 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800349e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80034a2:	f000 bc87 	b.w	8003db4 <xTaskResumeAll>
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	200042c0 	.word	0x200042c0
 80034ac:	200006b0 	.word	0x200006b0

080034b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034b4:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034b6:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034b8:	6b86      	ldr	r6, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ba:	b932      	cbnz	r2, 80034ca <prvCopyDataToQueue+0x1a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034bc:	6805      	ldr	r5, [r0, #0]
 80034be:	bb2d      	cbnz	r5, 800350c <prvCopyDataToQueue+0x5c>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034c0:	6840      	ldr	r0, [r0, #4]
 80034c2:	f000 feed 	bl	80042a0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80034c6:	6065      	str	r5, [r4, #4]
 80034c8:	e027      	b.n	800351a <prvCopyDataToQueue+0x6a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ca:	b965      	cbnz	r5, 80034e6 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	f003 fe4d 	bl	800716c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034d2:	68a2      	ldr	r2, [r4, #8]
 80034d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034d6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d8:	6862      	ldr	r2, [r4, #4]
 80034da:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034dc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034de:	d317      	bcc.n	8003510 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	60a3      	str	r3, [r4, #8]
 80034e4:	e014      	b.n	8003510 <prvCopyDataToQueue+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e6:	68c0      	ldr	r0, [r0, #12]
 80034e8:	f003 fe40 	bl	800716c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ee:	68e2      	ldr	r2, [r4, #12]
 80034f0:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f2:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034f4:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034f6:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80034f8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80034fa:	bf3e      	ittt	cc
 80034fc:	6862      	ldrcc	r2, [r4, #4]
 80034fe:	189b      	addcc	r3, r3, r2
 8003500:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003502:	2d02      	cmp	r5, #2
 8003504:	d106      	bne.n	8003514 <prvCopyDataToQueue+0x64>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003506:	b13e      	cbz	r6, 8003518 <prvCopyDataToQueue+0x68>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003508:	3e01      	subs	r6, #1
 800350a:	e003      	b.n	8003514 <prvCopyDataToQueue+0x64>
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800350c:	4610      	mov	r0, r2
 800350e:	e004      	b.n	800351a <prvCopyDataToQueue+0x6a>
 8003510:	4628      	mov	r0, r5
 8003512:	e002      	b.n	800351a <prvCopyDataToQueue+0x6a>
 8003514:	2000      	movs	r0, #0
 8003516:	e000      	b.n	800351a <prvCopyDataToQueue+0x6a>
 8003518:	4630      	mov	r0, r6
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800351a:	3601      	adds	r6, #1
 800351c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800351e:	bd70      	pop	{r4, r5, r6, pc}

08003520 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003520:	4603      	mov	r3, r0
 8003522:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003526:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003528:	b162      	cbz	r2, 8003544 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800352a:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800352c:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800352e:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003530:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003532:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8003534:	f85d 4b04 	ldr.w	r4, [sp], #4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003538:	bf24      	itt	cs
 800353a:	6819      	ldrcs	r1, [r3, #0]
 800353c:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800353e:	68d9      	ldr	r1, [r3, #12]
 8003540:	f003 be14 	b.w	800716c <memcpy>
	}
}
 8003544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003548:	4770      	bx	lr

0800354a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800354a:	b570      	push	{r4, r5, r6, lr}
 800354c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800354e:	f7ff fdc9 	bl	80030e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003552:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003556:	f104 0624 	add.w	r6, r4, #36	; 0x24
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800355a:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800355c:	2d00      	cmp	r5, #0
 800355e:	dd0a      	ble.n	8003576 <prvUnlockQueue+0x2c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003562:	b143      	cbz	r3, 8003576 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003564:	4630      	mov	r0, r6
 8003566:	f000 fdad 	bl	80040c4 <xTaskRemoveFromEventList>
 800356a:	b108      	cbz	r0, 8003570 <prvUnlockQueue+0x26>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800356c:	f000 fe3c 	bl	80041e8 <vTaskMissedYield>
 8003570:	3d01      	subs	r5, #1
 8003572:	b26d      	sxtb	r5, r5
 8003574:	e7f2      	b.n	800355c <prvUnlockQueue+0x12>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003576:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003578:	f104 0610 	add.w	r6, r4, #16
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800357c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003580:	f7ff fdd6 	bl	8003130 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003584:	f7ff fdae 	bl	80030e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003588:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800358c:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800358e:	2d00      	cmp	r5, #0
 8003590:	dd0a      	ble.n	80035a8 <prvUnlockQueue+0x5e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003592:	6923      	ldr	r3, [r4, #16]
 8003594:	b143      	cbz	r3, 80035a8 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003596:	4630      	mov	r0, r6
 8003598:	f000 fd94 	bl	80040c4 <xTaskRemoveFromEventList>
 800359c:	b108      	cbz	r0, 80035a2 <prvUnlockQueue+0x58>
				{
					vTaskMissedYield();
 800359e:	f000 fe23 	bl	80041e8 <vTaskMissedYield>
 80035a2:	3d01      	subs	r5, #1
 80035a4:	b26d      	sxtb	r5, r5
 80035a6:	e7f2      	b.n	800358e <prvUnlockQueue+0x44>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80035a8:	23ff      	movs	r3, #255	; 0xff
 80035aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80035ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80035b2:	f7ff bdbd 	b.w	8003130 <vPortExitCritical>
	...

080035b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035b8:	b538      	push	{r3, r4, r5, lr}
 80035ba:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80035bc:	4604      	mov	r4, r0
 80035be:	b950      	cbnz	r0, 80035d6 <xQueueGenericReset+0x1e>
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	b672      	cpsid	i
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	b662      	cpsie	i
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericReset+0x1c>

	taskENTER_CRITICAL();
 80035d6:	f7ff fd85 	bl	80030e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035da:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80035dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	4343      	muls	r3, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035e2:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035e4:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035e6:	1a1b      	subs	r3, r3, r0
 80035e8:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035ea:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035ec:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035ee:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035f0:	23ff      	movs	r3, #255	; 0xff
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035f2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->cRxLock = queueUNLOCKED;
 80035f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035fc:	b97d      	cbnz	r5, 800361e <xQueueGenericReset+0x66>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035fe:	6923      	ldr	r3, [r4, #16]
 8003600:	b1ab      	cbz	r3, 800362e <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003602:	f104 0010 	add.w	r0, r4, #16
 8003606:	f000 fd5d 	bl	80040c4 <xTaskRemoveFromEventList>
 800360a:	b180      	cbz	r0, 800362e <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <xQueueGenericReset+0x80>)
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	e007      	b.n	800362e <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800361e:	f104 0010 	add.w	r0, r4, #16
 8003622:	f7ff fcbd 	bl	8002fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003626:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800362a:	f7ff fcb9 	bl	8002fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800362e:	f7ff fd7f 	bl	8003130 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003632:	2001      	movs	r0, #1
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	e000ed04 	.word	0xe000ed04

0800363c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	460d      	mov	r5, r1
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003640:	4606      	mov	r6, r0
 8003642:	b950      	cbnz	r0, 800365a <xQueueGenericCreate+0x1e>
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	b672      	cpsid	i
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	b662      	cpsie	i
 8003658:	e7fe      	b.n	8003658 <xQueueGenericCreate+0x1c>
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800365a:	4348      	muls	r0, r1
 800365c:	3048      	adds	r0, #72	; 0x48
 800365e:	f7ff fe55 	bl	800330c <pvPortMalloc>

		if( pxNewQueue != NULL )
 8003662:	4604      	mov	r4, r0
 8003664:	b158      	cbz	r0, 800367e <xQueueGenericCreate+0x42>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003666:	b90d      	cbnz	r5, 800366c <xQueueGenericCreate+0x30>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003668:	6020      	str	r0, [r4, #0]
 800366a:	e002      	b.n	8003672 <xQueueGenericCreate+0x36>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800366c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8003670:	6003      	str	r3, [r0, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003672:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003674:	2101      	movs	r1, #1
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
	pxNewQueue->uxItemSize = uxItemSize;
 8003676:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003678:	4620      	mov	r0, r4
 800367a:	f7ff ff9d 	bl	80035b8 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
 800367e:	4620      	mov	r0, r4
 8003680:	bd70      	pop	{r4, r5, r6, pc}
	...

08003684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003688:	4689      	mov	r9, r1
 800368a:	9201      	str	r2, [sp, #4]
 800368c:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800368e:	4604      	mov	r4, r0
 8003690:	b950      	cbnz	r0, 80036a8 <xQueueGenericSend+0x24>
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	b672      	cpsid	i
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	b662      	cpsie	i
 80036a6:	e7fe      	b.n	80036a6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036a8:	b961      	cbnz	r1, 80036c4 <xQueueGenericSend+0x40>
 80036aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036ac:	b153      	cbz	r3, 80036c4 <xQueueGenericSend+0x40>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	b672      	cpsid	i
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	b662      	cpsie	i
 80036c2:	e7fe      	b.n	80036c2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036c4:	2f02      	cmp	r7, #2
 80036c6:	d10d      	bne.n	80036e4 <xQueueGenericSend+0x60>
 80036c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d00a      	beq.n	80036e4 <xQueueGenericSend+0x60>
 80036ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d2:	b672      	cpsid	i
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	b662      	cpsie	i
 80036e2:	e7fe      	b.n	80036e2 <xQueueGenericSend+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e4:	f000 fd86 	bl	80041f4 <xTaskGetSchedulerState>
 80036e8:	b910      	cbnz	r0, 80036f0 <xQueueGenericSend+0x6c>
 80036ea:	9e01      	ldr	r6, [sp, #4]
 80036ec:	b10e      	cbz	r6, 80036f2 <xQueueGenericSend+0x6e>
 80036ee:	e072      	b.n	80037d6 <xQueueGenericSend+0x152>
 80036f0:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80036f2:	f04f 0800 	mov.w	r8, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80036f6:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80037f4 <xQueueGenericSend+0x170>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036fa:	f7ff fcf3 	bl	80030e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003702:	429a      	cmp	r2, r3
 8003704:	d301      	bcc.n	800370a <xQueueGenericSend+0x86>
 8003706:	2f02      	cmp	r7, #2
 8003708:	d117      	bne.n	800373a <xQueueGenericSend+0xb6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800370a:	463a      	mov	r2, r7
 800370c:	4649      	mov	r1, r9
 800370e:	4620      	mov	r0, r4
 8003710:	f7ff fece 	bl	80034b0 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003716:	b11b      	cbz	r3, 8003720 <xQueueGenericSend+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003718:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800371c:	f000 fcd2 	bl	80040c4 <xTaskRemoveFromEventList>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003720:	b138      	cbz	r0, 8003732 <xQueueGenericSend+0xae>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <xQueueGenericSend+0x170>)
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003732:	f7ff fcfd 	bl	8003130 <vPortExitCritical>
				return pdPASS;
 8003736:	2001      	movs	r0, #1
 8003738:	e058      	b.n	80037ec <xQueueGenericSend+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800373a:	9d01      	ldr	r5, [sp, #4]
 800373c:	b91d      	cbnz	r5, 8003746 <xQueueGenericSend+0xc2>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800373e:	f7ff fcf7 	bl	8003130 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003742:	4628      	mov	r0, r5
 8003744:	e052      	b.n	80037ec <xQueueGenericSend+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003746:	b916      	cbnz	r6, 800374e <xQueueGenericSend+0xca>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003748:	a802      	add	r0, sp, #8
 800374a:	f000 fcff 	bl	800414c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800374e:	f7ff fcef 	bl	8003130 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003752:	f000 fa87 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003756:	f7ff fcc5 	bl	80030e4 <vPortEnterCritical>
 800375a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d101      	bne.n	8003766 <xQueueGenericSend+0xe2>
 8003762:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8003766:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800376a:	2bff      	cmp	r3, #255	; 0xff
 800376c:	d101      	bne.n	8003772 <xQueueGenericSend+0xee>
 800376e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003772:	f7ff fcdd 	bl	8003130 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003776:	a901      	add	r1, sp, #4
 8003778:	a802      	add	r0, sp, #8
 800377a:	f000 fcf7 	bl	800416c <xTaskCheckForTimeOut>
 800377e:	bb18      	cbnz	r0, 80037c8 <xQueueGenericSend+0x144>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003780:	f7ff fcb0 	bl	80030e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003784:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003786:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003788:	f7ff fcd2 	bl	8003130 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800378c:	42ae      	cmp	r6, r5
 800378e:	d115      	bne.n	80037bc <xQueueGenericSend+0x138>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003790:	9901      	ldr	r1, [sp, #4]
 8003792:	f104 0010 	add.w	r0, r4, #16
 8003796:	f000 fc79 	bl	800408c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fed5 	bl	800354a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037a0:	f000 fb08 	bl	8003db4 <xTaskResumeAll>
 80037a4:	b108      	cbz	r0, 80037aa <xQueueGenericSend+0x126>
 80037a6:	2601      	movs	r6, #1
 80037a8:	e7a7      	b.n	80036fa <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 80037aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037ae:	f8ca 3000 	str.w	r3, [sl]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	e7f4      	b.n	80037a6 <xQueueGenericSend+0x122>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fec4 	bl	800354a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037c2:	f000 faf7 	bl	8003db4 <xTaskResumeAll>
 80037c6:	e7ee      	b.n	80037a6 <xQueueGenericSend+0x122>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff febe 	bl	800354a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ce:	f000 faf1 	bl	8003db4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037d2:	2000      	movs	r0, #0
 80037d4:	e00a      	b.n	80037ec <xQueueGenericSend+0x168>
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	b672      	cpsid	i
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	b662      	cpsie	i
 80037ea:	e7fe      	b.n	80037ea <xQueueGenericSend+0x166>
		}
	}
}
 80037ec:	b004      	add	sp, #16
 80037ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037f2:	bf00      	nop
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80037f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	4688      	mov	r8, r1
 80037fe:	9201      	str	r2, [sp, #4]
 8003800:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003802:	4604      	mov	r4, r0
 8003804:	b950      	cbnz	r0, 800381c <xQueueGenericReceive+0x24>
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	b672      	cpsid	i
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	b662      	cpsie	i
 800381a:	e7fe      	b.n	800381a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800381c:	b961      	cbnz	r1, 8003838 <xQueueGenericReceive+0x40>
 800381e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003820:	b153      	cbz	r3, 8003838 <xQueueGenericReceive+0x40>
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	b672      	cpsid	i
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	b662      	cpsie	i
 8003836:	e7fe      	b.n	8003836 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003838:	f000 fcdc 	bl	80041f4 <xTaskGetSchedulerState>
 800383c:	b910      	cbnz	r0, 8003844 <xQueueGenericReceive+0x4c>
 800383e:	9e01      	ldr	r6, [sp, #4]
 8003840:	b10e      	cbz	r6, 8003846 <xQueueGenericReceive+0x4e>
 8003842:	e08a      	b.n	800395a <xQueueGenericReceive+0x162>
 8003844:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003846:	2700      	movs	r7, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8003848:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8003978 <xQueueGenericReceive+0x180>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800384c:	f7ff fc4a 	bl	80030e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003850:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003852:	b33d      	cbz	r5, 80038a4 <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003854:	4641      	mov	r1, r8
 8003856:	4620      	mov	r0, r4
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8003858:	68e6      	ldr	r6, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800385a:	f7ff fe61 	bl	8003520 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800385e:	f1b9 0f00 	cmp.w	r9, #0
 8003862:	d10b      	bne.n	800387c <xQueueGenericReceive+0x84>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003864:	3d01      	subs	r5, #1

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003866:	6823      	ldr	r3, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003868:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800386a:	b913      	cbnz	r3, 8003872 <xQueueGenericReceive+0x7a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800386c:	f000 fd6c 	bl	8004348 <pvTaskIncrementMutexHeldCount>
 8003870:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	b193      	cbz	r3, 800389c <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003876:	f104 0010 	add.w	r0, r4, #16
 800387a:	e004      	b.n	8003886 <xQueueGenericReceive+0x8e>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800387e:	60e6      	str	r6, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003880:	b163      	cbz	r3, 800389c <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003886:	f000 fc1d 	bl	80040c4 <xTaskRemoveFromEventList>
 800388a:	b138      	cbz	r0, 800389c <xQueueGenericReceive+0xa4>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800388c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <xQueueGenericReceive+0x180>)
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800389c:	f7ff fc48 	bl	8003130 <vPortExitCritical>
				return pdPASS;
 80038a0:	2001      	movs	r0, #1
 80038a2:	e065      	b.n	8003970 <xQueueGenericReceive+0x178>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a4:	9d01      	ldr	r5, [sp, #4]
 80038a6:	b915      	cbnz	r5, 80038ae <xQueueGenericReceive+0xb6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038a8:	f7ff fc42 	bl	8003130 <vPortExitCritical>
 80038ac:	e053      	b.n	8003956 <xQueueGenericReceive+0x15e>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ae:	b916      	cbnz	r6, 80038b6 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80038b0:	a802      	add	r0, sp, #8
 80038b2:	f000 fc4b 	bl	800414c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038b6:	f7ff fc3b 	bl	8003130 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ba:	f000 f9d3 	bl	8003c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038be:	f7ff fc11 	bl	80030e4 <vPortEnterCritical>
 80038c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d101      	bne.n	80038ce <xQueueGenericReceive+0xd6>
 80038ca:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80038ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80038d2:	2bff      	cmp	r3, #255	; 0xff
 80038d4:	d101      	bne.n	80038da <xQueueGenericReceive+0xe2>
 80038d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038da:	f7ff fc29 	bl	8003130 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038de:	a901      	add	r1, sp, #4
 80038e0:	a802      	add	r0, sp, #8
 80038e2:	f000 fc43 	bl	800416c <xTaskCheckForTimeOut>
 80038e6:	bb50      	cbnz	r0, 800393e <xQueueGenericReceive+0x146>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e8:	f7ff fbfc 	bl	80030e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f7ff fc1f 	bl	8003130 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f2:	b9f5      	cbnz	r5, 8003932 <xQueueGenericReceive+0x13a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	b933      	cbnz	r3, 8003906 <xQueueGenericReceive+0x10e>
					{
						taskENTER_CRITICAL();
 80038f8:	f7ff fbf4 	bl	80030e4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80038fc:	6860      	ldr	r0, [r4, #4]
 80038fe:	f000 fc89 	bl	8004214 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8003902:	f7ff fc15 	bl	8003130 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003906:	9901      	ldr	r1, [sp, #4]
 8003908:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800390c:	f000 fbbe 	bl	800408c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003910:	4620      	mov	r0, r4
 8003912:	f7ff fe1a 	bl	800354a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003916:	f000 fa4d 	bl	8003db4 <xTaskResumeAll>
 800391a:	b108      	cbz	r0, 8003920 <xQueueGenericReceive+0x128>
 800391c:	2601      	movs	r6, #1
 800391e:	e795      	b.n	800384c <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
 8003920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003924:	f8ca 3000 	str.w	r3, [sl]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	e7f4      	b.n	800391c <xQueueGenericReceive+0x124>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003932:	4620      	mov	r0, r4
 8003934:	f7ff fe09 	bl	800354a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003938:	f000 fa3c 	bl	8003db4 <xTaskResumeAll>
 800393c:	e7ee      	b.n	800391c <xQueueGenericReceive+0x124>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800393e:	4620      	mov	r0, r4
 8003940:	f7ff fe03 	bl	800354a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003944:	f000 fa36 	bl	8003db4 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003948:	f7ff fbcc 	bl	80030e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800394c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800394e:	f7ff fbef 	bl	8003130 <vPortExitCritical>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003952:	2d00      	cmp	r5, #0
 8003954:	d1e2      	bne.n	800391c <xQueueGenericReceive+0x124>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003956:	4628      	mov	r0, r5
 8003958:	e00a      	b.n	8003970 <xQueueGenericReceive+0x178>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	b672      	cpsid	i
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	b662      	cpsie	i
 800396e:	e7fe      	b.n	800396e <xQueueGenericReceive+0x176>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003970:	b004      	add	sp, #16
 8003972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003976:	bf00      	nop
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800397c:	4a06      	ldr	r2, [pc, #24]	; (8003998 <prvResetNextTaskUnblockTime+0x1c>)
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <prvResetNextTaskUnblockTime+0x20>)
 8003984:	b911      	cbnz	r1, 800398c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	e003      	b.n	8003994 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003990:	68d2      	ldr	r2, [r2, #12]
 8003992:	6852      	ldr	r2, [r2, #4]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4770      	bx	lr
 8003998:	200042cc 	.word	0x200042cc
 800399c:	20004398 	.word	0x20004398

080039a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x74>)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039a4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039a6:	4d1c      	ldr	r5, [pc, #112]	; (8003a18 <prvAddCurrentTaskToDelayedList+0x78>)
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039a8:	460f      	mov	r7, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039aa:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ac:	6828      	ldr	r0, [r5, #0]
 80039ae:	3004      	adds	r0, #4
 80039b0:	f7ff fb28 	bl	8003004 <uxListRemove>
 80039b4:	462b      	mov	r3, r5
 80039b6:	b940      	cbnz	r0, 80039ca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039b8:	682a      	ldr	r2, [r5, #0]
 80039ba:	4d18      	ldr	r5, [pc, #96]	; (8003a1c <prvAddCurrentTaskToDelayedList+0x7c>)
 80039bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039be:	2201      	movs	r2, #1
 80039c0:	6828      	ldr	r0, [r5, #0]
 80039c2:	408a      	lsls	r2, r1
 80039c4:	ea20 0202 	bic.w	r2, r0, r2
 80039c8:	602a      	str	r2, [r5, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039ca:	1c62      	adds	r2, r4, #1
 80039cc:	d107      	bne.n	80039de <prvAddCurrentTaskToDelayedList+0x3e>
 80039ce:	b137      	cbz	r7, 80039de <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	4813      	ldr	r0, [pc, #76]	; (8003a20 <prvAddCurrentTaskToDelayedList+0x80>)
 80039d4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039da:	f7ff baef 	b.w	8002fbc <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039de:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <prvAddCurrentTaskToDelayedList+0x78>)

			if( xTimeToWake < xConstTickCount )
 80039e4:	42a6      	cmp	r6, r4
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039e6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80039e8:	d907      	bls.n	80039fa <prvAddCurrentTaskToDelayedList+0x5a>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <prvAddCurrentTaskToDelayedList+0x84>)
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039f4:	3104      	adds	r1, #4
 80039f6:	f7ff baed 	b.w	8002fd4 <vListInsert>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <prvAddCurrentTaskToDelayedList+0x88>)
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	6811      	ldr	r1, [r2, #0]
 8003a00:	3104      	adds	r1, #4
 8003a02:	f7ff fae7 	bl	8002fd4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <prvAddCurrentTaskToDelayedList+0x8c>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4294      	cmp	r4, r2
 8003a0c:	d200      	bcs.n	8003a10 <prvAddCurrentTaskToDelayedList+0x70>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003a0e:	601c      	str	r4, [r3, #0]
 8003a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000439c 	.word	0x2000439c
 8003a18:	20004394 	.word	0x20004394
 8003a1c:	200043ec 	.word	0x200043ec
 8003a20:	200043d8 	.word	0x200043d8
 8003a24:	200043a0 	.word	0x200043a0
 8003a28:	200042cc 	.word	0x200042cc
 8003a2c:	20004398 	.word	0x20004398

08003a30 <prvTaskIsTaskSuspended.part.0>:
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	e7fe      	b.n	8003a44 <prvTaskIsTaskSuspended.part.0+0x14>
	...

08003a48 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4c:	0095      	lsls	r5, r2, #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a4e:	4680      	mov	r8, r0
 8003a50:	460f      	mov	r7, r1
 8003a52:	4699      	mov	r9, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a54:	4628      	mov	r0, r5
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a58:	f7ff fc58 	bl	800330c <pvPortMalloc>

			if( pxStack != NULL )
 8003a5c:	4682      	mov	sl, r0
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f000 80a0 	beq.w	8003ba4 <xTaskCreate+0x15c>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a64:	2054      	movs	r0, #84	; 0x54
 8003a66:	f7ff fc51 	bl	800330c <pvPortMalloc>

				if( pxNewTCB != NULL )
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	b150      	cbz	r0, 8003a84 <xTaskCreate+0x3c>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a6e:	3d04      	subs	r5, #4
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a70:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 8003a74:	1e7b      	subs	r3, r7, #1
 8003a76:	f100 0233 	add.w	r2, r0, #51	; 0x33
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a7a:	44aa      	add	sl, r5
 8003a7c:	370f      	adds	r7, #15
 8003a7e:	f02a 0a07 	bic.w	sl, sl, #7
 8003a82:	e005      	b.n	8003a90 <xTaskCreate+0x48>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a84:	4650      	mov	r0, sl
 8003a86:	f7ff fcd7 	bl	8003438 <vPortFree>
 8003a8a:	e08b      	b.n	8003ba4 <xTaskCreate+0x15c>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a8c:	429f      	cmp	r7, r3
 8003a8e:	d006      	beq.n	8003a9e <xTaskCreate+0x56>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a90:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003a94:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a98:	7819      	ldrb	r1, [r3, #0]
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d1f6      	bne.n	8003a8c <xTaskCreate+0x44>
 8003a9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aa0:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aa4:	1d27      	adds	r7, r4, #4
 8003aa6:	2d06      	cmp	r5, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aa8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aac:	4638      	mov	r0, r7

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8003aae:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8003ab2:	bf28      	it	cs
 8003ab4:	2506      	movcs	r5, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ab6:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ab8:	6465      	str	r5, [r4, #68]	; 0x44
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aba:	f1c5 0507 	rsb	r5, r5, #7
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003abe:	f7ff fa7a 	bl	8002fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ac2:	f104 0018 	add.w	r0, r4, #24
 8003ac6:	f7ff fa76 	bl	8002fb6 <vListInitialiseItem>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003aca:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ace:	6124      	str	r4, [r4, #16]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ad0:	464a      	mov	r2, r9
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad2:	61a5      	str	r5, [r4, #24]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ad4:	4641      	mov	r1, r8
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ad6:	6264      	str	r4, [r4, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ad8:	4650      	mov	r0, sl
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ada:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ade:	f7ff fad7 	bl	8003090 <pxPortInitialiseStack>
 8003ae2:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ae4:	b106      	cbz	r6, 8003ae8 <xTaskCreate+0xa0>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ae6:	6034      	str	r4, [r6, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ae8:	f7ff fafc 	bl	80030e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <xTaskCreate+0x164>)
		if( pxCurrentTCB == NULL )
 8003aee:	4e30      	ldr	r6, [pc, #192]	; (8003bb0 <xTaskCreate+0x168>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003bdc <xTaskCreate+0x194>
 8003af6:	3201      	adds	r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003afa:	6835      	ldr	r5, [r6, #0]
 8003afc:	bb15      	cbnz	r5, 8003b44 <xTaskCreate+0xfc>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003afe:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d127      	bne.n	8003b56 <xTaskCreate+0x10e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b06:	eb08 0005 	add.w	r0, r8, r5
 8003b0a:	3514      	adds	r5, #20
 8003b0c:	f7ff fa48 	bl	8002fa0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b10:	2d8c      	cmp	r5, #140	; 0x8c
 8003b12:	d1f8      	bne.n	8003b06 <xTaskCreate+0xbe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b14:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003be0 <xTaskCreate+0x198>
	vListInitialise( &xDelayedTaskList2 );
 8003b18:	4d26      	ldr	r5, [pc, #152]	; (8003bb4 <xTaskCreate+0x16c>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b1a:	4648      	mov	r0, r9
 8003b1c:	f7ff fa40 	bl	8002fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7ff fa3d 	bl	8002fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b26:	4824      	ldr	r0, [pc, #144]	; (8003bb8 <xTaskCreate+0x170>)
 8003b28:	f7ff fa3a 	bl	8002fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b2c:	4823      	ldr	r0, [pc, #140]	; (8003bbc <xTaskCreate+0x174>)
 8003b2e:	f7ff fa37 	bl	8002fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b32:	4823      	ldr	r0, [pc, #140]	; (8003bc0 <xTaskCreate+0x178>)
 8003b34:	f7ff fa34 	bl	8002fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b38:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <xTaskCreate+0x17c>)
 8003b3a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b3e:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <xTaskCreate+0x180>)
 8003b40:	601d      	str	r5, [r3, #0]
 8003b42:	e008      	b.n	8003b56 <xTaskCreate+0x10e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <xTaskCreate+0x184>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	b92b      	cbnz	r3, 8003b56 <xTaskCreate+0x10e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b4a:	6833      	ldr	r3, [r6, #0]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d800      	bhi.n	8003b56 <xTaskCreate+0x10e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b54:	6034      	str	r4, [r6, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <xTaskCreate+0x188>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b58:	2501      	movs	r5, #1
 8003b5a:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <xTaskCreate+0x18c>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b64:	680b      	ldr	r3, [r1, #0]
 8003b66:	fa05 f002 	lsl.w	r0, r5, r2
 8003b6a:	4303      	orrs	r3, r0
 8003b6c:	2014      	movs	r0, #20
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	4639      	mov	r1, r7
 8003b72:	fb00 8002 	mla	r0, r0, r2, r8
 8003b76:	f7ff fa21 	bl	8002fbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b7a:	f7ff fad9 	bl	8003130 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <xTaskCreate+0x184>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b163      	cbz	r3, 8003b9e <xTaskCreate+0x156>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d207      	bcs.n	8003b9e <xTaskCreate+0x156>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <xTaskCreate+0x190>)
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8003ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bac:	200043bc 	.word	0x200043bc
 8003bb0:	20004394 	.word	0x20004394
 8003bb4:	200043c0 	.word	0x200043c0
 8003bb8:	200043a4 	.word	0x200043a4
 8003bbc:	2000437c 	.word	0x2000437c
 8003bc0:	200043d8 	.word	0x200043d8
 8003bc4:	200042cc 	.word	0x200042cc
 8003bc8:	200043a0 	.word	0x200043a0
 8003bcc:	200042d0 	.word	0x200042d0
 8003bd0:	200043b8 	.word	0x200043b8
 8003bd4:	200043ec 	.word	0x200043ec
 8003bd8:	e000ed04 	.word	0xe000ed04
 8003bdc:	200042f0 	.word	0x200042f0
 8003be0:	200042d8 	.word	0x200042d8

08003be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003be4:	b513      	push	{r0, r1, r4, lr}
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <vTaskStartScheduler+0x68>)
 8003be8:	2400      	movs	r4, #0
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	4918      	ldr	r1, [pc, #96]	; (8003c50 <vTaskStartScheduler+0x6c>)
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	4623      	mov	r3, r4
 8003bf2:	9400      	str	r4, [sp, #0]
 8003bf4:	4817      	ldr	r0, [pc, #92]	; (8003c54 <vTaskStartScheduler+0x70>)
 8003bf6:	f7ff ff27 	bl	8003a48 <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bfa:	2801      	cmp	r0, #1
 8003bfc:	d116      	bne.n	8003c2c <vTaskStartScheduler+0x48>
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	b672      	cpsid	i
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <vTaskStartScheduler+0x74>)
 8003c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <vTaskStartScheduler+0x78>)
 8003c1c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <vTaskStartScheduler+0x7c>)
 8003c20:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c22:	b002      	add	sp, #8
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c28:	f7ff baf8 	b.w	800321c <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d10a      	bne.n	8003c46 <vTaskStartScheduler+0x62>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	b672      	cpsid	i
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	b662      	cpsie	i
 8003c44:	e7fe      	b.n	8003c44 <vTaskStartScheduler+0x60>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c46:	b002      	add	sp, #8
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200043d4 	.word	0x200043d4
 8003c50:	08009b24 	.word	0x08009b24
 8003c54:	08003f9d 	.word	0x08003f9d
 8003c58:	20004398 	.word	0x20004398
 8003c5c:	200042d0 	.word	0x200042d0
 8003c60:	2000439c 	.word	0x2000439c

08003c64 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c64:	4a02      	ldr	r2, [pc, #8]	; (8003c70 <vTaskSuspendAll+0xc>)
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	200042d4 	.word	0x200042d4

08003c74 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c74:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <xTaskGetTickCount+0x8>)
 8003c76:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000439c 	.word	0x2000439c

08003c80 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c80:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <xTaskIncrementTick+0x108>)
 8003c82:	681b      	ldr	r3, [r3, #0]

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d13d      	bne.n	8003d08 <xTaskIncrementTick+0x88>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <xTaskIncrementTick+0x10c>)
 8003c8e:	681c      	ldr	r4, [r3, #0]
 8003c90:	3401      	adds	r4, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c92:	601c      	str	r4, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8003c94:	b9cc      	cbnz	r4, 8003cca <xTaskIncrementTick+0x4a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c96:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <xTaskIncrementTick+0x110>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	b152      	cbz	r2, 8003cb4 <xTaskIncrementTick+0x34>
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	b672      	cpsid	i
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	b662      	cpsie	i
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskIncrementTick+0x32>
 8003cb4:	4a37      	ldr	r2, [pc, #220]	; (8003d94 <xTaskIncrementTick+0x114>)
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	6810      	ldr	r0, [r2, #0]
 8003cba:	6018      	str	r0, [r3, #0]
 8003cbc:	6011      	str	r1, [r2, #0]
 8003cbe:	4a36      	ldr	r2, [pc, #216]	; (8003d98 <xTaskIncrementTick+0x118>)
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	f7ff fe59 	bl	800397c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cca:	4d34      	ldr	r5, [pc, #208]	; (8003d9c <xTaskIncrementTick+0x11c>)
 8003ccc:	f04f 0b00 	mov.w	fp, #0
 8003cd0:	4e33      	ldr	r6, [pc, #204]	; (8003da0 <xTaskIncrementTick+0x120>)
 8003cd2:	682b      	ldr	r3, [r5, #0]
 8003cd4:	9501      	str	r5, [sp, #4]
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	4f32      	ldr	r7, [pc, #200]	; (8003da4 <xTaskIncrementTick+0x124>)
 8003cda:	d30b      	bcc.n	8003cf4 <xTaskIncrementTick+0x74>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8003d90 <xTaskIncrementTick+0x110>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ce0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003db0 <xTaskIncrementTick+0x130>
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	f8d8 2000 	ldr.w	r2, [r8]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	b9a2      	cbnz	r2, 8003d16 <xTaskIncrementTick+0x96>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	9b01      	ldr	r3, [sp, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cf8:	2214      	movs	r2, #20
 8003cfa:	434a      	muls	r2, r1
 8003cfc:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8003cfe:	2a02      	cmp	r2, #2
 8003d00:	bf28      	it	cs
 8003d02:	f04f 0b01 	movcs.w	fp, #1
 8003d06:	e034      	b.n	8003d72 <xTaskIncrementTick+0xf2>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d08:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <xTaskIncrementTick+0x128>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d0a:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d0e:	6813      	ldr	r3, [r2, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e02d      	b.n	8003d72 <xTaskIncrementTick+0xf2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d16:	f8d8 2000 	ldr.w	r2, [r8]
 8003d1a:	68d2      	ldr	r2, [r2, #12]
 8003d1c:	68d5      	ldr	r5, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d1e:	6869      	ldr	r1, [r5, #4]

					if( xConstTickCount < xItemValue )
 8003d20:	428c      	cmp	r4, r1
 8003d22:	d202      	bcs.n	8003d2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d24:	9b01      	ldr	r3, [sp, #4]
 8003d26:	6019      	str	r1, [r3, #0]
						break;
 8003d28:	e7e4      	b.n	8003cf4 <xTaskIncrementTick+0x74>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d2a:	f105 0a04 	add.w	sl, r5, #4
 8003d2e:	4650      	mov	r0, sl
 8003d30:	f7ff f968 	bl	8003004 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d34:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003d36:	b119      	cbz	r1, 8003d40 <xTaskIncrementTick+0xc0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d38:	f105 0018 	add.w	r0, r5, #24
 8003d3c:	f7ff f962 	bl	8003004 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d40:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003d42:	2301      	movs	r3, #1
 8003d44:	f8d9 1000 	ldr.w	r1, [r9]
 8003d48:	fa03 fe00 	lsl.w	lr, r3, r0
 8003d4c:	ea4e 0101 	orr.w	r1, lr, r1
 8003d50:	f04f 0e14 	mov.w	lr, #20
 8003d54:	f8c9 1000 	str.w	r1, [r9]
 8003d58:	4651      	mov	r1, sl
 8003d5a:	fb0e 6000 	mla	r0, lr, r0, r6
 8003d5e:	f7ff f92d 	bl	8002fbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d62:	6838      	ldr	r0, [r7, #0]
 8003d64:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003d66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8003d68:	4291      	cmp	r1, r2
 8003d6a:	bf28      	it	cs
 8003d6c:	f04f 0b01 	movcs.w	fp, #1
 8003d70:	e7b8      	b.n	8003ce4 <xTaskIncrementTick+0x64>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d72:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <xTaskIncrementTick+0x12c>)
 8003d74:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	bf18      	it	ne
 8003d7a:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8003d7e:	4658      	mov	r0, fp
 8003d80:	b003      	add	sp, #12
 8003d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	200042d4 	.word	0x200042d4
 8003d8c:	2000439c 	.word	0x2000439c
 8003d90:	200042cc 	.word	0x200042cc
 8003d94:	200043a0 	.word	0x200043a0
 8003d98:	200042c8 	.word	0x200042c8
 8003d9c:	20004398 	.word	0x20004398
 8003da0:	200042f0 	.word	0x200042f0
 8003da4:	20004394 	.word	0x20004394
 8003da8:	200042ec 	.word	0x200042ec
 8003dac:	200043f0 	.word	0x200043f0
 8003db0:	200043ec 	.word	0x200043ec

08003db4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003db8:	4c32      	ldr	r4, [pc, #200]	; (8003e84 <xTaskResumeAll+0xd0>)
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	b953      	cbnz	r3, 8003dd4 <xTaskResumeAll+0x20>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	b672      	cpsid	i
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	b662      	cpsie	i
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dd4:	f7ff f986 	bl	80030e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dde:	6824      	ldr	r4, [r4, #0]
 8003de0:	b10c      	cbz	r4, 8003de6 <xTaskResumeAll+0x32>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 8003de2:	2400      	movs	r4, #0
 8003de4:	e049      	b.n	8003e7a <xTaskResumeAll+0xc6>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <xTaskResumeAll+0xd4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f9      	beq.n	8003de2 <xTaskResumeAll+0x2e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003ea0 <xTaskResumeAll+0xec>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003df2:	4f26      	ldr	r7, [pc, #152]	; (8003e8c <xTaskResumeAll+0xd8>)
 8003df4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003ea4 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003df8:	f8d9 3000 	ldr.w	r3, [r9]
 8003dfc:	b303      	cbz	r3, 8003e40 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dfe:	f8d9 300c 	ldr.w	r3, [r9, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8003e02:	2501      	movs	r5, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e06:	1d26      	adds	r6, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e08:	f104 0018 	add.w	r0, r4, #24
 8003e0c:	f7ff f8fa 	bl	8003004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7ff f8f7 	bl	8003004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2014      	movs	r0, #20
 8003e1c:	fa05 f102 	lsl.w	r1, r5, r2
 8003e20:	fb00 8002 	mla	r0, r0, r2, r8
 8003e24:	430b      	orrs	r3, r1
 8003e26:	4631      	mov	r1, r6
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	f7ff f8c7 	bl	8002fbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <xTaskResumeAll+0xdc>)
 8003e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3de      	bcc.n	8003df8 <xTaskResumeAll+0x44>
					{
						xYieldPending = pdTRUE;
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <xTaskResumeAll+0xe0>)
 8003e3c:	601d      	str	r5, [r3, #0]
 8003e3e:	e7db      	b.n	8003df8 <xTaskResumeAll+0x44>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e40:	b10c      	cbz	r4, 8003e46 <xTaskResumeAll+0x92>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e42:	f7ff fd9b 	bl	800397c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <xTaskResumeAll+0xe4>)
 8003e48:	681c      	ldr	r4, [r3, #0]
 8003e4a:	461d      	mov	r5, r3

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e4c:	b144      	cbz	r4, 8003e60 <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 8003e4e:	4e11      	ldr	r6, [pc, #68]	; (8003e94 <xTaskResumeAll+0xe0>)
 8003e50:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f7ff ff15 	bl	8003c80 <xTaskIncrementTick>
 8003e56:	b100      	cbz	r0, 8003e5a <xTaskResumeAll+0xa6>
							{
								xYieldPending = pdTRUE;
 8003e58:	6037      	str	r7, [r6, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e5a:	3c01      	subs	r4, #1
 8003e5c:	d1f9      	bne.n	8003e52 <xTaskResumeAll+0x9e>

						uxPendedTicks = 0;
 8003e5e:	602c      	str	r4, [r5, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <xTaskResumeAll+0xe0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0bc      	beq.n	8003de2 <xTaskResumeAll+0x2e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <xTaskResumeAll+0xe8>)
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e78:	2401      	movs	r4, #1
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e7a:	f7ff f959 	bl	8003130 <vPortExitCritical>

	return xAlreadyYielded;
}
 8003e7e:	4620      	mov	r0, r4
 8003e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e84:	200042d4 	.word	0x200042d4
 8003e88:	200043bc 	.word	0x200043bc
 8003e8c:	200043ec 	.word	0x200043ec
 8003e90:	20004394 	.word	0x20004394
 8003e94:	200043f0 	.word	0x200043f0
 8003e98:	200042ec 	.word	0x200042ec
 8003e9c:	e000ed04 	.word	0xe000ed04
 8003ea0:	200043a4 	.word	0x200043a4
 8003ea4:	200042f0 	.word	0x200042f0

08003ea8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003ea8:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
 8003eaa:	b950      	cbnz	r0, 8003ec2 <vTaskDelayUntil+0x1a>
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	b672      	cpsid	i
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	b662      	cpsie	i
 8003ec0:	e7fe      	b.n	8003ec0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003ec2:	b951      	cbnz	r1, 8003eda <vTaskDelayUntil+0x32>
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	b672      	cpsid	i
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	b662      	cpsie	i
 8003ed8:	e7fe      	b.n	8003ed8 <vTaskDelayUntil+0x30>
		configASSERT( uxSchedulerSuspended == 0 );
 8003eda:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <vTaskDelayUntil+0x9c>)
 8003edc:	681c      	ldr	r4, [r3, #0]
 8003ede:	b154      	cbz	r4, 8003ef6 <vTaskDelayUntil+0x4e>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	b672      	cpsid	i
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	b662      	cpsie	i
 8003ef4:	e7fe      	b.n	8003ef4 <vTaskDelayUntil+0x4c>

		vTaskSuspendAll();
 8003ef6:	f7ff feb5 	bl	8003c64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <vTaskDelayUntil+0xa0>)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003efc:	6802      	ldr	r2, [r0, #0]

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003efe:	681d      	ldr	r5, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003f00:	188b      	adds	r3, r1, r2

			if( xConstTickCount < *pxPreviousWakeTime )
 8003f02:	4295      	cmp	r5, r2
 8003f04:	d202      	bcs.n	8003f0c <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d907      	bls.n	8003f1a <vTaskDelayUntil+0x72>
 8003f0a:	e001      	b.n	8003f10 <vTaskDelayUntil+0x68>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d806      	bhi.n	8003f1e <vTaskDelayUntil+0x76>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003f10:	429d      	cmp	r5, r3
 8003f12:	bf2c      	ite	cs
 8003f14:	2200      	movcs	r2, #0
 8003f16:	2201      	movcc	r2, #1
 8003f18:	e002      	b.n	8003f20 <vTaskDelayUntil+0x78>
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	e000      	b.n	8003f20 <vTaskDelayUntil+0x78>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
 8003f1e:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003f20:	6003      	str	r3, [r0, #0]

			if( xShouldDelay != pdFALSE )
 8003f22:	b11a      	cbz	r2, 8003f2c <vTaskDelayUntil+0x84>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003f24:	2100      	movs	r1, #0
 8003f26:	1b58      	subs	r0, r3, r5
 8003f28:	f7ff fd3a 	bl	80039a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003f2c:	f7ff ff42 	bl	8003db4 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f30:	b938      	cbnz	r0, 8003f42 <vTaskDelayUntil+0x9a>
		{
			portYIELD_WITHIN_API();
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <vTaskDelayUntil+0xa4>)
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	bd38      	pop	{r3, r4, r5, pc}
 8003f44:	200042d4 	.word	0x200042d4
 8003f48:	2000439c 	.word	0x2000439c
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f50:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f52:	b940      	cbnz	r0, 8003f66 <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <vTaskDelay+0x44>)
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	bd08      	pop	{r3, pc}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f66:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <vTaskDelay+0x48>)
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	b151      	cbz	r1, 8003f82 <vTaskDelay+0x32>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	b672      	cpsid	i
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	b662      	cpsie	i
 8003f80:	e7fe      	b.n	8003f80 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003f82:	f7ff fe6f 	bl	8003c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f86:	f7ff fd0b 	bl	80039a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f8a:	f7ff ff13 	bl	8003db4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0e0      	beq.n	8003f54 <vTaskDelay+0x4>
 8003f92:	bd08      	pop	{r3, pc}
 8003f94:	e000ed04 	.word	0xe000ed04
 8003f98:	200042d4 	.word	0x200042d4

08003f9c <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f9c:	4d18      	ldr	r5, [pc, #96]	; (8004000 <prvIdleTask+0x64>)
 8003f9e:	462e      	mov	r6, r5
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fa0:	b580      	push	{r7, lr}
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003fa2:	4f18      	ldr	r7, [pc, #96]	; (8004004 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b1f3      	cbz	r3, 8003fe6 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8003fa8:	f7ff fe5c 	bl	8003c64 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003fac:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8003fae:	f7ff ff01 	bl	8003db4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003fb2:	2c00      	cmp	r4, #0
 8003fb4:	d0f6      	beq.n	8003fa4 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003fb6:	f7ff f895 	bl	80030e4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <prvIdleTask+0x68>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc0:	1d20      	adds	r0, r4, #4
 8003fc2:	f7ff f81f 	bl	8003004 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <prvIdleTask+0x6c>)
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003fce:	6833      	ldr	r3, [r6, #0]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8003fd4:	f7ff f8ac 	bl	8003130 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003fd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003fda:	f7ff fa2d 	bl	8003438 <vPortFree>
			vPortFree( pxTCB );
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff fa2a 	bl	8003438 <vPortFree>
 8003fe4:	e7de      	b.n	8003fa4 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <prvIdleTask+0x70>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d9d9      	bls.n	8003fa2 <prvIdleTask+0x6>
			{
				taskYIELD();
 8003fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <prvIdleTask+0x74>)
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	e7d0      	b.n	8003fa2 <prvIdleTask+0x6>
 8004000:	20004390 	.word	0x20004390
 8004004:	2000437c 	.word	0x2000437c
 8004008:	200043bc 	.word	0x200043bc
 800400c:	200042f0 	.word	0x200042f0
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <vTaskSwitchContext+0x64>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800401a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800401c:	b10a      	cbz	r2, 8004022 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800401e:	2201      	movs	r2, #1
 8004020:	e027      	b.n	8004072 <vTaskSwitchContext+0x5e>
	}
	else
	{
		xYieldPending = pdFALSE;
 8004022:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <vTaskSwitchContext+0x6c>)
 8004026:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2214      	movs	r2, #20
 8004030:	4914      	ldr	r1, [pc, #80]	; (8004084 <vTaskSwitchContext+0x70>)
 8004032:	f1c3 031f 	rsb	r3, r3, #31
 8004036:	435a      	muls	r2, r3
 8004038:	588c      	ldr	r4, [r1, r2]
 800403a:	1888      	adds	r0, r1, r2
 800403c:	b954      	cbnz	r4, 8004054 <vTaskSwitchContext+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	b672      	cpsid	i
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	b662      	cpsie	i
 8004052:	e7fe      	b.n	8004052 <vTaskSwitchContext+0x3e>
 8004054:	6844      	ldr	r4, [r0, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	6864      	ldr	r4, [r4, #4]
 800405a:	440a      	add	r2, r1
 800405c:	4294      	cmp	r4, r2
 800405e:	6044      	str	r4, [r0, #4]
 8004060:	bf04      	itt	eq
 8004062:	6862      	ldreq	r2, [r4, #4]
 8004064:	6042      	streq	r2, [r0, #4]
 8004066:	2214      	movs	r2, #20
 8004068:	fb02 1303 	mla	r3, r2, r3, r1
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <vTaskSwitchContext+0x74>)
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	bd10      	pop	{r4, pc}
 8004076:	bf00      	nop
 8004078:	200042d4 	.word	0x200042d4
 800407c:	200043f0 	.word	0x200043f0
 8004080:	200043ec 	.word	0x200043ec
 8004084:	200042f0 	.word	0x200042f0
 8004088:	20004394 	.word	0x20004394

0800408c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800408c:	b510      	push	{r4, lr}
 800408e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004090:	b950      	cbnz	r0, 80040a8 <vTaskPlaceOnEventList+0x1c>
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	b672      	cpsid	i
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	b662      	cpsie	i
 80040a6:	e7fe      	b.n	80040a6 <vTaskPlaceOnEventList+0x1a>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <vTaskPlaceOnEventList+0x34>)
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	3118      	adds	r1, #24
 80040ae:	f7fe ff91 	bl	8002fd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040b2:	4620      	mov	r0, r4
 80040b4:	2101      	movs	r1, #1
}
 80040b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040ba:	f7ff bc71 	b.w	80039a0 <prvAddCurrentTaskToDelayedList>
 80040be:	bf00      	nop
 80040c0:	20004394 	.word	0x20004394

080040c4 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040c4:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040c6:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80040ca:	b954      	cbnz	r4, 80040e2 <xTaskRemoveFromEventList+0x1e>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	b672      	cpsid	i
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	b662      	cpsie	i
 80040e0:	e7fe      	b.n	80040e0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040e2:	f104 0518 	add.w	r5, r4, #24
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fe ff8c 	bl	8003004 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <xTaskRemoveFromEventList+0x70>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b983      	cbnz	r3, 8004114 <xTaskRemoveFromEventList+0x50>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040f2:	1d26      	adds	r6, r4, #4
 80040f4:	4630      	mov	r0, r6
 80040f6:	f7fe ff85 	bl	8003004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040fa:	490f      	ldr	r1, [pc, #60]	; (8004138 <xTaskRemoveFromEventList+0x74>)
 80040fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80040fe:	2301      	movs	r3, #1
 8004100:	680a      	ldr	r2, [r1, #0]
 8004102:	2014      	movs	r0, #20
 8004104:	40ab      	lsls	r3, r5
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	4631      	mov	r1, r6
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <xTaskRemoveFromEventList+0x78>)
 800410e:	fb00 3005 	mla	r0, r0, r5, r3
 8004112:	e001      	b.n	8004118 <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004114:	4629      	mov	r1, r5
 8004116:	480a      	ldr	r0, [pc, #40]	; (8004140 <xTaskRemoveFromEventList+0x7c>)
 8004118:	f7fe ff50 	bl	8002fbc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <xTaskRemoveFromEventList+0x80>)
 800411e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	429a      	cmp	r2, r3
 8004126:	d903      	bls.n	8004130 <xTaskRemoveFromEventList+0x6c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004128:	2001      	movs	r0, #1
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <xTaskRemoveFromEventList+0x84>)
 800412c:	6018      	str	r0, [r3, #0]
 800412e:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8004130:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	200042d4 	.word	0x200042d4
 8004138:	200043ec 	.word	0x200043ec
 800413c:	200042f0 	.word	0x200042f0
 8004140:	200043a4 	.word	0x200043a4
 8004144:	20004394 	.word	0x20004394
 8004148:	200043f0 	.word	0x200043f0

0800414c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800414c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800414e:	b908      	cbnz	r0, 8004154 <vTaskSetTimeOutState+0x8>
 8004150:	f7ff fc6e 	bl	8003a30 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <vTaskSetTimeOutState+0x18>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <vTaskSetTimeOutState+0x1c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6043      	str	r3, [r0, #4]
 8004160:	bd08      	pop	{r3, pc}
 8004162:	bf00      	nop
 8004164:	200042c8 	.word	0x200042c8
 8004168:	2000439c 	.word	0x2000439c

0800416c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004170:	4604      	mov	r4, r0
 8004172:	b950      	cbnz	r0, 800418a <xTaskCheckForTimeOut+0x1e>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	b672      	cpsid	i
 800417a:	f383 8811 	msr	BASEPRI, r3
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	b662      	cpsie	i
 8004188:	e7fe      	b.n	8004188 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800418a:	b951      	cbnz	r1, 80041a2 <xTaskCheckForTimeOut+0x36>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	b672      	cpsid	i
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	b662      	cpsie	i
 80041a0:	e7fe      	b.n	80041a0 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
 80041a2:	f7fe ff9f 	bl	80030e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <xTaskCheckForTimeOut+0x74>)
 80041a8:	6819      	ldr	r1, [r3, #0]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	d010      	beq.n	80041d2 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <xTaskCheckForTimeOut+0x78>)
 80041b2:	6820      	ldr	r0, [r4, #0]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4290      	cmp	r0, r2
 80041b8:	6862      	ldr	r2, [r4, #4]
 80041ba:	d001      	beq.n	80041c0 <xTaskCheckForTimeOut+0x54>
 80041bc:	4291      	cmp	r1, r2
 80041be:	d20a      	bcs.n	80041d6 <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041c0:	1a88      	subs	r0, r1, r2
 80041c2:	4283      	cmp	r3, r0
 80041c4:	d907      	bls.n	80041d6 <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80041c6:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
 80041c8:	4620      	mov	r0, r4
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80041ca:	4413      	add	r3, r2
 80041cc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80041ce:	f7ff ffbd 	bl	800414c <vTaskSetTimeOutState>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041d2:	2400      	movs	r4, #0
 80041d4:	e000      	b.n	80041d8 <xTaskCheckForTimeOut+0x6c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041d6:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80041d8:	f7fe ffaa 	bl	8003130 <vPortExitCritical>

	return xReturn;
}
 80041dc:	4620      	mov	r0, r4
 80041de:	bd38      	pop	{r3, r4, r5, pc}
 80041e0:	2000439c 	.word	0x2000439c
 80041e4:	200042c8 	.word	0x200042c8

080041e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80041e8:	2201      	movs	r2, #1
 80041ea:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <vTaskMissedYield+0x8>)
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	4770      	bx	lr
 80041f0:	200043f0 	.word	0x200043f0

080041f4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041f4:	4b05      	ldr	r3, [pc, #20]	; (800420c <xTaskGetSchedulerState+0x18>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b133      	cbz	r3, 8004208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <xTaskGetSchedulerState+0x1c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004200:	bf0c      	ite	eq
 8004202:	2002      	moveq	r0, #2
 8004204:	2000      	movne	r0, #0
 8004206:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004208:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800420a:	4770      	bx	lr
 800420c:	200042d0 	.word	0x200042d0
 8004210:	200042d4 	.word	0x200042d4

08004214 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8004218:	4604      	mov	r4, r0
 800421a:	2800      	cmp	r0, #0
 800421c:	d038      	beq.n	8004290 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800421e:	4d1d      	ldr	r5, [pc, #116]	; (8004294 <vTaskPriorityInherit+0x80>)
 8004220:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004222:	682a      	ldr	r2, [r5, #0]
 8004224:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004226:	4293      	cmp	r3, r2
 8004228:	d232      	bcs.n	8004290 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800422a:	6982      	ldr	r2, [r0, #24]
 800422c:	2a00      	cmp	r2, #0
 800422e:	db04      	blt.n	800423a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004230:	682a      	ldr	r2, [r5, #0]
 8004232:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004234:	f1c2 0207 	rsb	r2, r2, #7
 8004238:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800423a:	4e17      	ldr	r6, [pc, #92]	; (8004298 <vTaskPriorityInherit+0x84>)
 800423c:	2714      	movs	r7, #20
 800423e:	6962      	ldr	r2, [r4, #20]
 8004240:	fb07 6303 	mla	r3, r7, r3, r6
 8004244:	429a      	cmp	r2, r3
 8004246:	d120      	bne.n	800428a <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004248:	f104 0804 	add.w	r8, r4, #4
 800424c:	4640      	mov	r0, r8
 800424e:	f7fe fed9 	bl	8003004 <uxListRemove>
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <vTaskPriorityInherit+0x88>)
 8004254:	b948      	cbnz	r0, 800426a <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004256:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004258:	4347      	muls	r7, r0
 800425a:	59f2      	ldr	r2, [r6, r7]
 800425c:	b92a      	cbnz	r2, 800426a <vTaskPriorityInherit+0x56>
 800425e:	2201      	movs	r2, #1
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	4082      	lsls	r2, r0
 8004264:	ea21 0202 	bic.w	r2, r1, r2
 8004268:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800426a:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800426c:	2001      	movs	r0, #1
 800426e:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004270:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004272:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004274:	4090      	lsls	r0, r2
 8004276:	681c      	ldr	r4, [r3, #0]
 8004278:	4320      	orrs	r0, r4
 800427a:	6018      	str	r0, [r3, #0]
 800427c:	2014      	movs	r0, #20
 800427e:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8004286:	f7fe be99 	b.w	8002fbc <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004294:	20004394 	.word	0x20004394
 8004298:	200042f0 	.word	0x200042f0
 800429c:	200043ec 	.word	0x200043ec

080042a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80042a2:	4604      	mov	r4, r0
 80042a4:	b908      	cbnz	r0, 80042aa <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80042a6:	2000      	movs	r0, #0
 80042a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <xTaskPriorityDisinherit+0x9c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4298      	cmp	r0, r3
 80042b0:	d00a      	beq.n	80042c8 <xTaskPriorityDisinherit+0x28>
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	b672      	cpsid	i
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	b662      	cpsie	i
 80042c6:	e7fe      	b.n	80042c6 <xTaskPriorityDisinherit+0x26>

			configASSERT( pxTCB->uxMutexesHeld );
 80042c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80042ca:	b953      	cbnz	r3, 80042e2 <xTaskPriorityDisinherit+0x42>
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	b672      	cpsid	i
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	b662      	cpsie	i
 80042e0:	e7fe      	b.n	80042e0 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80042e4:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80042e8:	6483      	str	r3, [r0, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ea:	4291      	cmp	r1, r2
 80042ec:	d0db      	beq.n	80042a6 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1d9      	bne.n	80042a6 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f2:	1d05      	adds	r5, r0, #4
 80042f4:	4e12      	ldr	r6, [pc, #72]	; (8004340 <xTaskPriorityDisinherit+0xa0>)
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7fe fe84 	bl	8003004 <uxListRemove>
 80042fc:	4a11      	ldr	r2, [pc, #68]	; (8004344 <xTaskPriorityDisinherit+0xa4>)
 80042fe:	b950      	cbnz	r0, 8004316 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004300:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004302:	2114      	movs	r1, #20
 8004304:	4379      	muls	r1, r7
 8004306:	5873      	ldr	r3, [r6, r1]
 8004308:	b92b      	cbnz	r3, 8004316 <xTaskPriorityDisinherit+0x76>
 800430a:	2301      	movs	r3, #1
 800430c:	6810      	ldr	r0, [r2, #0]
 800430e:	40bb      	lsls	r3, r7
 8004310:	ea20 0303 	bic.w	r3, r0, r3
 8004314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004316:	6c63      	ldr	r3, [r4, #68]	; 0x44

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 8004318:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	f1c3 0107 	rsb	r1, r3, #7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800431e:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004320:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004322:	2401      	movs	r4, #1
 8004324:	fa04 f103 	lsl.w	r1, r4, r3
 8004328:	4308      	orrs	r0, r1
 800432a:	4629      	mov	r1, r5
 800432c:	6010      	str	r0, [r2, #0]
 800432e:	2014      	movs	r0, #20
 8004330:	fb00 6003 	mla	r0, r0, r3, r6
 8004334:	f7fe fe42 	bl	8002fbc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004338:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800433c:	20004394 	.word	0x20004394
 8004340:	200042f0 	.word	0x200042f0
 8004344:	200043ec 	.word	0x200043ec

08004348 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <pvTaskIncrementMutexHeldCount+0x14>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	b11a      	cbz	r2, 8004356 <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004352:	3201      	adds	r2, #1
 8004354:	648a      	str	r2, [r1, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004356:	6818      	ldr	r0, [r3, #0]
	}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20004394 	.word	0x20004394

08004360 <Menu1Touch>:
	Draw_button_struct(&bt_setting_save);

}

void Menu1Touch(void){
	CurrentPage=1;
 8004360:	2201      	movs	r2, #1
 8004362:	4b01      	ldr	r3, [pc, #4]	; (8004368 <Menu1Touch+0x8>)
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	4770      	bx	lr
 8004368:	20000004 	.word	0x20000004

0800436c <Menu2Touch>:
}
void Menu2Touch(void){
	CurrentPage=2;
 800436c:	2202      	movs	r2, #2
 800436e:	4b01      	ldr	r3, [pc, #4]	; (8004374 <Menu2Touch+0x8>)
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	4770      	bx	lr
 8004374:	20000004 	.word	0x20000004

08004378 <Menu5Touch>:
}
void Menu4Touch(void){
	CurrentPage=4;
}
void Menu5Touch(void){
	CurrentPage=5;
 8004378:	2205      	movs	r2, #5
 800437a:	4b01      	ldr	r3, [pc, #4]	; (8004380 <Menu5Touch+0x8>)
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4770      	bx	lr
 8004380:	20000004 	.word	0x20000004

08004384 <bt_pwm_plus_touch>:
}

void bt_pwm_plus_touch(void){
	//PWM++
	if(G_pwm_pct_value<100){
 8004384:	4a03      	ldr	r2, [pc, #12]	; (8004394 <bt_pwm_plus_touch+0x10>)
 8004386:	8813      	ldrh	r3, [r2, #0]
 8004388:	2b63      	cmp	r3, #99	; 0x63
		G_pwm_pct_value+=1;
 800438a:	bf9c      	itt	ls
 800438c:	3301      	addls	r3, #1
 800438e:	8013      	strhls	r3, [r2, #0]
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20004402 	.word	0x20004402

08004398 <bt_pwm_minus_touch>:
	}
}
void bt_pwm_minus_touch(void){
	//PWM--
	if(G_pwm_pct_value>0){
 8004398:	4a02      	ldr	r2, [pc, #8]	; (80043a4 <bt_pwm_minus_touch+0xc>)
 800439a:	8813      	ldrh	r3, [r2, #0]
 800439c:	b10b      	cbz	r3, 80043a2 <bt_pwm_minus_touch+0xa>
		G_pwm_pct_value-=1;
 800439e:	3b01      	subs	r3, #1
 80043a0:	8013      	strh	r3, [r2, #0]
 80043a2:	4770      	bx	lr
 80043a4:	20004402 	.word	0x20004402

080043a8 <bt_pwm_set_100_touch>:
		strcpy(bt_pwm_on.text,"OFF");
	}
}

void bt_pwm_set_100_touch(void){
	G_pwm_pct_value=100;
 80043a8:	2264      	movs	r2, #100	; 0x64
 80043aa:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <bt_pwm_set_100_touch+0x8>)
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	4770      	bx	lr
 80043b0:	20004402 	.word	0x20004402

080043b4 <bt_pwm_set_75_touch>:
}
void bt_pwm_set_75_touch(void){
	G_pwm_pct_value=75;
 80043b4:	224b      	movs	r2, #75	; 0x4b
 80043b6:	4b01      	ldr	r3, [pc, #4]	; (80043bc <bt_pwm_set_75_touch+0x8>)
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	4770      	bx	lr
 80043bc:	20004402 	.word	0x20004402

080043c0 <bt_pwm_set_50_touch>:
}
void bt_pwm_set_50_touch(void){
	G_pwm_pct_value=50;
 80043c0:	2232      	movs	r2, #50	; 0x32
 80043c2:	4b01      	ldr	r3, [pc, #4]	; (80043c8 <bt_pwm_set_50_touch+0x8>)
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	4770      	bx	lr
 80043c8:	20004402 	.word	0x20004402

080043cc <bt_pwm_set_25_touch>:
}
void bt_pwm_set_25_touch(void){
	G_pwm_pct_value=25;
 80043cc:	2219      	movs	r2, #25
 80043ce:	4b01      	ldr	r3, [pc, #4]	; (80043d4 <bt_pwm_set_25_touch+0x8>)
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	4770      	bx	lr
 80043d4:	20004402 	.word	0x20004402

080043d8 <bt_pwm_set_0_touch>:
}
void bt_pwm_set_0_touch(void){
	G_pwm_pct_value=0;
 80043d8:	2200      	movs	r2, #0
 80043da:	4b01      	ldr	r3, [pc, #4]	; (80043e0 <bt_pwm_set_0_touch+0x8>)
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	4770      	bx	lr
 80043e0:	20004402 	.word	0x20004402

080043e4 <bt_setting_save_touch>:
}

void bt_setting_save_touch(void){
 80043e4:	4770      	bx	lr
	...

080043e8 <bt_pwm_on_touch>:
}

void bt_pwm_on_touch(void){
	//PWM TOOGLE

	if(G_pwm_output_status==0){
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <bt_pwm_on_touch+0x1c>)
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	b91a      	cbnz	r2, 80043f6 <bt_pwm_on_touch+0xe>
		G_pwm_output_status=1;
 80043ee:	2201      	movs	r2, #1
		strcpy(bt_pwm_on.text,"ON");
 80043f0:	4905      	ldr	r1, [pc, #20]	; (8004408 <bt_pwm_on_touch+0x20>)

void bt_pwm_on_touch(void){
	//PWM TOOGLE

	if(G_pwm_output_status==0){
		G_pwm_output_status=1;
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e002      	b.n	80043fc <bt_pwm_on_touch+0x14>
		strcpy(bt_pwm_on.text,"ON");
	}else{
		G_pwm_output_status=0;
 80043f6:	2200      	movs	r2, #0
		strcpy(bt_pwm_on.text,"OFF");
 80043f8:	4904      	ldr	r1, [pc, #16]	; (800440c <bt_pwm_on_touch+0x24>)

	if(G_pwm_output_status==0){
		G_pwm_output_status=1;
		strcpy(bt_pwm_on.text,"ON");
	}else{
		G_pwm_output_status=0;
 80043fa:	801a      	strh	r2, [r3, #0]
		strcpy(bt_pwm_on.text,"OFF");
 80043fc:	4804      	ldr	r0, [pc, #16]	; (8004410 <bt_pwm_on_touch+0x28>)
 80043fe:	f002 beff 	b.w	8007200 <strcpy>
 8004402:	bf00      	nop
 8004404:	2000440c 	.word	0x2000440c
 8004408:	08009b29 	.word	0x08009b29
 800440c:	08009b2c 	.word	0x08009b2c
 8004410:	200045bc 	.word	0x200045bc

08004414 <InitGui>:
	  //TM_LCD_ChangeLayers();
	  TM_LCD_SetLayer2Opacity(0);
	  TM_LCD_SetLayer1Opacity(255);
}

void InitGui(void) {
 8004414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int x;
	int i=0;

 //HAL_NVIC_DisableIRQ(

	Driver.Init=(&TM_TOUCH_FT5336_Init);
 8004418:	4b95      	ldr	r3, [pc, #596]	; (8004670 <InitGui+0x25c>)
	  //TM_LCD_ChangeLayers();
	  TM_LCD_SetLayer2Opacity(0);
	  TM_LCD_SetLayer1Opacity(255);
}

void InitGui(void) {
 800441a:	b08a      	sub	sp, #40	; 0x28
	int x;
	int i=0;

 //HAL_NVIC_DisableIRQ(

	Driver.Init=(&TM_TOUCH_FT5336_Init);
 800441c:	4c95      	ldr	r4, [pc, #596]	; (8004674 <InitGui+0x260>)
	  TM_TOUCH_Init(&Driver, &TS);
	  	  //GUI_TOUCH_Exec()
	  /* Create the 5 Buttons Menu */
	  x=distance;
	  y=distance;
	  GUI_BUTTON_INIT(&bt_menu1,x,y,rect_width,rect_height,"Temp Graph",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu1Touch,NULL);
 800441e:	2500      	movs	r5, #0



	  //GUI_SetFont(&GUI_Font20_1);

	  TM_TOUCH_Init(&Driver, &TS);
 8004420:	4e95      	ldr	r6, [pc, #596]	; (8004678 <InitGui+0x264>)
	  	  //GUI_TOUCH_Exec()
	  /* Create the 5 Buttons Menu */
	  x=distance;
	  y=distance;
	  GUI_BUTTON_INIT(&bt_menu1,x,y,rect_width,rect_height,"Temp Graph",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu1Touch,NULL);
 8004422:	2734      	movs	r7, #52	; 0x34
	int x;
	int i=0;

 //HAL_NVIC_DisableIRQ(

	Driver.Init=(&TM_TOUCH_FT5336_Init);
 8004424:	6023      	str	r3, [r4, #0]
	Driver.Read=(&TM_TOUCH_FT5336_Read);
 8004426:	4b95      	ldr	r3, [pc, #596]	; (800467c <InitGui+0x268>)
	  /* Buttons on Page 1 */

	  /* Buttons on Page 2 */
	  x=150;
	  y=100;
	  GUI_BUTTON_INIT(&bt_pwm_pct,x,y,95,50,"NULL",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,NULL,NULL);
 8004428:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8004724 <InitGui+0x310>
	int i=0;

 //HAL_NVIC_DisableIRQ(

	Driver.Init=(&TM_TOUCH_FT5336_Init);
	Driver.Read=(&TM_TOUCH_FT5336_Read);
 800442c:	6063      	str	r3, [r4, #4]

    TM_LCD_Init();
 800442e:	f002 f90f 	bl	8006650 <TM_LCD_Init>

    /* Fill LCD with color */
    TM_LCD_Fill(LCD_COLOR_BLACK);
 8004432:	2000      	movs	r0, #0
 8004434:	f002 f830 	bl	8006498 <TM_LCD_Fill>

    /* Put string on the middle of LCD */
    TM_LCD_SetFont(&TM_Font_7x10);
 8004438:	4891      	ldr	r0, [pc, #580]	; (8004680 <InitGui+0x26c>)
 800443a:	f002 f86d 	bl	8006518 <TM_LCD_SetFont>

    TM_LCD_SetOrientation(1);
 800443e:	2001      	movs	r0, #1
 8004440:	f002 f830 	bl	80064a4 <TM_LCD_SetOrientation>

    /* Put string to LCD */
    TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 8004444:	2100      	movs	r1, #0
 8004446:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800444a:	f002 f86b 	bl	8006524 <TM_LCD_SetColors>



	  //GUI_SetFont(&GUI_Font20_1);

	  TM_TOUCH_Init(&Driver, &TS);
 800444e:	4631      	mov	r1, r6
 8004450:	4620      	mov	r0, r4
	  	  //GUI_TOUCH_Exec()
	  /* Create the 5 Buttons Menu */
	  x=distance;
	  y=distance;
	  GUI_BUTTON_INIT(&bt_menu1,x,y,rect_width,rect_height,"Temp Graph",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu1Touch,NULL);
 8004452:	f64f 74e0 	movw	r4, #65504	; 0xffe0



	  //GUI_SetFont(&GUI_Font20_1);

	  TM_TOUCH_Init(&Driver, &TS);
 8004456:	f002 fb4d 	bl	8006af4 <TM_TOUCH_Init>
	  	  //GUI_TOUCH_Exec()
	  /* Create the 5 Buttons Menu */
	  x=distance;
	  y=distance;
	  GUI_BUTTON_INIT(&bt_menu1,x,y,rect_width,rect_height,"Temp Graph",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu1Touch,NULL);
 800445a:	4b8a      	ldr	r3, [pc, #552]	; (8004684 <InitGui+0x270>)
 800445c:	2202      	movs	r2, #2
 800445e:	9700      	str	r7, [sp, #0]
 8004460:	9307      	str	r3, [sp, #28]
 8004462:	4b89      	ldr	r3, [pc, #548]	; (8004688 <InitGui+0x274>)
 8004464:	4611      	mov	r1, r2
 8004466:	9508      	str	r5, [sp, #32]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	2364      	movs	r3, #100	; 0x64
 800446c:	9406      	str	r4, [sp, #24]
 800446e:	9505      	str	r5, [sp, #20]
 8004470:	9404      	str	r4, [sp, #16]
 8004472:	9403      	str	r4, [sp, #12]
 8004474:	9602      	str	r6, [sp, #8]
 8004476:	4885      	ldr	r0, [pc, #532]	; (800468c <InitGui+0x278>)
 8004478:	f000 fac2 	bl	8004a00 <GUI_BUTTON_INIT>
	  y=y+rect_height+distance;
	  GUI_BUTTON_INIT(&bt_menu2,x,y,rect_width,rect_height,"HEAT CTRL",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu2Touch,NULL);
 800447c:	4b84      	ldr	r3, [pc, #528]	; (8004690 <InitGui+0x27c>)
 800447e:	9700      	str	r7, [sp, #0]
 8004480:	2238      	movs	r2, #56	; 0x38
 8004482:	9307      	str	r3, [sp, #28]
 8004484:	2102      	movs	r1, #2
 8004486:	4b83      	ldr	r3, [pc, #524]	; (8004694 <InitGui+0x280>)
 8004488:	9508      	str	r5, [sp, #32]
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	2364      	movs	r3, #100	; 0x64
 800448e:	9406      	str	r4, [sp, #24]
 8004490:	9505      	str	r5, [sp, #20]
 8004492:	9404      	str	r4, [sp, #16]
 8004494:	9403      	str	r4, [sp, #12]
 8004496:	9602      	str	r6, [sp, #8]
 8004498:	487f      	ldr	r0, [pc, #508]	; (8004698 <InitGui+0x284>)
 800449a:	f000 fab1 	bl	8004a00 <GUI_BUTTON_INIT>
	  y=y+rect_height+distance;
	  //GUI_BUTTON_INIT(&bt_menu3,x,y,rect_width,rect_height,"Menu3",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu3Touch,NULL);
	  y=y+rect_height+distance;
	  //GUI_BUTTON_INIT(&bt_menu4,x,y,rect_width,rect_height,"Menu4",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu4Touch,NULL);
	  y=y+rect_height+distance;
	  GUI_BUTTON_INIT(&bt_menu5,x,y,rect_width,rect_height,"Settings",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu5Touch,NULL);
 800449e:	4b7f      	ldr	r3, [pc, #508]	; (800469c <InitGui+0x288>)
 80044a0:	9700      	str	r7, [sp, #0]
	  /* Buttons on Page 1 */

	  /* Buttons on Page 2 */
	  x=150;
	  y=100;
	  GUI_BUTTON_INIT(&bt_pwm_pct,x,y,95,50,"NULL",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,NULL,NULL);
 80044a2:	2732      	movs	r7, #50	; 0x32
	  y=y+rect_height+distance;
	  //GUI_BUTTON_INIT(&bt_menu3,x,y,rect_width,rect_height,"Menu3",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu3Touch,NULL);
	  y=y+rect_height+distance;
	  //GUI_BUTTON_INIT(&bt_menu4,x,y,rect_width,rect_height,"Menu4",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu4Touch,NULL);
	  y=y+rect_height+distance;
	  GUI_BUTTON_INIT(&bt_menu5,x,y,rect_width,rect_height,"Settings",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&Menu5Touch,NULL);
 80044a4:	9307      	str	r3, [sp, #28]
 80044a6:	22da      	movs	r2, #218	; 0xda
 80044a8:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <InitGui+0x28c>)
 80044aa:	2102      	movs	r1, #2
 80044ac:	9508      	str	r5, [sp, #32]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	2364      	movs	r3, #100	; 0x64
 80044b2:	9406      	str	r4, [sp, #24]
 80044b4:	9505      	str	r5, [sp, #20]
 80044b6:	9404      	str	r4, [sp, #16]
 80044b8:	9403      	str	r4, [sp, #12]
 80044ba:	9602      	str	r6, [sp, #8]
 80044bc:	4879      	ldr	r0, [pc, #484]	; (80046a4 <InitGui+0x290>)
 80044be:	f000 fa9f 	bl	8004a00 <GUI_BUTTON_INIT>
	  /* Buttons on Page 1 */

	  /* Buttons on Page 2 */
	  x=150;
	  y=100;
	  GUI_BUTTON_INIT(&bt_pwm_pct,x,y,95,50,"NULL",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,NULL,NULL);
 80044c2:	9700      	str	r7, [sp, #0]
 80044c4:	9508      	str	r5, [sp, #32]
 80044c6:	235f      	movs	r3, #95	; 0x5f
 80044c8:	9507      	str	r5, [sp, #28]
 80044ca:	2264      	movs	r2, #100	; 0x64
 80044cc:	9406      	str	r4, [sp, #24]
 80044ce:	2196      	movs	r1, #150	; 0x96
 80044d0:	9505      	str	r5, [sp, #20]
 80044d2:	9404      	str	r4, [sp, #16]
 80044d4:	9403      	str	r4, [sp, #12]
 80044d6:	9602      	str	r6, [sp, #8]
 80044d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80044dc:	4872      	ldr	r0, [pc, #456]	; (80046a8 <InitGui+0x294>)
 80044de:	f000 fa8f 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=55;
	  GUI_BUTTON_INIT(&bt_pwm_temp,x,y,95,50,"NULL",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,NULL,NULL);
 80044e2:	9508      	str	r5, [sp, #32]
 80044e4:	9507      	str	r5, [sp, #28]
 80044e6:	235f      	movs	r3, #95	; 0x5f
 80044e8:	9406      	str	r4, [sp, #24]
 80044ea:	229b      	movs	r2, #155	; 0x9b
 80044ec:	9505      	str	r5, [sp, #20]
 80044ee:	2196      	movs	r1, #150	; 0x96
 80044f0:	9404      	str	r4, [sp, #16]
 80044f2:	9403      	str	r4, [sp, #12]
 80044f4:	9602      	str	r6, [sp, #8]
 80044f6:	486d      	ldr	r0, [pc, #436]	; (80046ac <InitGui+0x298>)
 80044f8:	e88d 0180 	stmia.w	sp, {r7, r8}
 80044fc:	f000 fa80 	bl	8004a00 <GUI_BUTTON_INIT>

	  x=250;
	  y=100;
	  GUI_BUTTON_INIT(&bt_pwm_plus,x,y,50,50,"+",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_plus_touch,NULL);
 8004500:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <InitGui+0x29c>)
 8004502:	9700      	str	r7, [sp, #0]
 8004504:	2264      	movs	r2, #100	; 0x64
 8004506:	9307      	str	r3, [sp, #28]
 8004508:	21fa      	movs	r1, #250	; 0xfa
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <InitGui+0x2a0>)
 800450c:	9508      	str	r5, [sp, #32]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	463b      	mov	r3, r7
 8004512:	9406      	str	r4, [sp, #24]
 8004514:	9505      	str	r5, [sp, #20]
 8004516:	9404      	str	r4, [sp, #16]
 8004518:	9403      	str	r4, [sp, #12]
 800451a:	9602      	str	r6, [sp, #8]
 800451c:	4866      	ldr	r0, [pc, #408]	; (80046b8 <InitGui+0x2a4>)
 800451e:	f000 fa6f 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=55;
	  GUI_BUTTON_INIT(&bt_pwm_minus,x,y,50,50,"-",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_minus_touch,NULL);
 8004522:	4b66      	ldr	r3, [pc, #408]	; (80046bc <InitGui+0x2a8>)
 8004524:	9700      	str	r7, [sp, #0]
 8004526:	229b      	movs	r2, #155	; 0x9b
 8004528:	9307      	str	r3, [sp, #28]
 800452a:	21fa      	movs	r1, #250	; 0xfa
 800452c:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <InitGui+0x2ac>)
 800452e:	9508      	str	r5, [sp, #32]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	463b      	mov	r3, r7
 8004534:	9406      	str	r4, [sp, #24]
 8004536:	9505      	str	r5, [sp, #20]
 8004538:	9404      	str	r4, [sp, #16]
 800453a:	9403      	str	r4, [sp, #12]
 800453c:	9602      	str	r6, [sp, #8]
 800453e:	4861      	ldr	r0, [pc, #388]	; (80046c4 <InitGui+0x2b0>)
 8004540:	f000 fa5e 	bl	8004a00 <GUI_BUTTON_INIT>
	  x+=55;
	  GUI_BUTTON_INIT(&bt_pwm_on,x,100,50,105,"OFF",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_on_touch,NULL);
 8004544:	4b60      	ldr	r3, [pc, #384]	; (80046c8 <InitGui+0x2b4>)
 8004546:	9508      	str	r5, [sp, #32]
 8004548:	2264      	movs	r2, #100	; 0x64
 800454a:	9307      	str	r3, [sp, #28]
 800454c:	f240 1131 	movw	r1, #305	; 0x131
 8004550:	4b5e      	ldr	r3, [pc, #376]	; (80046cc <InitGui+0x2b8>)
 8004552:	9406      	str	r4, [sp, #24]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	2369      	movs	r3, #105	; 0x69
 8004558:	9505      	str	r5, [sp, #20]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	463b      	mov	r3, r7
 800455e:	9404      	str	r4, [sp, #16]


	  x=400;
	  y=35;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_100,x,y,55,40,"SET 100",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_100_touch,NULL);
 8004560:	2728      	movs	r7, #40	; 0x28
	  y=100;
	  GUI_BUTTON_INIT(&bt_pwm_plus,x,y,50,50,"+",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_plus_touch,NULL);
	  y+=55;
	  GUI_BUTTON_INIT(&bt_pwm_minus,x,y,50,50,"-",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_minus_touch,NULL);
	  x+=55;
	  GUI_BUTTON_INIT(&bt_pwm_on,x,100,50,105,"OFF",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_on_touch,NULL);
 8004562:	9403      	str	r4, [sp, #12]
 8004564:	9602      	str	r6, [sp, #8]
 8004566:	485a      	ldr	r0, [pc, #360]	; (80046d0 <InitGui+0x2bc>)
 8004568:	f000 fa4a 	bl	8004a00 <GUI_BUTTON_INIT>


	  x=400;
	  y=35;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_100,x,y,55,40,"SET 100",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_100_touch,NULL);
 800456c:	4b59      	ldr	r3, [pc, #356]	; (80046d4 <InitGui+0x2c0>)
 800456e:	9508      	str	r5, [sp, #32]
 8004570:	2223      	movs	r2, #35	; 0x23
 8004572:	9307      	str	r3, [sp, #28]
 8004574:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004578:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <InitGui+0x2c4>)
 800457a:	9406      	str	r4, [sp, #24]
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	2337      	movs	r3, #55	; 0x37
 8004580:	9505      	str	r5, [sp, #20]
 8004582:	9404      	str	r4, [sp, #16]
 8004584:	9403      	str	r4, [sp, #12]
 8004586:	9602      	str	r6, [sp, #8]
 8004588:	9700      	str	r7, [sp, #0]
 800458a:	4854      	ldr	r0, [pc, #336]	; (80046dc <InitGui+0x2c8>)
 800458c:	f000 fa38 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=45;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_75,x,y,55,40,"SET 75",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_75_touch,NULL);
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <InitGui+0x2cc>)
 8004592:	9508      	str	r5, [sp, #32]
 8004594:	2250      	movs	r2, #80	; 0x50
 8004596:	9307      	str	r3, [sp, #28]
 8004598:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800459c:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <InitGui+0x2d0>)
 800459e:	9406      	str	r4, [sp, #24]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	2337      	movs	r3, #55	; 0x37
 80045a4:	9505      	str	r5, [sp, #20]
 80045a6:	9404      	str	r4, [sp, #16]
 80045a8:	9403      	str	r4, [sp, #12]
 80045aa:	9602      	str	r6, [sp, #8]
 80045ac:	9700      	str	r7, [sp, #0]
 80045ae:	484e      	ldr	r0, [pc, #312]	; (80046e8 <InitGui+0x2d4>)
 80045b0:	f000 fa26 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=45;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_50,x,y,55,40,"SET 50",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_50_touch,NULL);
 80045b4:	4b4d      	ldr	r3, [pc, #308]	; (80046ec <InitGui+0x2d8>)
 80045b6:	9508      	str	r5, [sp, #32]
 80045b8:	227d      	movs	r2, #125	; 0x7d
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80045c0:	4b4b      	ldr	r3, [pc, #300]	; (80046f0 <InitGui+0x2dc>)
 80045c2:	9406      	str	r4, [sp, #24]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	2337      	movs	r3, #55	; 0x37
 80045c8:	9505      	str	r5, [sp, #20]
 80045ca:	9404      	str	r4, [sp, #16]
 80045cc:	9403      	str	r4, [sp, #12]
 80045ce:	9602      	str	r6, [sp, #8]
 80045d0:	9700      	str	r7, [sp, #0]
 80045d2:	4848      	ldr	r0, [pc, #288]	; (80046f4 <InitGui+0x2e0>)
 80045d4:	f000 fa14 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=45;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_25,x,y,55,40,"SET 25",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_25_touch,NULL);
 80045d8:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <InitGui+0x2e4>)
 80045da:	9508      	str	r5, [sp, #32]
 80045dc:	22aa      	movs	r2, #170	; 0xaa
 80045de:	9307      	str	r3, [sp, #28]
 80045e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80045e4:	4b45      	ldr	r3, [pc, #276]	; (80046fc <InitGui+0x2e8>)
 80045e6:	9406      	str	r4, [sp, #24]
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	2337      	movs	r3, #55	; 0x37
 80045ec:	9505      	str	r5, [sp, #20]
 80045ee:	9404      	str	r4, [sp, #16]
 80045f0:	9403      	str	r4, [sp, #12]
 80045f2:	9602      	str	r6, [sp, #8]
 80045f4:	9700      	str	r7, [sp, #0]
 80045f6:	4842      	ldr	r0, [pc, #264]	; (8004700 <InitGui+0x2ec>)
 80045f8:	f000 fa02 	bl	8004a00 <GUI_BUTTON_INIT>
	  y+=45;
	  GUI_BUTTON_INIT(&bt_pwm_set_pct_0,x,y,55,40,"SET 0",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_pwm_set_0_touch,NULL);
 80045fc:	4b41      	ldr	r3, [pc, #260]	; (8004704 <InitGui+0x2f0>)
 80045fe:	9508      	str	r5, [sp, #32]
 8004600:	22d7      	movs	r2, #215	; 0xd7
 8004602:	9307      	str	r3, [sp, #28]
 8004604:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004608:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <InitGui+0x2f4>)
 800460a:	9406      	str	r4, [sp, #24]
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	2337      	movs	r3, #55	; 0x37
 8004610:	9505      	str	r5, [sp, #20]
 8004612:	9404      	str	r4, [sp, #16]
 8004614:	9403      	str	r4, [sp, #12]
 8004616:	9602      	str	r6, [sp, #8]
 8004618:	9700      	str	r7, [sp, #0]
 800461a:	483c      	ldr	r0, [pc, #240]	; (800470c <InitGui+0x2f8>)
 800461c:	f000 f9f0 	bl	8004a00 <GUI_BUTTON_INIT>

	  GUI_LED_INIT(&ld_pwm_on,315,75,25,LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 8004620:	2319      	movs	r3, #25
 8004622:	224b      	movs	r2, #75	; 0x4b
 8004624:	f240 113b 	movw	r1, #315	; 0x13b
 8004628:	4839      	ldr	r0, [pc, #228]	; (8004710 <InitGui+0x2fc>)
 800462a:	e88d 0030 	stmia.w	sp, {r4, r5}
 800462e:	f000 fac6 	bl	8004bbe <GUI_LED_INIT>
	  GUI_LED_INIT(&ld_pwm_output,345,75,25,LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 8004632:	2319      	movs	r3, #25
 8004634:	224b      	movs	r2, #75	; 0x4b
 8004636:	f240 1159 	movw	r1, #345	; 0x159
 800463a:	4836      	ldr	r0, [pc, #216]	; (8004714 <InitGui+0x300>)
 800463c:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004640:	f000 fabd 	bl	8004bbe <GUI_LED_INIT>

	  /* Buttons on Page 4 */

	  /* Buttons on Page 5 */

	  GUI_BUTTON_INIT(&bt_setting_save,400,215,55,40,"SAVE",&TS,LCD_COLOR_YELLOW,LCD_COLOR_YELLOW,LCD_COLOR_BLACK,LCD_COLOR_YELLOW,&bt_setting_save_touch,NULL);
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <InitGui+0x304>)
 8004646:	22d7      	movs	r2, #215	; 0xd7
 8004648:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800464c:	9307      	str	r3, [sp, #28]
 800464e:	4b33      	ldr	r3, [pc, #204]	; (800471c <InitGui+0x308>)
 8004650:	4833      	ldr	r0, [pc, #204]	; (8004720 <InitGui+0x30c>)
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2337      	movs	r3, #55	; 0x37
 8004656:	9508      	str	r5, [sp, #32]
 8004658:	9406      	str	r4, [sp, #24]
 800465a:	9505      	str	r5, [sp, #20]
 800465c:	9404      	str	r4, [sp, #16]
 800465e:	9403      	str	r4, [sp, #12]
 8004660:	9602      	str	r6, [sp, #8]
 8004662:	9700      	str	r7, [sp, #0]
 8004664:	f000 f9cc 	bl	8004a00 <GUI_BUTTON_INIT>
	  GUI_Delay(25);
	  TM_TOUCH_Read(&TS);
	  WM_Paint(hWin);

  }*/
}
 8004668:	b00a      	add	sp, #40	; 0x28
 800466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800466e:	bf00      	nop
 8004670:	08006b9d 	.word	0x08006b9d
 8004674:	20004a00 	.word	0x20004a00
 8004678:	20004a08 	.word	0x20004a08
 800467c:	08006bf9 	.word	0x08006bf9
 8004680:	20000010 	.word	0x20000010
 8004684:	08004361 	.word	0x08004361
 8004688:	08009b30 	.word	0x08009b30
 800468c:	200047a0 	.word	0x200047a0
 8004690:	0800436d 	.word	0x0800436d
 8004694:	08009b3b 	.word	0x08009b3b
 8004698:	20004968 	.word	0x20004968
 800469c:	08004379 	.word	0x08004379
 80046a0:	08009b45 	.word	0x08009b45
 80046a4:	20004a38 	.word	0x20004a38
 80046a8:	2000491c 	.word	0x2000491c
 80046ac:	20004838 	.word	0x20004838
 80046b0:	08004385 	.word	0x08004385
 80046b4:	08009b53 	.word	0x08009b53
 80046b8:	20004658 	.word	0x20004658
 80046bc:	08004399 	.word	0x08004399
 80046c0:	08009b55 	.word	0x08009b55
 80046c4:	20004754 	.word	0x20004754
 80046c8:	080043e9 	.word	0x080043e9
 80046cc:	08009b2c 	.word	0x08009b2c
 80046d0:	200045ac 	.word	0x200045ac
 80046d4:	080043a9 	.word	0x080043a9
 80046d8:	08009b57 	.word	0x08009b57
 80046dc:	2000460c 	.word	0x2000460c
 80046e0:	080043b5 	.word	0x080043b5
 80046e4:	08009b5f 	.word	0x08009b5f
 80046e8:	20004a84 	.word	0x20004a84
 80046ec:	080043c1 	.word	0x080043c1
 80046f0:	08009b66 	.word	0x08009b66
 80046f4:	200049b4 	.word	0x200049b4
 80046f8:	080043cd 	.word	0x080043cd
 80046fc:	08009b6d 	.word	0x08009b6d
 8004700:	200048d0 	.word	0x200048d0
 8004704:	080043d9 	.word	0x080043d9
 8004708:	08009b74 	.word	0x08009b74
 800470c:	200046f4 	.word	0x200046f4
 8004710:	20004740 	.word	0x20004740
 8004714:	200045f8 	.word	0x200045f8
 8004718:	080043e5 	.word	0x080043e5
 800471c:	08009b7a 	.word	0x08009b7a
 8004720:	20004884 	.word	0x20004884
 8004724:	08009b4e 	.word	0x08009b4e

08004728 <Draw_menu>:
	//	  	}
	//}
}


void Draw_menu(void){
 8004728:	b508      	push	{r3, lr}

	  Draw_button_struct(&bt_menu1);
 800472a:	4805      	ldr	r0, [pc, #20]	; (8004740 <Draw_menu+0x18>)
 800472c:	f000 f9da 	bl	8004ae4 <Draw_button_struct>
	  Draw_button_struct(&bt_menu2);
 8004730:	4804      	ldr	r0, [pc, #16]	; (8004744 <Draw_menu+0x1c>)
 8004732:	f000 f9d7 	bl	8004ae4 <Draw_button_struct>
	  //Draw_button_struct(&bt_menu3);
	  //Draw_button_struct(&bt_menu4);
	  Draw_button_struct(&bt_menu5);
 8004736:	4804      	ldr	r0, [pc, #16]	; (8004748 <Draw_menu+0x20>)

}
 8004738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	  Draw_button_struct(&bt_menu1);
	  Draw_button_struct(&bt_menu2);
	  //Draw_button_struct(&bt_menu3);
	  //Draw_button_struct(&bt_menu4);
	  Draw_button_struct(&bt_menu5);
 800473c:	f000 b9d2 	b.w	8004ae4 <Draw_button_struct>
 8004740:	200047a0 	.word	0x200047a0
 8004744:	20004968 	.word	0x20004968
 8004748:	20004a38 	.word	0x20004a38

0800474c <DrawPage2>:
void DrawPage1(void){
	//GUI_DispStringAt("Temperature Graph",113,8);

	//Draw_graph_struct(&temp_plot);
}
void DrawPage2(void){
 800474c:	b508      	push	{r3, lr}
	//char tempstr[255]={0};

	if(G_pwm_output_status){
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <DrawPage2+0xb4>)
 8004750:	492c      	ldr	r1, [pc, #176]	; (8004804 <DrawPage2+0xb8>)
 8004752:	881a      	ldrh	r2, [r3, #0]
 8004754:	4b2c      	ldr	r3, [pc, #176]	; (8004808 <DrawPage2+0xbc>)
 8004756:	b12a      	cbz	r2, 8004764 <DrawPage2+0x18>
		ld_pwm_on.Fill_color=LCD_COLOR_RED;//GUI_RED;
 8004758:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800475c:	610a      	str	r2, [r1, #16]
		bt_pwm_on.Filled_color=LCD_COLOR_RED;//GUI_RED;
 800475e:	635a      	str	r2, [r3, #52]	; 0x34
		bt_pwm_on.text_color=LCD_COLOR_BLACK;//GUI_BLACK;
 8004760:	2200      	movs	r2, #0
 8004762:	e003      	b.n	800476c <DrawPage2+0x20>
	}else{
		ld_pwm_on.Fill_color=LCD_COLOR_BLACK;//GUI_BLACK;
 8004764:	610a      	str	r2, [r1, #16]
		bt_pwm_on.Filled_color=LCD_COLOR_BLACK;//GUI_BLACK;
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
		bt_pwm_on.text_color=LCD_COLOR_YELLOW;//GUI_YELLOW;
 8004768:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(G_pwm_output){
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <DrawPage2+0xc0>)
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	4b27      	ldr	r3, [pc, #156]	; (8004810 <DrawPage2+0xc4>)
 8004774:	b10a      	cbz	r2, 800477a <DrawPage2+0x2e>
		ld_pwm_output.Fill_color=LCD_COLOR_RED;//GUI_RED;
 8004776:	f44f 4278 	mov.w	r2, #63488	; 0xf800
		ld_pwm_output.Fill_color=LCD_COLOR_BLACK;//GUI_BLACK;
	}


	//GUI_DispStringAt("HEATING ELEMENT PWM",113,8);
	TM_LCD_SetXY(113,8);
 800477a:	2108      	movs	r1, #8
 800477c:	2071      	movs	r0, #113	; 0x71
	}

	if(G_pwm_output){
		ld_pwm_output.Fill_color=LCD_COLOR_RED;//GUI_RED;
	}else{
		ld_pwm_output.Fill_color=LCD_COLOR_BLACK;//GUI_BLACK;
 800477e:	611a      	str	r2, [r3, #16]
	}


	//GUI_DispStringAt("HEATING ELEMENT PWM",113,8);
	TM_LCD_SetXY(113,8);
 8004780:	f001 feba 	bl	80064f8 <TM_LCD_SetXY>
	TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 8004784:	2100      	movs	r1, #0
 8004786:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800478a:	f001 fecb 	bl	8006524 <TM_LCD_SetColors>
	TM_LCD_Puts("HEATING ELEMENT PWM");
 800478e:	4821      	ldr	r0, [pc, #132]	; (8004814 <DrawPage2+0xc8>)
 8004790:	f001 ff22 	bl	80065d8 <TM_LCD_Puts>

	sprintf(bt_pwm_pct.text,"%i %%",G_pwm_pct_value);
 8004794:	4b20      	ldr	r3, [pc, #128]	; (8004818 <DrawPage2+0xcc>)
 8004796:	4921      	ldr	r1, [pc, #132]	; (800481c <DrawPage2+0xd0>)
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	4821      	ldr	r0, [pc, #132]	; (8004820 <DrawPage2+0xd4>)
 800479c:	f002 fd0c 	bl	80071b8 <sprintf>
	Draw_button_struct(&bt_pwm_pct);
 80047a0:	4820      	ldr	r0, [pc, #128]	; (8004824 <DrawPage2+0xd8>)
 80047a2:	f000 f99f 	bl	8004ae4 <Draw_button_struct>
	//G_temperature=22.5;
	sprintf(bt_pwm_temp.text,"%.2f C",G_temperature);
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <DrawPage2+0xdc>)
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f7fb feed 	bl	8000588 <__aeabi_f2d>
 80047ae:	460b      	mov	r3, r1
 80047b0:	4602      	mov	r2, r0
 80047b2:	491e      	ldr	r1, [pc, #120]	; (800482c <DrawPage2+0xe0>)
 80047b4:	481e      	ldr	r0, [pc, #120]	; (8004830 <DrawPage2+0xe4>)
 80047b6:	f002 fcff 	bl	80071b8 <sprintf>
	Draw_button_struct(&bt_pwm_temp);
 80047ba:	481e      	ldr	r0, [pc, #120]	; (8004834 <DrawPage2+0xe8>)
 80047bc:	f000 f992 	bl	8004ae4 <Draw_button_struct>

	Draw_button_struct(&bt_pwm_plus);
 80047c0:	481d      	ldr	r0, [pc, #116]	; (8004838 <DrawPage2+0xec>)
 80047c2:	f000 f98f 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_minus);
 80047c6:	481d      	ldr	r0, [pc, #116]	; (800483c <DrawPage2+0xf0>)
 80047c8:	f000 f98c 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_on);
 80047cc:	480e      	ldr	r0, [pc, #56]	; (8004808 <DrawPage2+0xbc>)
 80047ce:	f000 f989 	bl	8004ae4 <Draw_button_struct>

	Draw_button_struct(&bt_pwm_set_pct_100);
 80047d2:	481b      	ldr	r0, [pc, #108]	; (8004840 <DrawPage2+0xf4>)
 80047d4:	f000 f986 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_set_pct_75);
 80047d8:	481a      	ldr	r0, [pc, #104]	; (8004844 <DrawPage2+0xf8>)
 80047da:	f000 f983 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_set_pct_50);
 80047de:	481a      	ldr	r0, [pc, #104]	; (8004848 <DrawPage2+0xfc>)
 80047e0:	f000 f980 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_set_pct_25);
 80047e4:	4819      	ldr	r0, [pc, #100]	; (800484c <DrawPage2+0x100>)
 80047e6:	f000 f97d 	bl	8004ae4 <Draw_button_struct>
	Draw_button_struct(&bt_pwm_set_pct_0);
 80047ea:	4819      	ldr	r0, [pc, #100]	; (8004850 <DrawPage2+0x104>)
 80047ec:	f000 f97a 	bl	8004ae4 <Draw_button_struct>
	//sprintf(tempstr,"%i pts",temp_plot.Data.pointQTY);
	//GUI_DispStringAt(tempstr,113,25);



	Draw_led_struct(&ld_pwm_on);
 80047f0:	4804      	ldr	r0, [pc, #16]	; (8004804 <DrawPage2+0xb8>)
 80047f2:	f000 f9c8 	bl	8004b86 <Draw_led_struct>

	Draw_led_struct(&ld_pwm_output);
 80047f6:	4806      	ldr	r0, [pc, #24]	; (8004810 <DrawPage2+0xc4>)

}
 80047f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}



	Draw_led_struct(&ld_pwm_on);

	Draw_led_struct(&ld_pwm_output);
 80047fc:	f000 b9c3 	b.w	8004b86 <Draw_led_struct>
 8004800:	2000440c 	.word	0x2000440c
 8004804:	20004740 	.word	0x20004740
 8004808:	200045ac 	.word	0x200045ac
 800480c:	20004400 	.word	0x20004400
 8004810:	200045f8 	.word	0x200045f8
 8004814:	08009b7f 	.word	0x08009b7f
 8004818:	20004402 	.word	0x20004402
 800481c:	08009b93 	.word	0x08009b93
 8004820:	2000492c 	.word	0x2000492c
 8004824:	2000491c 	.word	0x2000491c
 8004828:	200043fc 	.word	0x200043fc
 800482c:	08009b99 	.word	0x08009b99
 8004830:	20004848 	.word	0x20004848
 8004834:	20004838 	.word	0x20004838
 8004838:	20004658 	.word	0x20004658
 800483c:	20004754 	.word	0x20004754
 8004840:	2000460c 	.word	0x2000460c
 8004844:	20004a84 	.word	0x20004a84
 8004848:	200049b4 	.word	0x200049b4
 800484c:	200048d0 	.word	0x200048d0
 8004850:	200046f4 	.word	0x200046f4

08004854 <DrawPage3>:

}
void DrawPage3(void){
 8004854:	b508      	push	{r3, lr}
	//GUI_DispStringAt("Page3 for future use",113,8);
	TM_LCD_SetXY(113,8);
 8004856:	2108      	movs	r1, #8
 8004858:	2071      	movs	r0, #113	; 0x71
 800485a:	f001 fe4d 	bl	80064f8 <TM_LCD_SetXY>
	TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 800485e:	2100      	movs	r1, #0
 8004860:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004864:	f001 fe5e 	bl	8006524 <TM_LCD_SetColors>
	TM_LCD_Puts("Page3 for future use");
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <DrawPage3+0x20>)
}
 800486a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
void DrawPage3(void){
	//GUI_DispStringAt("Page3 for future use",113,8);
	TM_LCD_SetXY(113,8);
	TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
	TM_LCD_Puts("Page3 for future use");
 800486e:	f001 beb3 	b.w	80065d8 <TM_LCD_Puts>
 8004872:	bf00      	nop
 8004874:	08009ba0 	.word	0x08009ba0

08004878 <DrawPage4>:
}
void DrawPage4(void){
 8004878:	b508      	push	{r3, lr}
	//GUI_DispStringAt("Page4 for future use",113,8);
	TM_LCD_SetXY(113,8);
 800487a:	2108      	movs	r1, #8
 800487c:	2071      	movs	r0, #113	; 0x71
 800487e:	f001 fe3b 	bl	80064f8 <TM_LCD_SetXY>
		TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 8004882:	2100      	movs	r1, #0
 8004884:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8004888:	f001 fe4c 	bl	8006524 <TM_LCD_SetColors>
		TM_LCD_Puts("Page4 for future use");
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <DrawPage4+0x20>)
}
 800488e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
void DrawPage4(void){
	//GUI_DispStringAt("Page4 for future use",113,8);
	TM_LCD_SetXY(113,8);
		TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
		TM_LCD_Puts("Page4 for future use");
 8004892:	f001 bea1 	b.w	80065d8 <TM_LCD_Puts>
 8004896:	bf00      	nop
 8004898:	08009bb5 	.word	0x08009bb5

0800489c <DrawPage5>:
}
void DrawPage5(void){
 800489c:	b508      	push	{r3, lr}
	//GUI_DispStringAt("Setting Page",113,8);
	TM_LCD_SetXY(113,8);
 800489e:	2108      	movs	r1, #8
 80048a0:	2071      	movs	r0, #113	; 0x71
 80048a2:	f001 fe29 	bl	80064f8 <TM_LCD_SetXY>
		TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
 80048a6:	2100      	movs	r1, #0
 80048a8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80048ac:	f001 fe3a 	bl	8006524 <TM_LCD_SetColors>
		TM_LCD_Puts("Setting Page");
 80048b0:	4803      	ldr	r0, [pc, #12]	; (80048c0 <DrawPage5+0x24>)
 80048b2:	f001 fe91 	bl	80065d8 <TM_LCD_Puts>

	Draw_button_struct(&bt_setting_save);
 80048b6:	4803      	ldr	r0, [pc, #12]	; (80048c4 <DrawPage5+0x28>)

}
 80048b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	//GUI_DispStringAt("Setting Page",113,8);
	TM_LCD_SetXY(113,8);
		TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
		TM_LCD_Puts("Setting Page");

	Draw_button_struct(&bt_setting_save);
 80048bc:	f000 b912 	b.w	8004ae4 <Draw_button_struct>
 80048c0:	08009bca 	.word	0x08009bca
 80048c4:	20004884 	.word	0x20004884

080048c8 <updateUI>:
	  WM_Paint(hWin);

  }*/
}

void updateUI(void){//WM_MESSAGE * pMsg){
 80048c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048cc:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0

char str[1000]={0};
 80048d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048d4:	2100      	movs	r1, #0
 80048d6:	a802      	add	r0, sp, #8
 80048d8:	f002 fc53 	bl	8007182 <memset>
	//{
	//case WM_PAINT:
	//{

	//GUI_Clear();
	Draw_menu();
 80048dc:	f7ff ff24 	bl	8004728 <Draw_menu>
	TM_LCD_SetColors(LCD_COLOR_RED,LCD_COLOR_BLACK);
 80048e0:	2100      	movs	r1, #0
 80048e2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80048e6:	f001 fe1d 	bl	8006524 <TM_LCD_SetColors>
	//GUI_SetColor(GUI_RED);

	sprintf(str,"%i",G_SecondCounter);
 80048ea:	4b29      	ldr	r3, [pc, #164]	; (8004990 <updateUI+0xc8>)
 80048ec:	4929      	ldr	r1, [pc, #164]	; (8004994 <updateUI+0xcc>)
 80048ee:	a802      	add	r0, sp, #8
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	f002 fc61 	bl	80071b8 <sprintf>

	TM_LCD_SetXY(440,8);
 80048f6:	2108      	movs	r1, #8
 80048f8:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80048fc:	f001 fdfc 	bl	80064f8 <TM_LCD_SetXY>
	TM_LCD_Puts(str);
 8004900:	a802      	add	r0, sp, #8
 8004902:	f001 fe69 	bl	80065d8 <TM_LCD_Puts>
	//GUI_DispStringAt(str,440,8);

	//TM_LCD_SetColors(LCD_COLOR_YELLOW,LCD_COLOR_BLACK);
	//GUI_SetColor(GUI_YELLOW);
	TM_LCD_DrawRoundedRectangle(105,2,369,267,5,LCD_COLOR_YELLOW);
 8004906:	2205      	movs	r2, #5
 8004908:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800490c:	2102      	movs	r1, #2
 800490e:	2069      	movs	r0, #105	; 0x69
 8004910:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004914:	f240 130b 	movw	r3, #267	; 0x10b
 8004918:	f240 1271 	movw	r2, #369	; 0x171
 800491c:	f001 ffc4 	bl	80068a8 <TM_LCD_DrawRoundedRectangle>
		  //GUI_DrawRoundedRect(105,2,474,269,5);
	TM_LCD_SetFont(&TM_Font_7x10);
 8004920:	481d      	ldr	r0, [pc, #116]	; (8004998 <updateUI+0xd0>)
 8004922:	f001 fdf9 	bl	8006518 <TM_LCD_SetFont>
		 // GUI_SetFont(&GUI_Font16_1);
		  switch(CurrentPage){
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <updateUI+0xd4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3b02      	subs	r3, #2
 800492c:	2b03      	cmp	r3, #3
 800492e:	d80e      	bhi.n	800494e <updateUI+0x86>
 8004930:	e8df f003 	tbb	[pc, r3]
 8004934:	0b080502 	.word	0x0b080502
		  	  case 1:
		  		  DrawPage1();
		  		  break;
		  	  case 2:
		  		  DrawPage2();
 8004938:	f7ff ff08 	bl	800474c <DrawPage2>
		  		  break;
 800493c:	e007      	b.n	800494e <updateUI+0x86>
		  	  case 3:
		  		  DrawPage3();
 800493e:	f7ff ff89 	bl	8004854 <DrawPage3>
		  		  break;
 8004942:	e004      	b.n	800494e <updateUI+0x86>
		  	  case 4:
		  		  DrawPage4();
 8004944:	f7ff ff98 	bl	8004878 <DrawPage4>
		  		  break;
 8004948:	e001      	b.n	800494e <updateUI+0x86>
		  	  case 5:
		  		  DrawPage5();
 800494a:	f7ff ffa7 	bl	800489c <DrawPage5>
		  		  break;
		  	  }

		  	  //Draw circle on pressed Area
		  	  if (TS.NumPresses) {
 800494e:	4c14      	ldr	r4, [pc, #80]	; (80049a0 <updateUI+0xd8>)
 8004950:	7823      	ldrb	r3, [r4, #0]
 8004952:	b1c3      	cbz	r3, 8004986 <updateUI+0xbe>
 8004954:	1ca6      	adds	r6, r4, #2
 8004956:	2500      	movs	r5, #0
		  		  int i;
		  	      /* Go through all presses on LCD */
		  	      for (i = 0; i < TS.NumPresses; i++) {
 8004958:	7823      	ldrb	r3, [r4, #0]
 800495a:	429d      	cmp	r5, r3
 800495c:	da13      	bge.n	8004986 <updateUI+0xbe>
		  	      	/* Draw circle */
		  	    	//TM_LCD_SetColors(LCD_COLOR_GRAY,LCD_COLOR_BLACK);
		  	    	//GUI_SetColor(GUI_GRAY);
		  	    	TM_LCD_DrawCircle(TM_LCD_GetWidth()-TS.X[i], TM_LCD_GetHeight()-TS.Y[i],5,LCD_COLOR_GRAY);
 800495e:	f001 ffd9 	bl	8006914 <TM_LCD_GetWidth>
 8004962:	f836 8b02 	ldrh.w	r8, [r6], #2
 8004966:	4607      	mov	r7, r0
 8004968:	f001 ffda 	bl	8006920 <TM_LCD_GetHeight>
 800496c:	8a71      	ldrh	r1, [r6, #18]
 800496e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004972:	2205      	movs	r2, #5

		  	  //Draw circle on pressed Area
		  	  if (TS.NumPresses) {
		  		  int i;
		  	      /* Go through all presses on LCD */
		  	      for (i = 0; i < TS.NumPresses; i++) {
 8004974:	3501      	adds	r5, #1
		  	      	/* Draw circle */
		  	    	//TM_LCD_SetColors(LCD_COLOR_GRAY,LCD_COLOR_BLACK);
		  	    	//GUI_SetColor(GUI_GRAY);
		  	    	TM_LCD_DrawCircle(TM_LCD_GetWidth()-TS.X[i], TM_LCD_GetHeight()-TS.Y[i],5,LCD_COLOR_GRAY);
 8004976:	1a41      	subs	r1, r0, r1
 8004978:	ebc8 0007 	rsb	r0, r8, r7
 800497c:	b209      	sxth	r1, r1
 800497e:	b200      	sxth	r0, r0
 8004980:	f001 ffb7 	bl	80068f2 <TM_LCD_DrawCircle>
 8004984:	e7e8      	b.n	8004958 <updateUI+0x90>
	//	  	default:
	//	  	{
		  	//WM_DefaultProc(pMsg);
	//	  	}
	//}
}
 8004986:	f50d 7d7c 	add.w	sp, sp, #1008	; 0x3f0
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498e:	bf00      	nop
 8004990:	20004408 	.word	0x20004408
 8004994:	08009bd7 	.word	0x08009bd7
 8004998:	20000010 	.word	0x20000010
 800499c:	20000004 	.word	0x20000004
 80049a0:	20004a08 	.word	0x20004a08

080049a4 <GuiLoop>:

void GuiLoop(void){

	static int temp=0;

	temp++;
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <GuiLoop+0x50>)
void InitGui(void);
void GuiLoop(void);
void updateUI(void);
//void updateUI(WM_MESSAGE * pMsg);

void GuiLoop(void){
 80049a6:	b508      	push	{r3, lr}

	static int temp=0;

	temp++;
 80049a8:	6813      	ldr	r3, [r2, #0]
 80049aa:	3301      	adds	r3, #1

	if(temp>50){
 80049ac:	2b32      	cmp	r3, #50	; 0x32
 80049ae:	dc01      	bgt.n	80049b4 <GuiLoop+0x10>

void GuiLoop(void){

	static int temp=0;

	temp++;
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e005      	b.n	80049c0 <GuiLoop+0x1c>

	if(temp>50){
		temp=0;
 80049b4:	2300      	movs	r3, #0
		TM_TOUCH_Init(&Driver, &TS);
 80049b6:	4910      	ldr	r1, [pc, #64]	; (80049f8 <GuiLoop+0x54>)
 80049b8:	4810      	ldr	r0, [pc, #64]	; (80049fc <GuiLoop+0x58>)
	static int temp=0;

	temp++;

	if(temp>50){
		temp=0;
 80049ba:	6013      	str	r3, [r2, #0]
		TM_TOUCH_Init(&Driver, &TS);
 80049bc:	f002 f89a 	bl	8006af4 <TM_TOUCH_Init>
	}

	  //GUI_Delay(25);
	  TM_TOUCH_Read(&TS);
 80049c0:	480d      	ldr	r0, [pc, #52]	; (80049f8 <GuiLoop+0x54>)
 80049c2:	f002 f8ab 	bl	8006b1c <TM_TOUCH_Read>
	  //TM_LCD_SetLayer1();
	  TM_LCD_Layer1To2();
 80049c6:	f001 ff5d 	bl	8006884 <TM_LCD_Layer1To2>
	  TM_LCD_SetLayer2Opacity(255);
 80049ca:	20ff      	movs	r0, #255	; 0xff
 80049cc:	f001 fe36 	bl	800663c <TM_LCD_SetLayer2Opacity>
	  TM_LCD_SetLayer1Opacity(0);
 80049d0:	2000      	movs	r0, #0
 80049d2:	f001 fe29 	bl	8006628 <TM_LCD_SetLayer1Opacity>
	  TM_LCD_SetLayer1();
 80049d6:	f001 fe0b 	bl	80065f0 <TM_LCD_SetLayer1>
	  TM_LCD_Fill(LCD_COLOR_BLACK);
 80049da:	2000      	movs	r0, #0
 80049dc:	f001 fd5c 	bl	8006498 <TM_LCD_Fill>
	  //TM_LCD_
	  updateUI();
 80049e0:	f7ff ff72 	bl	80048c8 <updateUI>
	  //WM_Paint(hWin);
	  //TM_LCD_ChangeLayers();
	  TM_LCD_SetLayer2Opacity(0);
 80049e4:	2000      	movs	r0, #0
 80049e6:	f001 fe29 	bl	800663c <TM_LCD_SetLayer2Opacity>
	  TM_LCD_SetLayer1Opacity(255);
 80049ea:	20ff      	movs	r0, #255	; 0xff
}
 80049ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  //TM_LCD_
	  updateUI();
	  //WM_Paint(hWin);
	  //TM_LCD_ChangeLayers();
	  TM_LCD_SetLayer2Opacity(0);
	  TM_LCD_SetLayer1Opacity(255);
 80049f0:	f001 be1a 	b.w	8006628 <TM_LCD_SetLayer1Opacity>
 80049f4:	200043f4 	.word	0x200043f4
 80049f8:	20004a08 	.word	0x20004a08
 80049fc:	20004a00 	.word	0x20004a00

08004a00 <GUI_BUTTON_INIT>:
		uint32_t Contour_color,uint32_t Touched_fill_color,uint32_t Touched_text_color,uint32_t text_color,
void (*TouchAction)(void),void (*ReleaseAction)(void)){

	Button->x=x;
	Button->y=y;
	Button->w=w;
 8004a00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Button->h=h;
 8004a04:	9b00      	ldr	r3, [sp, #0]
	Button->Touched_text_color=Touched_text_color;
	Button->text_color=text_color;
	Button->TouchAction=TouchAction;
	Button->ReleaseAction=ReleaseAction;
	Button->TS=TS;
	strcpy(Button->text,text);
 8004a06:	3010      	adds	r0, #16
 8004a08:	9901      	ldr	r1, [sp, #4]
void (*TouchAction)(void),void (*ReleaseAction)(void)){

	Button->x=x;
	Button->y=y;
	Button->w=w;
	Button->h=h;
 8004a0a:	f840 3c04 	str.w	r3, [r0, #-4]
	Button->Contour_color=Contour_color;
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	6203      	str	r3, [r0, #32]
	Button->Filled_color=LCD_COLOR_BLACK;//GUI_BLACK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	6243      	str	r3, [r0, #36]	; 0x24
	Button->Touched_fill_color=Touched_fill_color;
 8004a16:	9b04      	ldr	r3, [sp, #16]
 8004a18:	6283      	str	r3, [r0, #40]	; 0x28
	Button->Touched_text_color=Touched_text_color;
 8004a1a:	9b05      	ldr	r3, [sp, #20]
 8004a1c:	62c3      	str	r3, [r0, #44]	; 0x2c
	Button->text_color=text_color;
 8004a1e:	9b06      	ldr	r3, [sp, #24]
 8004a20:	6303      	str	r3, [r0, #48]	; 0x30
	Button->TouchAction=TouchAction;
 8004a22:	9b07      	ldr	r3, [sp, #28]
 8004a24:	6343      	str	r3, [r0, #52]	; 0x34
	Button->ReleaseAction=ReleaseAction;
 8004a26:	9b08      	ldr	r3, [sp, #32]
 8004a28:	6383      	str	r3, [r0, #56]	; 0x38
	Button->TS=TS;
 8004a2a:	9b02      	ldr	r3, [sp, #8]
 8004a2c:	61c3      	str	r3, [r0, #28]
	strcpy(Button->text,text);
 8004a2e:	f002 bbe7 	b.w	8007200 <strcpy>
	...

08004a34 <Draw_button>:
		bt->ReleaseAction();
	}
	bt->touchstatus_mem=bt->touchstatus;
}

void Draw_button(int x,int y,int w,int h,const char* text,uint32_t color,uint32_t fill_color,uint32_t textcolor){
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	461d      	mov	r5, r3
	//colormemory=GUI_GetColor();

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
 8004a3c:	fa1f f880 	uxth.w	r8, r0
		bt->ReleaseAction();
	}
	bt->touchstatus_mem=bt->touchstatus;
}

void Draw_button(int x,int y,int w,int h,const char* text,uint32_t color,uint32_t fill_color,uint32_t textcolor){
 8004a40:	4614      	mov	r4, r2
 8004a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
	//colormemory=GUI_GetColor();

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
 8004a44:	fa1f f981 	uxth.w	r9, r1
 8004a48:	b2af      	uxth	r7, r5
 8004a4a:	4640      	mov	r0, r8
		bt->ReleaseAction();
	}
	bt->touchstatus_mem=bt->touchstatus;
}

void Draw_button(int x,int y,int w,int h,const char* text,uint32_t color,uint32_t fill_color,uint32_t textcolor){
 8004a4c:	9303      	str	r3, [sp, #12]
	//colormemory=GUI_GetColor();

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
 8004a4e:	b296      	uxth	r6, r2
 8004a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a52:	4649      	mov	r1, r9
 8004a54:	4632      	mov	r2, r6
		bt->ReleaseAction();
	}
	bt->touchstatus_mem=bt->touchstatus;
}

void Draw_button(int x,int y,int w,int h,const char* text,uint32_t color,uint32_t fill_color,uint32_t textcolor){
 8004a56:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	//colormemory=GUI_GetColor();

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	230a      	movs	r3, #10
		bt->ReleaseAction();
	}
	bt->touchstatus_mem=bt->touchstatus;
}

void Draw_button(int x,int y,int w,int h,const char* text,uint32_t color,uint32_t fill_color,uint32_t textcolor){
 8004a5e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	//colormemory=GUI_GetColor();

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	463b      	mov	r3, r7
 8004a66:	f001 ff1f 	bl	80068a8 <TM_LCD_DrawRoundedRectangle>
		TM_LCD_DrawFilledRoundedRectangle(x+2,y+2,w-4,h-4,8,fill_color);
 8004a6a:	1f3b      	subs	r3, r7, #4
 8004a6c:	1f32      	subs	r2, r6, #4
 8004a6e:	f109 0102 	add.w	r1, r9, #2
 8004a72:	f108 0002 	add.w	r0, r8, #2
 8004a76:	2608      	movs	r6, #8
		//GUI_SetBkColor(color);
	//}else{
	//	GUI_DrawRoundedRect(x,y,x+w,y+h,10);
	//}

	TM_LCD_SetFont(&TM_Font_7x10);
 8004a78:	4f18      	ldr	r7, [pc, #96]	; (8004adc <Draw_button+0xa8>)

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
		TM_LCD_DrawFilledRoundedRectangle(x+2,y+2,w-4,h-4,8,fill_color);
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	9600      	str	r6, [sp, #0]
 8004a7e:	b292      	uxth	r2, r2
//	GUI_SetFont(&GUI_Font16_1);
//	GUI_SetColor(textcolor);
//	GUI_SetBkColor(fill_color);
//	GUI_DispStringHCenterAt(text,x+(w/2),y+h/2-8);

	TM_FONT_GetStringSize(text, &FontSize, &TM_Font_7x10);
 8004a80:	4e17      	ldr	r6, [pc, #92]	; (8004ae0 <Draw_button+0xac>)

	//GUI_SetColor(color);
	//if(filled){

		TM_LCD_DrawRoundedRectangle(x,y,w,h,10,color);
		TM_LCD_DrawFilledRoundedRectangle(x+2,y+2,w-4,h-4,8,fill_color);
 8004a82:	b289      	uxth	r1, r1
 8004a84:	f8cd b004 	str.w	fp, [sp, #4]
 8004a88:	b280      	uxth	r0, r0
 8004a8a:	f001 ff27 	bl	80068dc <TM_LCD_DrawFilledRoundedRectangle>
		//GUI_SetBkColor(color);
	//}else{
	//	GUI_DrawRoundedRect(x,y,x+w,y+h,10);
	//}

	TM_LCD_SetFont(&TM_Font_7x10);
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f001 fd42 	bl	8006518 <TM_LCD_SetFont>
//	GUI_SetFont(&GUI_Font16_1);
//	GUI_SetColor(textcolor);
//	GUI_SetBkColor(fill_color);
//	GUI_DispStringHCenterAt(text,x+(w/2),y+h/2-8);

	TM_FONT_GetStringSize(text, &FontSize, &TM_Font_7x10);
 8004a94:	463a      	mov	r2, r7
 8004a96:	4631      	mov	r1, r6
 8004a98:	4650      	mov	r0, sl
 8004a9a:	f001 facc 	bl	8006036 <TM_FONT_GetStringSize>

    TM_LCD_SetXY(x+(w - FontSize.Width) / 2, y+(h - FontSize.Height) / 2);
 8004a9e:	8833      	ldrh	r3, [r6, #0]
 8004aa0:	8871      	ldrh	r1, [r6, #2]
 8004aa2:	2002      	movs	r0, #2
 8004aa4:	1ae4      	subs	r4, r4, r3
 8004aa6:	1a69      	subs	r1, r5, r1
 8004aa8:	fb91 f1f0 	sdiv	r1, r1, r0
 8004aac:	fb94 f0f0 	sdiv	r0, r4, r0
 8004ab0:	4449      	add	r1, r9
 8004ab2:	4440      	add	r0, r8
 8004ab4:	b289      	uxth	r1, r1
 8004ab6:	b280      	uxth	r0, r0
 8004ab8:	f001 fd1e 	bl	80064f8 <TM_LCD_SetXY>

    /* Put string to LCD */
    TM_LCD_SetColors(textcolor,fill_color);
 8004abc:	4659      	mov	r1, fp
 8004abe:	9803      	ldr	r0, [sp, #12]
 8004ac0:	f001 fd30 	bl	8006524 <TM_LCD_SetColors>
    TM_LCD_Puts(text);
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	f001 fd87 	bl	80065d8 <TM_LCD_Puts>


    TM_LCD_SetColors(colormemory,bkcolormemory);
 8004aca:	2100      	movs	r1, #0
 8004acc:	f64f 70e0 	movw	r0, #65504	; 0xffe0
	//GUI_SetBkColor(bkcolormemory);
	//GUI_SetColor(colormemory);

}
 8004ad0:	b005      	add	sp, #20
 8004ad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Put string to LCD */
    TM_LCD_SetColors(textcolor,fill_color);
    TM_LCD_Puts(text);


    TM_LCD_SetColors(colormemory,bkcolormemory);
 8004ad6:	f001 bd25 	b.w	8006524 <TM_LCD_SetColors>
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010
 8004ae0:	200046f0 	.word	0x200046f0

08004ae4 <Draw_button_struct>:
	Button->ReleaseAction=ReleaseAction;
	Button->TS=TS;
	strcpy(Button->text,text);
}

void Draw_button_struct(GUI_BUTTON* bt){
 8004ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	TM_TOUCH_t* TS;

	TS=bt->TS;
 8004ae8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c

	bt->touchstatus=0;
 8004aea:	2500      	movs	r5, #0
	Button->ReleaseAction=ReleaseAction;
	Button->TS=TS;
	strcpy(Button->text,text);
}

void Draw_button_struct(GUI_BUTTON* bt){
 8004aec:	b085      	sub	sp, #20
 8004aee:	4604      	mov	r4, r0
	TM_TOUCH_t* TS;

	TS=bt->TS;

	bt->touchstatus=0;
 8004af0:	6245      	str	r5, [r0, #36]	; 0x24
	if (TS->NumPresses) {
 8004af2:	783b      	ldrb	r3, [r7, #0]
 8004af4:	b943      	cbnz	r3, 8004b08 <Draw_button_struct+0x24>
		}

	}

	/* Draw Button */
	if(bt->touchstatus){
 8004af6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004af8:	f104 0310 	add.w	r3, r4, #16
 8004afc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004afe:	b329      	cbz	r1, 8004b4c <Draw_button_struct+0x68>
		Draw_button(bt->x,bt->y,bt->w,bt->h,bt->text,bt->Contour_color,bt->Touched_fill_color,bt->Touched_text_color);
 8004b00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b02:	9103      	str	r1, [sp, #12]
 8004b04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b06:	e024      	b.n	8004b52 <Draw_button_struct+0x6e>
 8004b08:	46b8      	mov	r8, r7
		    int ytouch;

		    xtouch=TM_LCD_GetWidth()-TS->X[i];
		    ytouch=TM_LCD_GetHeight()-TS->Y[i];
		    if((xtouch>(bt->x))&&(xtouch<((bt->x)+(bt->w)))&&(ytouch>(bt->y))&&(ytouch<((bt->y)+(bt->h)))){
		    	bt->touchstatus=1;
 8004b0a:	f04f 0901 	mov.w	r9, #1

	bt->touchstatus=0;
	if (TS->NumPresses) {
		int i;
		/* Go through all presses on LCD */
		for (i = 0; i < TS->NumPresses; i++) {
 8004b0e:	783b      	ldrb	r3, [r7, #0]
 8004b10:	429d      	cmp	r5, r3
 8004b12:	daf0      	bge.n	8004af6 <Draw_button_struct+0x12>
			/* Draw circle */
		    int xtouch;
		    int ytouch;

		    xtouch=TM_LCD_GetWidth()-TS->X[i];
 8004b14:	f001 fefe 	bl	8006914 <TM_LCD_GetWidth>
 8004b18:	f838 6f02 	ldrh.w	r6, [r8, #2]!
 8004b1c:	1b86      	subs	r6, r0, r6
		    ytouch=TM_LCD_GetHeight()-TS->Y[i];
 8004b1e:	f001 feff 	bl	8006920 <TM_LCD_GetHeight>
		    if((xtouch>(bt->x))&&(xtouch<((bt->x)+(bt->w)))&&(ytouch>(bt->y))&&(ytouch<((bt->y)+(bt->h)))){
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	4296      	cmp	r6, r2
 8004b26:	dd0f      	ble.n	8004b48 <Draw_button_struct+0x64>
 8004b28:	68a3      	ldr	r3, [r4, #8]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	429e      	cmp	r6, r3
 8004b2e:	da0b      	bge.n	8004b48 <Draw_button_struct+0x64>
			/* Draw circle */
		    int xtouch;
		    int ytouch;

		    xtouch=TM_LCD_GetWidth()-TS->X[i];
		    ytouch=TM_LCD_GetHeight()-TS->Y[i];
 8004b30:	f8b8 3014 	ldrh.w	r3, [r8, #20]
		    if((xtouch>(bt->x))&&(xtouch<((bt->x)+(bt->w)))&&(ytouch>(bt->y))&&(ytouch<((bt->y)+(bt->h)))){
 8004b34:	6862      	ldr	r2, [r4, #4]
			/* Draw circle */
		    int xtouch;
		    int ytouch;

		    xtouch=TM_LCD_GetWidth()-TS->X[i];
		    ytouch=TM_LCD_GetHeight()-TS->Y[i];
 8004b36:	1ac0      	subs	r0, r0, r3
		    if((xtouch>(bt->x))&&(xtouch<((bt->x)+(bt->w)))&&(ytouch>(bt->y))&&(ytouch<((bt->y)+(bt->h)))){
 8004b38:	4290      	cmp	r0, r2
 8004b3a:	dd05      	ble.n	8004b48 <Draw_button_struct+0x64>
 8004b3c:	68e3      	ldr	r3, [r4, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	4298      	cmp	r0, r3
		    	bt->touchstatus=1;
 8004b42:	bfb8      	it	lt
 8004b44:	f8c4 9024 	strlt.w	r9, [r4, #36]	; 0x24

	bt->touchstatus=0;
	if (TS->NumPresses) {
		int i;
		/* Go through all presses on LCD */
		for (i = 0; i < TS->NumPresses; i++) {
 8004b48:	3501      	adds	r5, #1
 8004b4a:	e7e0      	b.n	8004b0e <Draw_button_struct+0x2a>

	/* Draw Button */
	if(bt->touchstatus){
		Draw_button(bt->x,bt->y,bt->w,bt->h,bt->text,bt->Contour_color,bt->Touched_fill_color,bt->Touched_text_color);
	}else{
		Draw_button(bt->x,bt->y,bt->w,bt->h,bt->text,bt->Contour_color,bt->Filled_color,bt->text_color);
 8004b4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b4e:	9103      	str	r1, [sp, #12]
 8004b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b52:	9102      	str	r1, [sp, #8]
 8004b54:	9201      	str	r2, [sp, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004b5c:	f7ff ff6a 	bl	8004a34 <Draw_button>
	}

	/* Do actions */
	if(bt->touchstatus && !(bt->touchstatus_mem) && bt->TouchAction!=NULL){
 8004b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b62:	b123      	cbz	r3, 8004b6e <Draw_button_struct+0x8a>
 8004b64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b66:	b913      	cbnz	r3, 8004b6e <Draw_button_struct+0x8a>
 8004b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b6a:	b103      	cbz	r3, 8004b6e <Draw_button_struct+0x8a>
		bt->TouchAction();
 8004b6c:	4798      	blx	r3
	}

	if(!(bt->touchstatus) && bt->touchstatus_mem && bt->ReleaseAction!=NULL){
 8004b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b70:	b923      	cbnz	r3, 8004b7c <Draw_button_struct+0x98>
 8004b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b74:	b113      	cbz	r3, 8004b7c <Draw_button_struct+0x98>
 8004b76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004b78:	b103      	cbz	r3, 8004b7c <Draw_button_struct+0x98>
		bt->ReleaseAction();
 8004b7a:	4798      	blx	r3
	}
	bt->touchstatus_mem=bt->touchstatus;
 8004b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b7e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004b80:	b005      	add	sp, #20
 8004b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004b86 <Draw_led_struct>:
#include "defines.h"
#include "tm_stm32_disco.h"
#include "tm_stm32_delay.h"
#include "tm_stm32_lcd.h"

void Draw_led_struct(GUI_LED* led){
 8004b86:	b570      	push	{r4, r5, r6, lr}

	//TM_LCD_SetColors(led->Contour_color,LCD_COLOR_BLACK);
	//GUI_SetColor(led->Contour_color);
	TM_LCD_DrawFilledCircle(led->x,led->y,(led->d)/2,led->Contour_color);
 8004b88:	6882      	ldr	r2, [r0, #8]
 8004b8a:	2502      	movs	r5, #2
#include "defines.h"
#include "tm_stm32_disco.h"
#include "tm_stm32_delay.h"
#include "tm_stm32_lcd.h"

void Draw_led_struct(GUI_LED* led){
 8004b8c:	4604      	mov	r4, r0

	//TM_LCD_SetColors(led->Contour_color,LCD_COLOR_BLACK);
	//GUI_SetColor(led->Contour_color);
	TM_LCD_DrawFilledCircle(led->x,led->y,(led->d)/2,led->Contour_color);
 8004b8e:	68c3      	ldr	r3, [r0, #12]
 8004b90:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8004b94:	f9b0 0000 	ldrsh.w	r0, [r0]
 8004b98:	fb92 f2f5 	sdiv	r2, r2, r5
 8004b9c:	b212      	sxth	r2, r2
 8004b9e:	f001 feb0 	bl	8006902 <TM_LCD_DrawFilledCircle>
	//GUI_FillCircle(led->x,led->y,(led->d)/2);
	//GUI_SetColor(led->Fill_color);
	//GUI_FillCircle(led->x,led->y,(led->d-2)/2);
	TM_LCD_DrawFilledCircle(led->x,led->y,(led->d-2)/2,led->Fill_color);
 8004ba2:	68a2      	ldr	r2, [r4, #8]
 8004ba4:	6923      	ldr	r3, [r4, #16]
 8004ba6:	3a02      	subs	r2, #2
 8004ba8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8004bac:	f9b4 0000 	ldrsh.w	r0, [r4]
 8004bb0:	fb92 f2f5 	sdiv	r2, r2, r5
}
 8004bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//GUI_SetColor(led->Contour_color);
	TM_LCD_DrawFilledCircle(led->x,led->y,(led->d)/2,led->Contour_color);
	//GUI_FillCircle(led->x,led->y,(led->d)/2);
	//GUI_SetColor(led->Fill_color);
	//GUI_FillCircle(led->x,led->y,(led->d-2)/2);
	TM_LCD_DrawFilledCircle(led->x,led->y,(led->d-2)/2,led->Fill_color);
 8004bb8:	b212      	sxth	r2, r2
 8004bba:	f001 bea2 	b.w	8006902 <TM_LCD_DrawFilledCircle>

08004bbe <GUI_LED_INIT>:

void GUI_LED_INIT(GUI_LED* led,int x,int y,int d,uint32_t Contour_color,uint32_t Fill_color){

	led->x=x;
	led->y=y;
	led->d=d;
 8004bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	led->Contour_color=Contour_color;
 8004bc2:	9b00      	ldr	r3, [sp, #0]
 8004bc4:	60c3      	str	r3, [r0, #12]
	led->Fill_color=Fill_color;
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	6103      	str	r3, [r0, #16]
 8004bca:	4770      	bx	lr

08004bcc <StartGuiTask>:

}

/* USER CODE BEGIN 4 */
void StartGuiTask(void const * argument)
{
 8004bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  	  /* Infinite loop */
  	  for(;;)
  	  {
  	    //vTaskDelayUntil(&xLastWakeTime,25);
  		vTaskDelayUntil(&xLastWakeTime,25);
  	    xSemaphoreTake(xSemaphoreGraphData,100);
 8004bce:	4d0d      	ldr	r5, [pc, #52]	; (8004c04 <StartGuiTask+0x38>)
{
	TickType_t xLastWakeTime;
	//xSemaphore = xSemaphoreCreateMutex();

	InitGui();
	xLastWakeTime = xTaskGetTickCount();
 8004bd0:	ac02      	add	r4, sp, #8
void StartGuiTask(void const * argument)
{
	TickType_t xLastWakeTime;
	//xSemaphore = xSemaphoreCreateMutex();

	InitGui();
 8004bd2:	f7ff fc1f 	bl	8004414 <InitGui>
	xLastWakeTime = xTaskGetTickCount();
 8004bd6:	f7ff f84d 	bl	8003c74 <xTaskGetTickCount>
 8004bda:	f844 0d04 	str.w	r0, [r4, #-4]!

  	  /* Infinite loop */
  	  for(;;)
  	  {
  	    //vTaskDelayUntil(&xLastWakeTime,25);
  		vTaskDelayUntil(&xLastWakeTime,25);
 8004bde:	4620      	mov	r0, r4
 8004be0:	2119      	movs	r1, #25
 8004be2:	f7ff f961 	bl	8003ea8 <vTaskDelayUntil>
  	    xSemaphoreTake(xSemaphoreGraphData,100);
 8004be6:	2300      	movs	r3, #0
 8004be8:	2264      	movs	r2, #100	; 0x64
 8004bea:	6828      	ldr	r0, [r5, #0]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7fe fe03 	bl	80037f8 <xQueueGenericReceive>
  		GuiLoop();
 8004bf2:	f7ff fed7 	bl	80049a4 <GuiLoop>
  		xSemaphoreGive(xSemaphoreGraphData);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6828      	ldr	r0, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f7fe fd41 	bl	8003684 <xQueueGenericSend>
 8004c02:	e7ec      	b.n	8004bde <StartGuiTask+0x12>
 8004c04:	20004ad8 	.word	0x20004ad8

08004c08 <StartControlTask>:
  		//GUI_Delay(25);
  	  }

  }

void StartControlTask(void const * argument){
 8004c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  {

    vTaskDelayUntil(&xLastWakeTime,1);

    //mS counter
    G_mSCounter++;
 8004c0a:	4d25      	ldr	r5, [pc, #148]	; (8004ca0 <StartControlTask+0x98>)

  }

void StartControlTask(void const * argument){
	TickType_t xLastWakeTime;
	int GraphSampleCounter=0;
 8004c0c:	2400      	movs	r4, #0
    vTaskDelayUntil(&xLastWakeTime,1);

    //mS counter
    G_mSCounter++;
    //if(G_mSCounter>=4294967295){ // 4294967295 mS = 4294967.295 S = 71582.78825 min = 1193.0465 h = 49.71 jours
    if(G_mSCounter>=4000000000){
 8004c0e:	4e25      	ldr	r6, [pc, #148]	; (8004ca4 <StartControlTask+0x9c>)
	int GraphSampleCounter=0;
	int temp=0;
	int add=1;

	//InitGui();
	xLastWakeTime = xTaskGetTickCount();
 8004c10:	f7ff f830 	bl	8003c74 <xTaskGetTickCount>
 8004c14:	462f      	mov	r7, r5
 8004c16:	9001      	str	r0, [sp, #4]
  /* Infinite loop */
  for(;;)
  {

    vTaskDelayUntil(&xLastWakeTime,1);
 8004c18:	2101      	movs	r1, #1
 8004c1a:	a801      	add	r0, sp, #4
 8004c1c:	f7ff f944 	bl	8003ea8 <vTaskDelayUntil>

    //mS counter
    G_mSCounter++;
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	3301      	adds	r3, #1
    //if(G_mSCounter>=4294967295){ // 4294967295 mS = 4294967.295 S = 71582.78825 min = 1193.0465 h = 49.71 jours
    if(G_mSCounter>=4000000000){
 8004c24:	42b3      	cmp	r3, r6
    	G_mSCounter=0;
 8004c26:	bf88      	it	hi
 8004c28:	2300      	movhi	r3, #0
 8004c2a:	602b      	str	r3, [r5, #0]
    }

    //S counter
    if(G_mSCounter%1000==0){
 8004c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	fbb1 f2f3 	udiv	r2, r1, r3
 8004c36:	fb03 1312 	mls	r3, r3, r2, r1
 8004c3a:	b933      	cbnz	r3, 8004c4a <StartControlTask+0x42>
		G_SecondCounter++;
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <StartControlTask+0xa0>)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	bf08      	it	eq
 8004c46:	2300      	moveq	r3, #0
 8004c48:	6013      	str	r3, [r2, #0]
			G_SecondCounter=0;
		}
    }

    //INPUTS
    GraphSampleCounter++;
 8004c4a:	3401      	adds	r4, #1
        if(GraphSampleCounter>=100){
 8004c4c:	2c63      	cmp	r4, #99	; 0x63
 8004c4e:	dd0d      	ble.n	8004c6c <StartControlTask+0x64>
        		    	add=0;
        		    }
        		    if(temp<=0){
        		    	add=1;
        		    }
        		    xSemaphoreTake(xSemaphoreGraphData,100);
 8004c50:	4c16      	ldr	r4, [pc, #88]	; (8004cac <StartControlTask+0xa4>)
 8004c52:	2300      	movs	r3, #0
 8004c54:	2264      	movs	r2, #100	; 0x64
 8004c56:	4619      	mov	r1, r3
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	f7fe fdcd 	bl	80037f8 <xQueueGenericReceive>
        		    //UpdateGraph(temp);
        		    //G_temperature=temp;
        		    xSemaphoreGive(xSemaphoreGraphData);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6820      	ldr	r0, [r4, #0]
    }

    //INPUTS
    GraphSampleCounter++;
        if(GraphSampleCounter>=100){
        	GraphSampleCounter=0;
 8004c62:	2400      	movs	r4, #0
        		    	add=1;
        		    }
        		    xSemaphoreTake(xSemaphoreGraphData,100);
        		    //UpdateGraph(temp);
        		    //G_temperature=temp;
        		    xSemaphoreGive(xSemaphoreGraphData);
 8004c64:	461a      	mov	r2, r3
 8004c66:	4619      	mov	r1, r3
 8004c68:	f7fe fd0c 	bl	8003684 <xQueueGenericSend>
        }


    // OUTPUTS
    //PWM emulation
    if(G_pwm_output_status){
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <StartControlTask+0xa8>)
 8004c6e:	4911      	ldr	r1, [pc, #68]	; (8004cb4 <StartControlTask+0xac>)
 8004c70:	881a      	ldrh	r2, [r3, #0]
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <StartControlTask+0xb0>)
 8004c74:	b18a      	cbz	r2, 8004c9a <StartControlTask+0x92>
        G_PWMCounter++;
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	3201      	adds	r2, #1
        //Period limit
        if(G_PWMCounter>=PWM_PERIOD){
 8004c7a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
        	G_PWMCounter=0;
 8004c7e:	bf28      	it	cs
 8004c80:	2200      	movcs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
        }

        //Duty Cycle
        if(G_PWMCounter>=G_pwm_pct_value*PWM_PERIOD/100){
 8004c84:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <StartControlTask+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	8810      	ldrh	r0, [r2, #0]
 8004c8a:	2214      	movs	r2, #20
 8004c8c:	4342      	muls	r2, r0
 8004c8e:	429a      	cmp	r2, r3
        	G_pwm_output=0;
 8004c90:	bf94      	ite	ls
 8004c92:	2300      	movls	r3, #0
        }else{
        	G_pwm_output=1;
 8004c94:	2301      	movhi	r3, #1
 8004c96:	800b      	strh	r3, [r1, #0]
 8004c98:	e7be      	b.n	8004c18 <StartControlTask+0x10>
        }
    }else{
    	//When PWM is Turned off reset the counter
    	G_pwm_output=0;
 8004c9a:	800a      	strh	r2, [r1, #0]
    	G_PWMCounter=0;
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e7bb      	b.n	8004c18 <StartControlTask+0x10>
 8004ca0:	20004404 	.word	0x20004404
 8004ca4:	ee6b27ff 	.word	0xee6b27ff
 8004ca8:	20004408 	.word	0x20004408
 8004cac:	20004ad8 	.word	0x20004ad8
 8004cb0:	2000440c 	.word	0x2000440c
 8004cb4:	20004400 	.word	0x20004400
 8004cb8:	200043f8 	.word	0x200043f8
 8004cbc:	20004402 	.word	0x20004402

08004cc0 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8004cc0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f7fe f95a 	bl	8002f7c <osDelay>
 8004cc8:	e7fb      	b.n	8004cc2 <StartDefaultTask+0x2>
	...

08004ccc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <SystemClock_Config+0xbc>)
 8004cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004cd4:	b570      	push	{r4, r5, r6, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8004cd8:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cdc:	2402      	movs	r4, #2

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cde:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <SystemClock_Config+0xc0>)

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ce0:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 10;
  RCC_OscInitStruct.PLL.PLLN = 210;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ce6:	a807      	add	r0, sp, #28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cec:	6813      	ldr	r3, [r2, #0]
 8004cee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	6813      	ldr	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cfa:	9407      	str	r4, [sp, #28]

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d00:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d02:	940d      	str	r4, [sp, #52]	; 0x34

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004d08:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 10;
  RCC_OscInitStruct.PLL.PLLN = 210;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d0a:	9411      	str	r4, [sp, #68]	; 0x44

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004d0c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d0e:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLM = 10;
  RCC_OscInitStruct.PLL.PLLN = 210;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004d10:	9412      	str	r4, [sp, #72]	; 0x48
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d12:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 10;
 8004d14:	230a      	movs	r3, #10
 8004d16:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 210;
 8004d18:	23d2      	movs	r3, #210	; 0xd2
 8004d1a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d1c:	f7fd f858 	bl	8001dd0 <HAL_RCC_OscConfig>
 8004d20:	b100      	cbz	r0, 8004d24 <SystemClock_Config+0x58>
 8004d22:	e7fe      	b.n	8004d22 <SystemClock_Config+0x56>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d28:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d2a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d2c:	2105      	movs	r1, #5
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d2e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d34:	a802      	add	r0, sp, #8
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d36:	9502      	str	r5, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d38:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d3a:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d3c:	f7fd fa30 	bl	80021a0 <HAL_RCC_ClockConfig>
 8004d40:	b100      	cbz	r0, 8004d44 <SystemClock_Config+0x78>
 8004d42:	e7fe      	b.n	8004d42 <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004d44:	2308      	movs	r3, #8
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8004d46:	901b      	str	r0, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004d48:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d4a:	a813      	add	r0, sp, #76	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004d4c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004d4e:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004d50:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004d52:	9419      	str	r4, [sp, #100]	; 0x64
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004d54:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004d56:	961d      	str	r6, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d58:	f7fd fb08 	bl	800236c <HAL_RCCEx_PeriphCLKConfig>
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	b100      	cbz	r0, 8004d62 <SystemClock_Config+0x96>
 8004d60:	e7fe      	b.n	8004d60 <SystemClock_Config+0x94>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004d62:	f7fd fac7 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8004d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d6e:	f7fc f925 	bl	8000fbc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004d72:	2004      	movs	r0, #4
 8004d74:	f7fc f938 	bl	8000fe8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	f7fc f8d8 	bl	8000f34 <HAL_NVIC_SetPriority>
}
 8004d84:	b034      	add	sp, #208	; 0xd0
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000

08004d90 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	b090      	sub	sp, #64	; 0x40
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004d94:	4c19      	ldr	r4, [pc, #100]	; (8004dfc <main+0x6c>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d96:	f7fc f8af 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d9a:	f7ff ff97 	bl	8004ccc <SystemClock_Config>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  	  xSemaphoreGraphData= xSemaphoreCreateBinary();//xSemaphoreCreateMutex();
 8004d9e:	2203      	movs	r2, #3
 8004da0:	2100      	movs	r1, #0
 8004da2:	2001      	movs	r0, #1
 8004da4:	f7fe fc4a 	bl	800363c <xQueueGenericCreate>
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <main+0x70>)
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004daa:	ae01      	add	r6, sp, #4
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  	  xSemaphoreGraphData= xSemaphoreCreateBinary();//xSemaphoreCreateMutex();
 8004dac:	6018      	str	r0, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004db0:	4625      	mov	r5, r4
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GuiTask, StartGuiTask, osPriorityLow, 1, 1024);
  GuiTaskHandle = osThreadCreate(osThread(GuiTask), NULL);

  osThreadDef(ControlTask, StartControlTask, osPriorityHigh, 1, 1024);
 8004db2:	3418      	adds	r4, #24
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004db4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004db6:	f855 3b04 	ldr.w	r3, [r5], #4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004dba:	2100      	movs	r1, #0
 8004dbc:	a801      	add	r0, sp, #4
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004dbe:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004dc0:	f7fe f8c4 	bl	8002f4c <osThreadCreate>
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <main+0x74>)

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GuiTask, StartGuiTask, osPriorityLow, 1, 1024);
 8004dc6:	ae06      	add	r6, sp, #24
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004dc8:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GuiTask, StartGuiTask, osPriorityLow, 1, 1024);
 8004dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dcc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004dce:	682b      	ldr	r3, [r5, #0]
  GuiTaskHandle = osThreadCreate(osThread(GuiTask), NULL);
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	a806      	add	r0, sp, #24

  osThreadDef(ControlTask, StartControlTask, osPriorityHigh, 1, 1024);
 8004dd4:	ad0b      	add	r5, sp, #44	; 0x2c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GuiTask, StartGuiTask, osPriorityLow, 1, 1024);
 8004dd6:	6033      	str	r3, [r6, #0]
  GuiTaskHandle = osThreadCreate(osThread(GuiTask), NULL);
 8004dd8:	f7fe f8b8 	bl	8002f4c <osThreadCreate>
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <main+0x78>)
 8004dde:	6018      	str	r0, [r3, #0]

  osThreadDef(ControlTask, StartControlTask, osPriorityHigh, 1, 1024);
 8004de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de4:	6823      	ldr	r3, [r4, #0]
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 8004de6:	2100      	movs	r1, #0
 8004de8:	a80b      	add	r0, sp, #44	; 0x2c
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(GuiTask, StartGuiTask, osPriorityLow, 1, 1024);
  GuiTaskHandle = osThreadCreate(osThread(GuiTask), NULL);

  osThreadDef(ControlTask, StartControlTask, osPriorityHigh, 1, 1024);
 8004dea:	602b      	str	r3, [r5, #0]
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 8004dec:	f7fe f8ae 	bl	8002f4c <osThreadCreate>
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <main+0x7c>)
 8004df2:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8004df4:	f7fe f8a5 	bl	8002f42 <osKernelStart>
 8004df8:	e7fe      	b.n	8004df8 <main+0x68>
 8004dfa:	bf00      	nop
 8004dfc:	08009ae8 	.word	0x08009ae8
 8004e00:	20004ad8 	.word	0x20004ad8
 8004e04:	20004ad0 	.word	0x20004ad0
 8004e08:	20004ad4 	.word	0x20004ad4
 8004e0c:	20004bf8 	.word	0x20004bf8

08004e10 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004e10:	6802      	ldr	r2, [r0, #0]
 8004e12:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d101      	bne.n	8004e1c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004e18:	f000 b974 	b.w	8005104 <HAL_IncTick>
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40002000 	.word	0x40002000

08004e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e26:	2003      	movs	r0, #3
 8004e28:	f7fc f872 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f06f 000b 	mvn.w	r0, #11
 8004e32:	4611      	mov	r1, r2
 8004e34:	f7fc f87e 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f06f 000a 	mvn.w	r0, #10
 8004e3e:	4611      	mov	r1, r2
 8004e40:	f7fc f878 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004e44:	2200      	movs	r2, #0
 8004e46:	f06f 0009 	mvn.w	r0, #9
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	f7fc f872 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004e50:	2200      	movs	r2, #0
 8004e52:	f06f 0004 	mvn.w	r0, #4
 8004e56:	4611      	mov	r1, r2
 8004e58:	f7fc f86c 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f06f 0003 	mvn.w	r0, #3
 8004e62:	4611      	mov	r1, r2
 8004e64:	f7fc f866 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	210f      	movs	r1, #15
 8004e6c:	f06f 0001 	mvn.w	r0, #1
 8004e70:	f7fc f860 	bl	8000f34 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004e74:	2200      	movs	r2, #0
 8004e76:	210f      	movs	r1, #15
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8004e80:	f7fc b858 	b.w	8000f34 <HAL_NVIC_SetPriority>

08004e84 <HAL_DMA2D_MspInit>:
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 8004e84:	6802      	ldr	r2, [r0, #0]

  /* USER CODE END MspInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004e86:	b082      	sub	sp, #8

  if(hdma2d->Instance==DMA2D)
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_DMA2D_MspInit+0x24>)
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10a      	bne.n	8004ea4 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004e8e:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8004e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004ea4:	b002      	add	sp, #8
 8004ea6:	4770      	bx	lr
 8004ea8:	4002b000 	.word	0x4002b000

08004eac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8004eac:	6802      	ldr	r2, [r0, #0]
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_LTDC_MspInit+0x98>)
 8004eb0:	429a      	cmp	r2, r3
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8004eb6:	d143      	bne.n	8004f40 <HAL_LTDC_MspInit+0x94>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004eb8:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2400      	movs	r4, #0
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ec0:	260e      	movs	r6, #14
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004ec4:	a901      	add	r1, sp, #4
 8004ec6:	4820      	ldr	r0, [pc, #128]	; (8004f48 <HAL_LTDC_MspInit+0x9c>)
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ec8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	9502      	str	r5, [sp, #8]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004ed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed8:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	9b00      	ldr	r3, [sp, #0]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004ede:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ee0:	9605      	str	r6, [sp, #20]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004ee2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004ee4:	f7fc fa02 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8004ee8:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004eec:	a901      	add	r1, sp, #4
 8004eee:	4817      	ldr	r0, [pc, #92]	; (8004f4c <HAL_LTDC_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8004ef0:	9301      	str	r3, [sp, #4]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ef8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004efa:	f7fc f9f7 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8004efe:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004f00:	a901      	add	r1, sp, #4
 8004f02:	4813      	ldr	r0, [pc, #76]	; (8004f50 <HAL_LTDC_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8004f04:	9301      	str	r3, [sp, #4]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f06:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f0c:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004f0e:	f7fc f9ed 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004f16:	a901      	add	r1, sp, #4
 8004f18:	480e      	ldr	r0, [pc, #56]	; (8004f54 <HAL_LTDC_MspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004f1a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f1c:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004f20:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f24:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004f26:	f7fc f9e1 	bl	80012ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004f2a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f2e:	a901      	add	r1, sp, #4
 8004f30:	4809      	ldr	r0, [pc, #36]	; (8004f58 <HAL_LTDC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004f32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f36:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f38:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004f3a:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004f3c:	f7fc f9d6 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004f40:	b006      	add	sp, #24
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	40016800 	.word	0x40016800
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40022400 	.word	0x40022400
 8004f50:	40022800 	.word	0x40022800
 8004f54:	40021800 	.word	0x40021800
 8004f58:	40022000 	.word	0x40022000

08004f5c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8004f60:	681c      	ldr	r4, [r3, #0]
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004f62:	b087      	sub	sp, #28
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	d14e      	bne.n	8005006 <HAL_SDRAM_MspInit+0xaa>
    return;
  }
  FMC_Initialized = 1;
 8004f68:	2201      	movs	r2, #1
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6a:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6c:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f6e:	250c      	movs	r5, #12
  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
 8004f70:	601a      	str	r2, [r3, #0]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f72:	a901      	add	r1, sp, #4
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_SDRAM_MspInit+0xb4>)
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f76:	4827      	ldr	r0, [pc, #156]	; (8005014 <HAL_SDRAM_MspInit+0xb8>)
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f82:	9702      	str	r7, [sp, #8]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004f84:	f003 0301 	and.w	r3, r3, #1
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f88:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8a:	9604      	str	r6, [sp, #16]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8004f90:	f64f 7383 	movw	r3, #65411	; 0xff83
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f94:	9505      	str	r5, [sp, #20]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8004f96:	9301      	str	r3, [sp, #4]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f98:	f7fc f9a8 	bl	80012ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8004f9c:	f248 1333 	movw	r3, #33075	; 0x8133
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004fa0:	a901      	add	r1, sp, #4
 8004fa2:	481d      	ldr	r0, [pc, #116]	; (8005018 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8004fa4:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004faa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004fac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004fae:	f7fc f99d 	bl	80012ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8004fb2:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb6:	a901      	add	r1, sp, #4
 8004fb8:	4818      	ldr	r0, [pc, #96]	; (800501c <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8004fba:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbc:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbe:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004fc2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc4:	f7fc f992 	bl	80012ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8004fc8:	f64f 033f 	movw	r3, #63551	; 0xf83f
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fcc:	a901      	add	r1, sp, #4
 8004fce:	4814      	ldr	r0, [pc, #80]	; (8005020 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8004fd0:	9301      	str	r3, [sp, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004fd8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fda:	f7fc f987 	bl	80012ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004fde:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fe0:	a901      	add	r1, sp, #4
 8004fe2:	4810      	ldr	r0, [pc, #64]	; (8005024 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004fe4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fea:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004fec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fee:	f7fc f97d 	bl	80012ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004ff2:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004ff4:	a901      	add	r1, sp, #4
 8004ff6:	480c      	ldr	r0, [pc, #48]	; (8005028 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004ff8:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ffe:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005000:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005002:	f7fc f973 	bl	80012ec <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005006:	b007      	add	sp, #28
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500a:	bf00      	nop
 800500c:	20004410 	.word	0x20004410
 8005010:	40023800 	.word	0x40023800
 8005014:	40021000 	.word	0x40021000
 8005018:	40021800 	.word	0x40021800
 800501c:	40020c00 	.word	0x40020c00
 8005020:	40021400 	.word	0x40021400
 8005024:	40021c00 	.word	0x40021c00
 8005028:	40020800 	.word	0x40020800

0800502c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800502c:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 800502e:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005030:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8005032:	2200      	movs	r2, #0
 8005034:	202d      	movs	r0, #45	; 0x2d
 8005036:	f7fb ff7d 	bl	8000f34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800503a:	202d      	movs	r0, #45	; 0x2d
 800503c:	f7fb ffb2 	bl	8000fa4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005042:	a901      	add	r1, sp, #4
 8005044:	a803      	add	r0, sp, #12
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8005048:	4c13      	ldr	r4, [pc, #76]	; (8005098 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800504a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	9302      	str	r3, [sp, #8]
 8005058:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800505a:	f7fd f969 	bl	8002330 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800505e:	f7fd f94f 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_InitTick+0x70>)
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
  htim14.Init.Prescaler = uwPrescalerValue;
 8005064:	0040      	lsls	r0, r0, #1
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8005066:	6023      	str	r3, [r4, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8005068:	f240 33e7 	movw	r3, #999	; 0x3e7
 800506c:	60e3      	str	r3, [r4, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800506e:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <HAL_InitTick+0x74>)
 8005070:	fbb0 f0f3 	udiv	r0, r0, r3
 8005074:	3801      	subs	r0, #1
  htim14.Init.ClockDivision = 0;
 8005076:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
  htim14.Init.Prescaler = uwPrescalerValue;
 8005078:	6060      	str	r0, [r4, #4]
  htim14.Init.ClockDivision = 0;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800507a:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
  htim14.Init.Prescaler = uwPrescalerValue;
  htim14.Init.ClockDivision = 0;
 800507c:	6123      	str	r3, [r4, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800507e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8005080:	f7fd fe8a 	bl	8002d98 <HAL_TIM_Base_Init>
 8005084:	b918      	cbnz	r0, 800508e <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8005086:	4620      	mov	r0, r4
 8005088:	f7fd fd60 	bl	8002b4c <HAL_TIM_Base_Start_IT>
 800508c:	e000      	b.n	8005090 <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800508e:	2001      	movs	r0, #1
}
 8005090:	b008      	add	sp, #32
 8005092:	bd10      	pop	{r4, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	20004bfc 	.word	0x20004bfc
 800509c:	40002000 	.word	0x40002000
 80050a0:	000f4240 	.word	0x000f4240

080050a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80050a4:	f7fd bf72 	b.w	8002f8c <osSystickHandler>

080050a8 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 80050aa:	f7fd bd5e 	b.w	8002b6a <HAL_TIM_IRQHandler>
 80050ae:	bf00      	nop
 80050b0:	20004bfc 	.word	0x20004bfc

080050b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050b4:	490f      	ldr	r1, [pc, #60]	; (80050f4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050b6:	2000      	movs	r0, #0
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050b8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <SystemInit+0x44>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	f042 0201 	orr.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80050d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <SystemInit+0x48>)
 80050de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ee:	608b      	str	r3, [r1, #8]
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	e000ed00 	.word	0xe000ed00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	24003010 	.word	0x24003010

08005100 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8005100:	4770      	bx	lr
	...

08005104 <HAL_IncTick>:
/* Called from Systick handler */
void HAL_IncTick(void) {
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_IncTick+0x64>)
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8005106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <HAL_IncTick+0x68>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	b112      	cbz	r2, 800511a <HAL_IncTick+0x16>
		TM_Time2--;
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	3a01      	subs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800511a:	4e15      	ldr	r6, [pc, #84]	; (8005170 <HAL_IncTick+0x6c>)
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 800511c:	2500      	movs	r5, #0
 800511e:	4637      	mov	r7, r6
		TM_Time2--;
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8005120:	7833      	ldrb	r3, [r6, #0]
 8005122:	b2ec      	uxtb	r4, r5
 8005124:	42a3      	cmp	r3, r4
 8005126:	d91c      	bls.n	8005162 <HAL_IncTick+0x5e>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8005128:	00a4      	lsls	r4, r4, #2
 800512a:	1933      	adds	r3, r6, r4
 800512c:	6858      	ldr	r0, [r3, #4]
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
		/* Check if timer is enabled */
		if (
 800512e:	b1b0      	cbz	r0, 800515e <HAL_IncTick+0x5a>
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8005130:	7803      	ldrb	r3, [r0, #0]
 8005132:	079b      	lsls	r3, r3, #30
 8005134:	d513      	bpl.n	800515e <HAL_IncTick+0x5a>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8005136:	6883      	ldr	r3, [r0, #8]
 8005138:	b10b      	cbz	r3, 800513e <HAL_IncTick+0x3a>
				CustomTimers.Timers[i]->CNT--;
 800513a:	3b01      	subs	r3, #1
 800513c:	6083      	str	r3, [r0, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800513e:	6883      	ldr	r3, [r0, #8]
 8005140:	b96b      	cbnz	r3, 800515e <HAL_IncTick+0x5a>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8005142:	443c      	add	r4, r7
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8005144:	68c3      	ldr	r3, [r0, #12]
 8005146:	6901      	ldr	r1, [r0, #16]
 8005148:	4798      	blx	r3

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	6853      	ldr	r3, [r2, #4]
 800514e:	6093      	str	r3, [r2, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8005150:	7813      	ldrb	r3, [r2, #0]
 8005152:	f013 0101 	ands.w	r1, r3, #1
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8005156:	bf04      	itt	eq
 8005158:	f361 0341 	bfieq	r3, r1, #1, #1
 800515c:	7013      	strbeq	r3, [r2, #0]
 800515e:	3501      	adds	r5, #1
 8005160:	e7de      	b.n	8005120 <HAL_IncTick+0x1c>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8005162:	f7ff ffcd 	bl	8005100 <TM_DELAY_1msHandler>
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005168:	2000442c 	.word	0x2000442c
 800516c:	20004430 	.word	0x20004430
 8005170:	20004414 	.word	0x20004414

08005174 <HAL_GetTick>:
	}
}

uint32_t HAL_GetTick(void) {
	/* Return current time in milliseconds */
	return TM_Time;
 8005174:	4b01      	ldr	r3, [pc, #4]	; (800517c <HAL_GetTick+0x8>)
 8005176:	6818      	ldr	r0, [r3, #0]
}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	2000442c 	.word	0x2000442c

08005180 <DMA2D_Convert565ToARGB8888>:
	/* Output color: RRRRR000 GGGGGG00 BBBBB000 */
	DMA2D_Color = 0;
	
	DMA2D_Color |= (color & 0xF800) << 8;
	DMA2D_Color |= (color & 0x07E0) << 5;
	DMA2D_Color |= (color & 0x001F) << 3;
 8005180:	0203      	lsls	r3, r0, #8
 8005182:	f403 0278 	and.w	r2, r3, #16252928	; 0xf80000
 8005186:	0143      	lsls	r3, r0, #5
 8005188:	00c0      	lsls	r0, r0, #3
 800518a:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800518e:	b2c0      	uxtb	r0, r0
 8005190:	4313      	orrs	r3, r2
 8005192:	4318      	orrs	r0, r3
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <DMA2D_Convert565ToARGB8888+0x1c>)
 8005196:	6018      	str	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	2000000c 	.word	0x2000000c

080051a0 <TM_DMA2DGRAPHIC_Init>:
void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <TM_DMA2DGRAPHIC_Init+0x54>)
 80051a2:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void);
void TM_INT_DMA2DGRAPHIC_SetMemory(uint32_t MemoryAddress, uint32_t Offset, uint32_t NumberOfLine, uint32_t PixelPerLine);
void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
 80051a6:	b513      	push	{r0, r1, r4, lr}
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
 80051a8:	609a      	str	r2, [r3, #8]
	DIS.Offset = 0;
 80051aa:	2100      	movs	r1, #0
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
 80051ac:	24f0      	movs	r4, #240	; 0xf0
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
 80051ae:	f44f 70a0 	mov.w	r0, #320	; 0x140
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
 80051b2:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
	DIS.Offset = 0;
 80051b6:	6159      	str	r1, [r3, #20]
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
 80051b8:	801c      	strh	r4, [r3, #0]
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
 80051ba:	8058      	strh	r0, [r3, #2]
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
 80051bc:	619a      	str	r2, [r3, #24]
	DIS.CurrentHeight = DMA2D_GRAPHIC_LCD_WIDTH;
 80051be:	80dc      	strh	r4, [r3, #6]
	DIS.CurrentWidth = DMA2D_GRAPHIC_LCD_HEIGHT;
 80051c0:	8098      	strh	r0, [r3, #4]
	DIS.Orientation = 0;
	DIS.PixelSize = 2;
 80051c2:	2002      	movs	r0, #2
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
	DIS.CurrentHeight = DMA2D_GRAPHIC_LCD_WIDTH;
	DIS.CurrentWidth = DMA2D_GRAPHIC_LCD_HEIGHT;
	DIS.Orientation = 0;
 80051c4:	7759      	strb	r1, [r3, #29]
	DIS.PixelSize = 2;
 80051c6:	7798      	strb	r0, [r3, #30]
	DIS.LayerOffset = DMA2D_GRAPHIC_LCD_WIDTH * DMA2D_GRAPHIC_LCD_HEIGHT * DIS.PixelSize;
 80051c8:	7f98      	ldrb	r0, [r3, #30]
 80051ca:	4342      	muls	r2, r0
 80051cc:	60da      	str	r2, [r3, #12]
	DIS.LayerNumber = 0;
 80051ce:	7419      	strb	r1, [r3, #16]
	
	/* Set DMA2D instance value */
	DMA2DHandle.Instance = DMA2D;
 80051d0:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <TM_DMA2DGRAPHIC_Init+0x58>)
 80051d2:	490a      	ldr	r1, [pc, #40]	; (80051fc <TM_DMA2DGRAPHIC_Init+0x5c>)
 80051d4:	6011      	str	r1, [r2, #0]
	
	/* Enable DMA2D clock */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80051d6:	4a0a      	ldr	r2, [pc, #40]	; (8005200 <TM_DMA2DGRAPHIC_Init+0x60>)
 80051d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80051de:	6311      	str	r1, [r2, #48]	; 0x30
 80051e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051e2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	9a01      	ldr	r2, [sp, #4]
	
	/* Initialized */
	DIS.Initialized = 1;
 80051ea:	2201      	movs	r2, #1
 80051ec:	771a      	strb	r2, [r3, #28]
}
 80051ee:	b002      	add	sp, #8
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	20004c40 	.word	0x20004c40
 80051f8:	20004434 	.word	0x20004434
 80051fc:	4002b000 	.word	0x4002b000
 8005200:	40023800 	.word	0x40023800

08005204 <TM_DMA2DGRAPHIC_SetLayer>:

void TM_DMA2DGRAPHIC_SetLayer(uint8_t layer_number) {
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
 8005204:	4b02      	ldr	r3, [pc, #8]	; (8005210 <TM_DMA2DGRAPHIC_SetLayer+0xc>)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	4342      	muls	r2, r0
 800520a:	615a      	str	r2, [r3, #20]
	DIS.LayerNumber = layer_number;
 800520c:	7418      	strb	r0, [r3, #16]
 800520e:	4770      	bx	lr
 8005210:	20004c40 	.word	0x20004c40

08005214 <TM_DMA2DGRAPHIC_DrawPixel>:
}

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
	if (DIS.Orientation == 1) { /* Normal */
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <TM_DMA2DGRAPHIC_DrawPixel+0xb4>)
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
	DIS.LayerNumber = layer_number;
}

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (DIS.Orientation == 1) { /* Normal */
 800521a:	7f5c      	ldrb	r4, [r3, #29]
 800521c:	2c01      	cmp	r4, #1
 800521e:	d10c      	bne.n	800523a <TM_DMA2DGRAPHIC_DrawPixel+0x26>
		*(__IO uint16_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x)) = color;
 8005220:	689d      	ldr	r5, [r3, #8]
 8005222:	b292      	uxth	r2, r2
 8005224:	695e      	ldr	r6, [r3, #20]
 8005226:	7f9c      	ldrb	r4, [r3, #30]
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	442e      	add	r6, r5
 800522c:	b29b      	uxth	r3, r3
 800522e:	fb03 0101 	mla	r1, r3, r1, r0
 8005232:	4361      	muls	r1, r4
 8005234:	538a      	strh	r2, [r1, r6]
 8005236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (DIS.Orientation == 0) { /* 180 */
 800523a:	7f5c      	ldrb	r4, [r3, #29]
 800523c:	b9d4      	cbnz	r4, 8005274 <TM_DMA2DGRAPHIC_DrawPixel+0x60>
		*(__IO uint16_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1))) = color;
 800523e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8005242:	b292      	uxth	r2, r2
 8005244:	695e      	ldr	r6, [r3, #20]
 8005246:	7f9f      	ldrb	r7, [r3, #30]
 8005248:	885d      	ldrh	r5, [r3, #2]
 800524a:	4476      	add	r6, lr
 800524c:	f8b3 8000 	ldrh.w	r8, [r3]
 8005250:	f8b3 c000 	ldrh.w	ip, [r3]
 8005254:	b2ad      	uxth	r5, r5
 8005256:	fa1f f888 	uxth.w	r8, r8
 800525a:	fa1f fc8c 	uxth.w	ip, ip
 800525e:	1a6c      	subs	r4, r5, r1
 8005260:	ebc0 000c 	rsb	r0, r0, ip
 8005264:	3c01      	subs	r4, #1
 8005266:	3801      	subs	r0, #1
 8005268:	fb08 0304 	mla	r3, r8, r4, r0
 800526c:	437b      	muls	r3, r7
 800526e:	539a      	strh	r2, [r3, r6]
 8005270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 8005274:	7f5c      	ldrb	r4, [r3, #29]
 8005276:	2c03      	cmp	r4, #3
 8005278:	d10f      	bne.n	800529a <TM_DMA2DGRAPHIC_DrawPixel+0x86>
		*(__IO uint16_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
 800527a:	689c      	ldr	r4, [r3, #8]
 800527c:	695f      	ldr	r7, [r3, #20]
 800527e:	f893 e01e 	ldrb.w	lr, [r3, #30]
 8005282:	881d      	ldrh	r5, [r3, #0]
 8005284:	881e      	ldrh	r6, [r3, #0]
 8005286:	19e3      	adds	r3, r4, r7
 8005288:	b2ad      	uxth	r5, r5
 800528a:	4368      	muls	r0, r5
 800528c:	fa10 f586 	uxtah	r5, r0, r6
 8005290:	1a69      	subs	r1, r5, r1
 8005292:	3901      	subs	r1, #1
 8005294:	fb0e f101 	mul.w	r1, lr, r1
 8005298:	e011      	b.n	80052be <TM_DMA2DGRAPHIC_DrawPixel+0xaa>
	} else if (DIS.Orientation == 2) { /* 270 */
 800529a:	7f5c      	ldrb	r4, [r3, #29]
 800529c:	2c02      	cmp	r4, #2
 800529e:	d110      	bne.n	80052c2 <TM_DMA2DGRAPHIC_DrawPixel+0xae>
		*(__IO uint16_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
 80052a0:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80052a4:	695d      	ldr	r5, [r3, #20]
 80052a6:	7f9e      	ldrb	r6, [r3, #30]
 80052a8:	885c      	ldrh	r4, [r3, #2]
 80052aa:	881f      	ldrh	r7, [r3, #0]
 80052ac:	b2a4      	uxth	r4, r4
 80052ae:	b2bf      	uxth	r7, r7
 80052b0:	1a23      	subs	r3, r4, r0
 80052b2:	3b01      	subs	r3, #1
 80052b4:	fb07 1103 	mla	r1, r7, r3, r1
 80052b8:	eb0e 0305 	add.w	r3, lr, r5
 80052bc:	4371      	muls	r1, r6
 80052be:	b292      	uxth	r2, r2
 80052c0:	52ca      	strh	r2, [r1, r3]
 80052c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c6:	bf00      	nop
 80052c8:	20004c40 	.word	0x20004c40

080052cc <TM_DMA2DGRAPHIC_SetOrientation>:
	return 0;
}

void TM_DMA2DGRAPHIC_SetOrientation(uint8_t orientation) {
	/* Filter */
	if (orientation > 3) {
 80052cc:	2803      	cmp	r0, #3
 80052ce:	d80e      	bhi.n	80052ee <TM_DMA2DGRAPHIC_SetOrientation+0x22>
		return;
	}
	
	/* Save new orientation */
	DIS.Orientation = orientation;
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <TM_DMA2DGRAPHIC_SetOrientation+0x24>)
	
	if (
 80052d2:	2801      	cmp	r0, #1
	if (orientation > 3) {
		return;
	}
	
	/* Save new orientation */
	DIS.Orientation = orientation;
 80052d4:	7758      	strb	r0, [r3, #29]
	
	if (
 80052d6:	d804      	bhi.n	80052e2 <TM_DMA2DGRAPHIC_SetOrientation+0x16>
		orientation == 0 ||
		orientation == 1
	) {
		DIS.CurrentHeight = DIS.Height;
 80052d8:	885a      	ldrh	r2, [r3, #2]
 80052da:	b292      	uxth	r2, r2
 80052dc:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Width;
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	e003      	b.n	80052ea <TM_DMA2DGRAPHIC_SetOrientation+0x1e>
	} else {
		DIS.CurrentHeight = DIS.Width;
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	b292      	uxth	r2, r2
 80052e6:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Height;
 80052e8:	885a      	ldrh	r2, [r3, #2]
 80052ea:	b292      	uxth	r2, r2
 80052ec:	809a      	strh	r2, [r3, #4]
 80052ee:	4770      	bx	lr
 80052f0:	20004c40 	.word	0x20004c40

080052f4 <TM_DMA2DGRAPHIC_Fill>:
	}
}

void TM_DMA2DGRAPHIC_Fill(uint32_t color) {
 80052f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Set parameters */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 80052f6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80052fa:	4c15      	ldr	r4, [pc, #84]	; (8005350 <TM_DMA2DGRAPHIC_Fill+0x5c>)
	DMA2DHandle.Init.ColorMode = DMA2D_RGB565;
	DMA2DHandle.Init.OutputOffset = 0;

	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 80052fc:	b280      	uxth	r0, r0
	}
}

void TM_DMA2DGRAPHIC_Fill(uint32_t color) {
	/* Set parameters */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 80052fe:	6063      	str	r3, [r4, #4]
	DMA2DHandle.Init.ColorMode = DMA2D_RGB565;
 8005300:	2302      	movs	r3, #2
 8005302:	60a3      	str	r3, [r4, #8]
	DMA2DHandle.Init.OutputOffset = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	60e3      	str	r3, [r4, #12]

	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 8005308:	f7ff ff3a 	bl	8005180 <DMA2D_Convert565ToARGB8888>

	/* Init DMA2D and start transfer */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 800530c:	4620      	mov	r0, r4
 800530e:	f7fb fec7 	bl	80010a0 <HAL_DMA2D_Init>
 8005312:	b9d0      	cbnz	r0, 800534a <TM_DMA2DGRAPHIC_Fill+0x56>
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, DIS.LayerNumber) == HAL_OK) {
 8005314:	4d0f      	ldr	r5, [pc, #60]	; (8005354 <TM_DMA2DGRAPHIC_Fill+0x60>)
 8005316:	4620      	mov	r0, r4
 8005318:	7c29      	ldrb	r1, [r5, #16]
 800531a:	f7fb ff8d 	bl	8001238 <HAL_DMA2D_ConfigLayer>
 800531e:	b9a0      	cbnz	r0, 800534a <TM_DMA2DGRAPHIC_Fill+0x56>
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)(DIS.StartAddress + DIS.Offset), DIS.Width, DIS.Height) == HAL_OK) {        
 8005320:	68a8      	ldr	r0, [r5, #8]
 8005322:	696a      	ldr	r2, [r5, #20]
 8005324:	882b      	ldrh	r3, [r5, #0]
 8005326:	8869      	ldrh	r1, [r5, #2]
 8005328:	4402      	add	r2, r0
 800532a:	b29b      	uxth	r3, r3
 800532c:	4620      	mov	r0, r4
 800532e:	b289      	uxth	r1, r1
 8005330:	9100      	str	r1, [sp, #0]
 8005332:	4909      	ldr	r1, [pc, #36]	; (8005358 <TM_DMA2DGRAPHIC_Fill+0x64>)
 8005334:	6809      	ldr	r1, [r1, #0]
 8005336:	f7fb fedf 	bl	80010f8 <HAL_DMA2D_Start>
 800533a:	b930      	cbnz	r0, 800534a <TM_DMA2DGRAPHIC_Fill+0x56>
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 20);
 800533c:	2114      	movs	r1, #20
 800533e:	4620      	mov	r0, r4
			}
		}
	}
}
 8005340:	b003      	add	sp, #12
 8005342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	/* Init DMA2D and start transfer */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, DIS.LayerNumber) == HAL_OK) {
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)(DIS.StartAddress + DIS.Offset), DIS.Width, DIS.Height) == HAL_OK) {        
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 20);
 8005346:	f7fb bef1 	b.w	800112c <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 800534a:	b003      	add	sp, #12
 800534c:	bd30      	pop	{r4, r5, pc}
 800534e:	bf00      	nop
 8005350:	20004434 	.word	0x20004434
 8005354:	20004c40 	.word	0x20004c40
 8005358:	2000000c 	.word	0x2000000c

0800535c <TM_DMA2DGRAPHIC_CopyBufferIT>:
	/* Wait until transfer is done */
	DMA2D_WAIT;
}


void TM_DMA2DGRAPHIC_CopyBufferIT(void* pSrc, void* pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst) {
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Wait for previous operation to be done */
	DMA2D_WAIT;
 800535e:	4e11      	ldr	r6, [pc, #68]	; (80053a4 <TM_DMA2DGRAPHIC_CopyBufferIT+0x48>)
 8005360:	6835      	ldr	r5, [r6, #0]
 8005362:	4c10      	ldr	r4, [pc, #64]	; (80053a4 <TM_DMA2DGRAPHIC_CopyBufferIT+0x48>)
 8005364:	07ed      	lsls	r5, r5, #31
 8005366:	d4fb      	bmi.n	8005360 <TM_DMA2DGRAPHIC_CopyBufferIT+0x4>
	
	/* DeInit DMA2D */
	RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA2DRST;
 8005368:	4d0f      	ldr	r5, [pc, #60]	; (80053a8 <TM_DMA2DGRAPHIC_CopyBufferIT+0x4c>)
}


void TM_DMA2DGRAPHIC_CopyBufferIT(void* pSrc, void* pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst) {
	/* Wait for previous operation to be done */
	DMA2D_WAIT;
 800536a:	2702      	movs	r7, #2

	/* Set up pixel format */  
	DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_RGB565;

	/* Set up size */
	DMA2D->NLR = (uint32_t)(xSize << 16) | (uint16_t)ySize; 
 800536c:	b29b      	uxth	r3, r3
}


void TM_DMA2DGRAPHIC_CopyBufferIT(void* pSrc, void* pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst) {
	/* Wait for previous operation to be done */
	DMA2D_WAIT;
 800536e:	60a7      	str	r7, [r4, #8]
	
	/* DeInit DMA2D */
	RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA2DRST;
 8005370:	692e      	ldr	r6, [r5, #16]

	/* Set up pixel format */  
	DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_RGB565;

	/* Set up size */
	DMA2D->NLR = (uint32_t)(xSize << 16) | (uint16_t)ySize; 
 8005372:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
void TM_DMA2DGRAPHIC_CopyBufferIT(void* pSrc, void* pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst) {
	/* Wait for previous operation to be done */
	DMA2D_WAIT;
	
	/* DeInit DMA2D */
	RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA2DRST;
 8005376:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 800537a:	612e      	str	r6, [r5, #16]
	RCC->AHB1RSTR &= ~RCC_AHB1RSTR_DMA2DRST;
 800537c:	692e      	ldr	r6, [r5, #16]
 800537e:	f426 0600 	bic.w	r6, r6, #8388608	; 0x800000
 8005382:	612e      	str	r6, [r5, #16]
	
	DMA2D->CR = 0x00000000UL | (1 << 9);
 8005384:	f44f 7500 	mov.w	r5, #512	; 0x200
 8005388:	6025      	str	r5, [r4, #0]
	
	/* Set up pointers */
	DMA2D->FGMAR = (uint32_t)pSrc;                       
 800538a:	60e0      	str	r0, [r4, #12]
	DMA2D->OMAR = (uint32_t)pDst;                       
 800538c:	63e1      	str	r1, [r4, #60]	; 0x3c
	DMA2D->FGOR = OffLineSrc;                      
 800538e:	9905      	ldr	r1, [sp, #20]
 8005390:	6121      	str	r1, [r4, #16]
	DMA2D->OOR = OffLineDst; 
 8005392:	9906      	ldr	r1, [sp, #24]
 8005394:	6421      	str	r1, [r4, #64]	; 0x40

	/* Set up pixel format */  
	DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 8005396:	61e7      	str	r7, [r4, #28]

	/* Set up size */
	DMA2D->NLR = (uint32_t)(xSize << 16) | (uint16_t)ySize; 
 8005398:	6462      	str	r2, [r4, #68]	; 0x44

	/* Start DMA2D */
	DMA2D->CR |= DMA2D_CR_START; 
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a4:	4002b000 	.word	0x4002b000
 80053a8:	40023800 	.word	0x40023800

080053ac <TM_DMA2DGRAPHIC_CopyBuffer>:
		x += xinc2;
		y += yinc2;
	}
}

void TM_DMA2DGRAPHIC_CopyBuffer(void* pSrc, void* pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst) {
 80053ac:	b513      	push	{r0, r1, r4, lr}
	/* Copy buffer using interrupt */
	TM_DMA2DGRAPHIC_CopyBufferIT(pSrc, pDst, xSize, ySize, OffLineSrc, OffLineDst);
 80053ae:	9c05      	ldr	r4, [sp, #20]
 80053b0:	9401      	str	r4, [sp, #4]
 80053b2:	9c04      	ldr	r4, [sp, #16]
 80053b4:	9400      	str	r4, [sp, #0]
 80053b6:	f7ff ffd1 	bl	800535c <TM_DMA2DGRAPHIC_CopyBufferIT>

	/* Wait until transfer is done */
	DMA2D_WAIT;
 80053ba:	4a04      	ldr	r2, [pc, #16]	; (80053cc <TM_DMA2DGRAPHIC_CopyBuffer+0x20>)
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	07db      	lsls	r3, r3, #31
 80053c0:	d4fc      	bmi.n	80053bc <TM_DMA2DGRAPHIC_CopyBuffer+0x10>
 80053c2:	2202      	movs	r2, #2
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <TM_DMA2DGRAPHIC_CopyBuffer+0x20>)
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	b002      	add	sp, #8
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	4002b000 	.word	0x4002b000

080053d0 <TM_INT_DMA2DGRAPHIC_SetConf>:
}

/* Private functions */
void TM_INT_DMA2DGRAPHIC_SetConf(TM_DMA2DGRAPHIC_INT_Conf_t* Conf) {
	/* Fill settings for DMA2D */
	DIS.Width = Conf->Width;
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <TM_INT_DMA2DGRAPHIC_SetConf+0x38>)
 80053d2:	8802      	ldrh	r2, [r0, #0]
 80053d4:	801a      	strh	r2, [r3, #0]
	DIS.Height = Conf->Height;
 80053d6:	8842      	ldrh	r2, [r0, #2]
 80053d8:	805a      	strh	r2, [r3, #2]
	DIS.StartAddress = Conf->BufferStart;
 80053da:	6882      	ldr	r2, [r0, #8]
 80053dc:	609a      	str	r2, [r3, #8]
	DIS.LayerOffset = Conf->BufferOffset;
 80053de:	68c2      	ldr	r2, [r0, #12]
 80053e0:	60da      	str	r2, [r3, #12]
	DIS.PixelSize = Conf->BytesPerPixel;
 80053e2:	7902      	ldrb	r2, [r0, #4]
 80053e4:	779a      	strb	r2, [r3, #30]
	DIS.Pixels = DIS.Width * DIS.Height;
 80053e6:	881a      	ldrh	r2, [r3, #0]
 80053e8:	b291      	uxth	r1, r2
 80053ea:	885a      	ldrh	r2, [r3, #2]
 80053ec:	b292      	uxth	r2, r2
 80053ee:	434a      	muls	r2, r1
 80053f0:	619a      	str	r2, [r3, #24]
	DIS.Orientation = Conf->Orientation;
 80053f2:	7c02      	ldrb	r2, [r0, #16]
 80053f4:	775a      	strb	r2, [r3, #29]
	DIS.CurrentWidth = DIS.Width;
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	b292      	uxth	r2, r2
 80053fa:	809a      	strh	r2, [r3, #4]
	DIS.CurrentHeight = DIS.Height;
 80053fc:	885a      	ldrh	r2, [r3, #2]
 80053fe:	b292      	uxth	r2, r2
 8005400:	80da      	strh	r2, [r3, #6]
	
	/* Set DMA2D orientation */
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
 8005402:	7f58      	ldrb	r0, [r3, #29]
 8005404:	f7ff bf62 	b.w	80052cc <TM_DMA2DGRAPHIC_SetOrientation>
 8005408:	20004c40 	.word	0x20004c40

0800540c <TM_INT_DMA2DGRAPHIC_InitAndTransfer>:
}

void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void) {
 800540c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Wait until transfer is done first from other calls */
	DMA2D_WAIT;
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x6c>)
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	07d9      	lsls	r1, r3, #31
 8005414:	d4fc      	bmi.n	8005410 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x4>
	
	/* Format DMA2D settings */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 8005416:	4c19      	ldr	r4, [pc, #100]	; (800547c <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x70>)
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
}

void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void) {
	/* Wait until transfer is done first from other calls */
	DMA2D_WAIT;
 8005418:	2302      	movs	r3, #2
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x6c>)
	
	/* Format DMA2D settings */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
	DMA2DHandle.Init.ColorMode = DMA2D_RGB565;
	DMA2DHandle.Init.OutputOffset = DIS.Width - DMA2D_Width;
 800541c:	4d18      	ldr	r5, [pc, #96]	; (8005480 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x74>)

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 800541e:	4620      	mov	r0, r4
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
}

void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void) {
	/* Wait until transfer is done first from other calls */
	DMA2D_WAIT;
 8005420:	6093      	str	r3, [r2, #8]
	
	/* Format DMA2D settings */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 8005422:	f44f 3240 	mov.w	r2, #196608	; 0x30000
	DMA2DHandle.Init.ColorMode = DMA2D_RGB565;
 8005426:	60a3      	str	r3, [r4, #8]
	DMA2DHandle.Init.OutputOffset = DIS.Width - DMA2D_Width;
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x78>)
void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void) {
	/* Wait until transfer is done first from other calls */
	DMA2D_WAIT;
	
	/* Format DMA2D settings */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 800542a:	6062      	str	r2, [r4, #4]
	DMA2DHandle.Init.ColorMode = DMA2D_RGB565;
	DMA2DHandle.Init.OutputOffset = DIS.Width - DMA2D_Width;
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	682a      	ldr	r2, [r5, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	60e3      	str	r3, [r4, #12]

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 8005436:	f7fb fe33 	bl	80010a0 <HAL_DMA2D_Init>
 800543a:	4601      	mov	r1, r0
 800543c:	b998      	cbnz	r0, 8005466 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x5a>
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, 0) == HAL_OK) {
 800543e:	4620      	mov	r0, r4
 8005440:	f7fb fefa 	bl	8001238 <HAL_DMA2D_ConfigLayer>
 8005444:	b978      	cbnz	r0, 8005466 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x5a>
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)DMA2D_StartAddress, DMA2D_Width, DMA2D_Height) == HAL_OK) {        
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x7c>)
 8005448:	4620      	mov	r0, r4
 800544a:	4a10      	ldr	r2, [pc, #64]	; (800548c <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x80>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4910      	ldr	r1, [pc, #64]	; (8005490 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x84>)
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	6809      	ldr	r1, [r1, #0]
 8005458:	f7fb fe4e 	bl	80010f8 <HAL_DMA2D_Start>
 800545c:	b918      	cbnz	r0, 8005466 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x5a>
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 100);
 800545e:	2164      	movs	r1, #100	; 0x64
 8005460:	4620      	mov	r0, r4
 8005462:	f7fb fe63 	bl	800112c <HAL_DMA2D_PollForTransfer>
			}
		}
	}
	
	/* Wait till transfer ends */
	DMA2D_WAIT;
 8005466:	4a04      	ldr	r2, [pc, #16]	; (8005478 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x6c>)
 8005468:	6813      	ldr	r3, [r2, #0]
 800546a:	07db      	lsls	r3, r3, #31
 800546c:	d4fc      	bmi.n	8005468 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x5c>
 800546e:	2202      	movs	r2, #2
 8005470:	4b01      	ldr	r3, [pc, #4]	; (8005478 <TM_INT_DMA2DGRAPHIC_InitAndTransfer+0x6c>)
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	b003      	add	sp, #12
 8005476:	bd30      	pop	{r4, r5, pc}
 8005478:	4002b000 	.word	0x4002b000
 800547c:	20004434 	.word	0x20004434
 8005480:	20004c64 	.word	0x20004c64
 8005484:	20004c40 	.word	0x20004c40
 8005488:	20004c3c 	.word	0x20004c3c
 800548c:	20004c60 	.word	0x20004c60
 8005490:	2000000c 	.word	0x2000000c

08005494 <TM_INT_DMA2DGRAPHIC_SetMemory>:

void TM_INT_DMA2DGRAPHIC_SetMemory(uint32_t MemoryAddress, uint32_t Offset, uint32_t NumberOfLine, uint32_t PixelPerLine) {	
 8005494:	b530      	push	{r4, r5, lr}
	/* Set memory settings */
	DMA2DHandle.Init.OutputOffset = 0;
 8005496:	4907      	ldr	r1, [pc, #28]	; (80054b4 <TM_INT_DMA2DGRAPHIC_SetMemory+0x20>)
 8005498:	2400      	movs	r4, #0
 800549a:	60cc      	str	r4, [r1, #12]
	DMA2D_StartAddress = DIS.StartAddress + DIS.Offset + MemoryAddress;
 800549c:	4c06      	ldr	r4, [pc, #24]	; (80054b8 <TM_INT_DMA2DGRAPHIC_SetMemory+0x24>)
 800549e:	68a5      	ldr	r5, [r4, #8]
 80054a0:	6961      	ldr	r1, [r4, #20]
 80054a2:	4429      	add	r1, r5
 80054a4:	4408      	add	r0, r1
 80054a6:	4905      	ldr	r1, [pc, #20]	; (80054bc <TM_INT_DMA2DGRAPHIC_SetMemory+0x28>)
 80054a8:	6008      	str	r0, [r1, #0]
	DMA2D_Width = PixelPerLine;
 80054aa:	4905      	ldr	r1, [pc, #20]	; (80054c0 <TM_INT_DMA2DGRAPHIC_SetMemory+0x2c>)
 80054ac:	600b      	str	r3, [r1, #0]
	DMA2D_Height = NumberOfLine;
 80054ae:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <TM_INT_DMA2DGRAPHIC_SetMemory+0x30>)
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	bd30      	pop	{r4, r5, pc}
 80054b4:	20004434 	.word	0x20004434
 80054b8:	20004c40 	.word	0x20004c40
 80054bc:	20004c60 	.word	0x20004c60
 80054c0:	20004c64 	.word	0x20004c64
 80054c4:	20004c3c 	.word	0x20004c3c

080054c8 <TM_DMA2DGRAPHIC_DrawFilledRectangle>:
			}
		}
	}
}

void TM_DMA2DGRAPHIC_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 80054cc:	4e42      	ldr	r6, [pc, #264]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
			}
		}
	}
}

void TM_DMA2DGRAPHIC_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 80054ce:	461d      	mov	r5, r3
 80054d0:	4607      	mov	r7, r0
 80054d2:	4688      	mov	r8, r1
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 80054d4:	7f33      	ldrb	r3, [r6, #28]
			}
		}
	}
}

void TM_DMA2DGRAPHIC_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 80054d6:	4614      	mov	r4, r2
 80054d8:	9806      	ldr	r0, [sp, #24]
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d17a      	bne.n	80055d4 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x10c>
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 80054de:	88b3      	ldrh	r3, [r6, #4]
 80054e0:	b29b      	uxth	r3, r3
	if (DIS.Initialized != 1) {
		return;
	}
	
	/* Filter */
	if (
 80054e2:	42bb      	cmp	r3, r7
 80054e4:	d976      	bls.n	80055d4 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x10c>
		x >= DIS.CurrentWidth ||
		y >= DIS.CurrentHeight
 80054e6:	88f3      	ldrh	r3, [r6, #6]
 80054e8:	b29b      	uxth	r3, r3
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 80054ea:	428b      	cmp	r3, r1
 80054ec:	d972      	bls.n	80055d4 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x10c>
	) {
		return;
	}
	
	/* Filter height */
	if ((y + height) >= DIS.CurrentHeight) {
 80054ee:	88f3      	ldrh	r3, [r6, #6]
 80054f0:	186a      	adds	r2, r5, r1
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	429a      	cmp	r2, r3
 80054f6:	db02      	blt.n	80054fe <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x36>
		height = DIS.CurrentHeight - y;
 80054f8:	88f5      	ldrh	r5, [r6, #6]
 80054fa:	1a6d      	subs	r5, r5, r1
 80054fc:	b2ad      	uxth	r5, r5
	}
	/* Filter width */
	if ((x + width) >= DIS.CurrentWidth) {
 80054fe:	88b3      	ldrh	r3, [r6, #4]
 8005500:	19e2      	adds	r2, r4, r7
 8005502:	b29b      	uxth	r3, r3
 8005504:	429a      	cmp	r2, r3
 8005506:	db03      	blt.n	8005510 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x48>
		width = DIS.CurrentWidth - x;
 8005508:	4b33      	ldr	r3, [pc, #204]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
 800550a:	889c      	ldrh	r4, [r3, #4]
 800550c:	1be4      	subs	r4, r4, r7
 800550e:	b2a4      	uxth	r4, r4
	}
	
	/* Set colors */
	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 8005510:	b280      	uxth	r0, r0
 8005512:	f7ff fe35 	bl	8005180 <DMA2D_Convert565ToARGB8888>
	
	/* Set memory settings */
	if (DIS.Orientation == 1) { /* Normal */
 8005516:	7f72      	ldrb	r2, [r6, #29]
 8005518:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
 800551a:	2a01      	cmp	r2, #1
 800551c:	d10e      	bne.n	800553c <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x74>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y * DIS.Width + x), DIS.Width - width, height, width);
 800551e:	f893 e01e 	ldrb.w	lr, [r3, #30]
 8005522:	462a      	mov	r2, r5
 8005524:	8818      	ldrh	r0, [r3, #0]
 8005526:	8819      	ldrh	r1, [r3, #0]
 8005528:	4623      	mov	r3, r4
 800552a:	b280      	uxth	r0, r0
 800552c:	b289      	uxth	r1, r1
 800552e:	fb08 7000 	mla	r0, r8, r0, r7
 8005532:	1b09      	subs	r1, r1, r4
 8005534:	fb0e f000 	mul.w	r0, lr, r0
 8005538:	f7ff ffac 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 0) { /* 180 */
 800553c:	7f73      	ldrb	r3, [r6, #29]
 800553e:	4926      	ldr	r1, [pc, #152]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
 8005540:	b9bb      	cbnz	r3, 8005572 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0xaa>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * ((DIS.Height - height - y) * DIS.Width + DIS.Width - x - width), DIS.Width - width, height, width);
 8005542:	f891 e01e 	ldrb.w	lr, [r1, #30]
 8005546:	884a      	ldrh	r2, [r1, #2]
 8005548:	8808      	ldrh	r0, [r1, #0]
 800554a:	b292      	uxth	r2, r2
 800554c:	880b      	ldrh	r3, [r1, #0]
 800554e:	b280      	uxth	r0, r0
 8005550:	8809      	ldrh	r1, [r1, #0]
 8005552:	1b52      	subs	r2, r2, r5
 8005554:	b289      	uxth	r1, r1
 8005556:	ebc8 0202 	rsb	r2, r8, r2
 800555a:	1b09      	subs	r1, r1, r4
 800555c:	4350      	muls	r0, r2
 800555e:	462a      	mov	r2, r5
 8005560:	fa10 f083 	uxtah	r0, r0, r3
 8005564:	4623      	mov	r3, r4
 8005566:	1bc0      	subs	r0, r0, r7
 8005568:	1b00      	subs	r0, r0, r4
 800556a:	fb0e f000 	mul.w	r0, lr, r0
 800556e:	f7ff ff91 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 3) { /* 90 */
 8005572:	7f73      	ldrb	r3, [r6, #29]
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
 8005576:	2b03      	cmp	r3, #3
 8005578:	d113      	bne.n	80055a2 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0xda>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (DIS.Width - y - height + DIS.Width * x), DIS.Width - height, width, height);
 800557a:	f892 e01e 	ldrb.w	lr, [r2, #30]
 800557e:	8813      	ldrh	r3, [r2, #0]
 8005580:	8810      	ldrh	r0, [r2, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	8811      	ldrh	r1, [r2, #0]
 8005586:	b280      	uxth	r0, r0
 8005588:	4622      	mov	r2, r4
 800558a:	ebc8 0303 	rsb	r3, r8, r3
 800558e:	b289      	uxth	r1, r1
 8005590:	1b5b      	subs	r3, r3, r5
 8005592:	1b49      	subs	r1, r1, r5
 8005594:	fb07 3000 	mla	r0, r7, r0, r3
 8005598:	462b      	mov	r3, r5
 800559a:	fb0e f000 	mul.w	r0, lr, r0
 800559e:	f7ff ff79 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 2) { /* 270 */
 80055a2:	7f73      	ldrb	r3, [r6, #29]
 80055a4:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x110>)
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d110      	bne.n	80055cc <TM_DMA2DGRAPHIC_DrawFilledRectangle+0x104>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (x + DIS.Width * (DIS.Height - width - x)), DIS.Width - height, width, height);
 80055aa:	7f96      	ldrb	r6, [r2, #30]
 80055ac:	8810      	ldrh	r0, [r2, #0]
 80055ae:	8853      	ldrh	r3, [r2, #2]
 80055b0:	b280      	uxth	r0, r0
 80055b2:	8811      	ldrh	r1, [r2, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4622      	mov	r2, r4
 80055b8:	b289      	uxth	r1, r1
 80055ba:	1b1b      	subs	r3, r3, r4
 80055bc:	1b49      	subs	r1, r1, r5
 80055be:	1bdb      	subs	r3, r3, r7
 80055c0:	fb00 7003 	mla	r0, r0, r3, r7
 80055c4:	462b      	mov	r3, r5
 80055c6:	4370      	muls	r0, r6
 80055c8:	f7ff ff64 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}
 80055cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (DIS.Orientation == 2) { /* 270 */
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (x + DIS.Width * (DIS.Height - width - x)), DIS.Width - height, width, height);
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
 80055d0:	f7ff bf1c 	b.w	800540c <TM_INT_DMA2DGRAPHIC_InitAndTransfer>
 80055d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d8:	20004c40 	.word	0x20004c40

080055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>:
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}

void TM_DMA2DGRAPHIC_DrawVerticalLine(int16_t x, int16_t y, uint16_t length, uint32_t color) {
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 80055de:	4d3e      	ldr	r5, [pc, #248]	; (80056d8 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xfc>)
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}

void TM_DMA2DGRAPHIC_DrawVerticalLine(int16_t x, int16_t y, uint16_t length, uint32_t color) {
 80055e0:	4614      	mov	r4, r2
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 80055e2:	7f2a      	ldrb	r2, [r5, #28]
 80055e4:	2a01      	cmp	r2, #1
 80055e6:	d175      	bne.n	80056d4 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xf8>
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 80055e8:	88aa      	ldrh	r2, [r5, #4]
 80055ea:	b292      	uxth	r2, r2
	if (DIS.Initialized != 1) {
		return;
	}
	
	/* Filter */
	if (
 80055ec:	4290      	cmp	r0, r2
 80055ee:	da71      	bge.n	80056d4 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xf8>
		x >= DIS.CurrentWidth ||
		y >= DIS.CurrentHeight ||
 80055f0:	88ea      	ldrh	r2, [r5, #6]
 80055f2:	b292      	uxth	r2, r2
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 80055f4:	4291      	cmp	r1, r2
 80055f6:	da6d      	bge.n	80056d4 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xf8>
		y >= DIS.CurrentHeight ||
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	d06b      	beq.n	80056d4 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xf8>
 80055fc:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
	if (y < 0) {
		y = 0;
	}
	
	/* Filter height */
	if ((y + length) >= DIS.CurrentHeight) {
 8005600:	88ea      	ldrh	r2, [r5, #6]
 8005602:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
 8005606:	b292      	uxth	r2, r2
 8005608:	19a1      	adds	r1, r4, r6
 800560a:	4291      	cmp	r1, r2
 800560c:	db02      	blt.n	8005614 <TM_DMA2DGRAPHIC_DrawVerticalLine+0x38>
		length = DIS.CurrentHeight - y;
 800560e:	88ec      	ldrh	r4, [r5, #6]
 8005610:	1ba4      	subs	r4, r4, r6
 8005612:	b2a4      	uxth	r4, r4
	}

	/* Set color */
	DMA2D_Convert565ToARGB8888(color);
 8005614:	b298      	uxth	r0, r3
 8005616:	f7ff fdb3 	bl	8005180 <DMA2D_Convert565ToARGB8888>
	
	/* Set memory settings */
	if (DIS.Orientation == 1) { /* Normal */
 800561a:	7f6b      	ldrb	r3, [r5, #29]
 800561c:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xfc>)
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10d      	bne.n	8005640 <TM_DMA2DGRAPHIC_DrawVerticalLine+0x64>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y * DIS.Width + x), DIS.Width - 1, length, 1);
 8005624:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8005628:	8810      	ldrh	r0, [r2, #0]
 800562a:	8811      	ldrh	r1, [r2, #0]
 800562c:	4622      	mov	r2, r4
 800562e:	b280      	uxth	r0, r0
 8005630:	b289      	uxth	r1, r1
 8005632:	fb06 7000 	mla	r0, r6, r0, r7
 8005636:	3901      	subs	r1, #1
 8005638:	fb0e f000 	mul.w	r0, lr, r0
 800563c:	f7ff ff2a 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 0) { /* 180 */
 8005640:	7f6b      	ldrb	r3, [r5, #29]
 8005642:	4925      	ldr	r1, [pc, #148]	; (80056d8 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xfc>)
 8005644:	b9b3      	cbnz	r3, 8005674 <TM_DMA2DGRAPHIC_DrawVerticalLine+0x98>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * ((DIS.Height - length - y) * DIS.Width + DIS.Width - x - 1), DIS.Width - 1, length, 1);
 8005646:	f891 e01e 	ldrb.w	lr, [r1, #30]
 800564a:	884a      	ldrh	r2, [r1, #2]
 800564c:	8808      	ldrh	r0, [r1, #0]
 800564e:	b292      	uxth	r2, r2
 8005650:	880b      	ldrh	r3, [r1, #0]
 8005652:	b280      	uxth	r0, r0
 8005654:	8809      	ldrh	r1, [r1, #0]
 8005656:	1b12      	subs	r2, r2, r4
 8005658:	b289      	uxth	r1, r1
 800565a:	1b92      	subs	r2, r2, r6
 800565c:	3901      	subs	r1, #1
 800565e:	4350      	muls	r0, r2
 8005660:	4622      	mov	r2, r4
 8005662:	fa10 f083 	uxtah	r0, r0, r3
 8005666:	2301      	movs	r3, #1
 8005668:	1bc0      	subs	r0, r0, r7
 800566a:	3801      	subs	r0, #1
 800566c:	fb0e f000 	mul.w	r0, lr, r0
 8005670:	f7ff ff10 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 3) { /* 90 */
 8005674:	7f6b      	ldrb	r3, [r5, #29]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xfc>)
 8005678:	2b03      	cmp	r3, #3
 800567a:	d112      	bne.n	80056a2 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xc6>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (DIS.Width - y - length + DIS.Width * x), DIS.Width - length, 1, length);
 800567c:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8005680:	8813      	ldrh	r3, [r2, #0]
 8005682:	8810      	ldrh	r0, [r2, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	8811      	ldrh	r1, [r2, #0]
 8005688:	b280      	uxth	r0, r0
 800568a:	2201      	movs	r2, #1
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	b289      	uxth	r1, r1
 8005690:	1b1b      	subs	r3, r3, r4
 8005692:	1b09      	subs	r1, r1, r4
 8005694:	fb07 3000 	mla	r0, r7, r0, r3
 8005698:	4623      	mov	r3, r4
 800569a:	fb0e f000 	mul.w	r0, lr, r0
 800569e:	f7ff fef9 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 2) { /* 270 */
 80056a2:	7f6b      	ldrb	r3, [r5, #29]
 80056a4:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <TM_DMA2DGRAPHIC_DrawVerticalLine+0xfc>)
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d110      	bne.n	80056cc <TM_DMA2DGRAPHIC_DrawVerticalLine+0xf0>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y + DIS.Width * (DIS.Height - 1 - x)), DIS.Width - length, 1, length);
 80056aa:	7f95      	ldrb	r5, [r2, #30]
 80056ac:	8810      	ldrh	r0, [r2, #0]
 80056ae:	8853      	ldrh	r3, [r2, #2]
 80056b0:	b280      	uxth	r0, r0
 80056b2:	8811      	ldrh	r1, [r2, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2201      	movs	r2, #1
 80056b8:	b289      	uxth	r1, r1
 80056ba:	3b01      	subs	r3, #1
 80056bc:	1b09      	subs	r1, r1, r4
 80056be:	1bdb      	subs	r3, r3, r7
 80056c0:	fb00 6003 	mla	r0, r0, r3, r6
 80056c4:	4623      	mov	r3, r4
 80056c6:	4368      	muls	r0, r5
 80056c8:	f7ff fee4 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}
 80056cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (DIS.Orientation == 2) { /* 270 */
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y + DIS.Width * (DIS.Height - 1 - x)), DIS.Width - length, 1, length);
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
 80056d0:	f7ff be9c 	b.w	800540c <TM_INT_DMA2DGRAPHIC_InitAndTransfer>
 80056d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20004c40 	.word	0x20004c40

080056dc <TM_DMA2DGRAPHIC_DrawCircle>:
		Coordinates++;
		TM_DMA2DGRAPHIC_DrawLine(X, Y, Coordinates->X, Coordinates->Y, color);
	};
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 80056dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	4615      	mov	r5, r2
	int16_t f = 1 - r;
 80056e2:	f1c2 0201 	rsb	r2, r2, #1
		Coordinates++;
		TM_DMA2DGRAPHIC_DrawLine(X, Y, Coordinates->X, Coordinates->Y, color);
	};
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 80056e6:	b087      	sub	sp, #28
 80056e8:	460f      	mov	r7, r1
	int16_t f = 1 - r;
 80056ea:	fa0f fb82 	sxth.w	fp, r2
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 80056ee:	1869      	adds	r1, r5, r1
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 80056f0:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
		Coordinates++;
		TM_DMA2DGRAPHIC_DrawLine(X, Y, Coordinates->X, Coordinates->Y, color);
	};
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 80056f4:	4606      	mov	r6, r0
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 80056f6:	fa0f f880 	sxth.w	r8, r0
		Coordinates++;
		TM_DMA2DGRAPHIC_DrawLine(X, Y, Coordinates->X, Coordinates->Y, color);
	};
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 80056fa:	461c      	mov	r4, r3
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 80056fc:	0052      	lsls	r2, r2, #1
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 80056fe:	4640      	mov	r0, r8
 8005700:	b209      	sxth	r1, r1
}

void TM_DMA2DGRAPHIC_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005702:	b212      	sxth	r2, r2
 8005704:	9202      	str	r2, [sp, #8]
	int16_t x = 0;
	int16_t y = r;
 8005706:	b22a      	sxth	r2, r5
 8005708:	9200      	str	r2, [sp, #0]

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 800570a:	2201      	movs	r2, #1
 800570c:	f7ff ff66 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
 8005710:	1b79      	subs	r1, r7, r5
 8005712:	4640      	mov	r0, r8
 8005714:	4623      	mov	r3, r4
 8005716:	2201      	movs	r2, #1
 8005718:	b209      	sxth	r1, r1
 800571a:	f7ff ff5f 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
 800571e:	19a8      	adds	r0, r5, r6
 8005720:	fa0f f887 	sxth.w	r8, r7
 8005724:	4623      	mov	r3, r4
 8005726:	2201      	movs	r2, #1
 8005728:	b200      	sxth	r0, r0
 800572a:	4641      	mov	r1, r8
 800572c:	f7ff ff56 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
 8005730:	1b70      	subs	r0, r6, r5
 8005732:	4623      	mov	r3, r4
 8005734:	2201      	movs	r2, #1
 8005736:	4641      	mov	r1, r8
 8005738:	b200      	sxth	r0, r0
 800573a:	f7ff ff4f 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>

    while (x < y) {
 800573e:	2300      	movs	r3, #0
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	1c73      	adds	r3, r6, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	1e73      	subs	r3, r6, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800574e:	9a00      	ldr	r2, [sp, #0]
 8005750:	4293      	cmp	r3, r2
 8005752:	da6c      	bge.n	800582e <TM_DMA2DGRAPHIC_DrawCircle+0x152>
        if (f >= 0) {
 8005754:	f1bb 0f00 	cmp.w	fp, #0
 8005758:	db0b      	blt.n	8005772 <TM_DMA2DGRAPHIC_DrawCircle+0x96>
            y--;
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	3b01      	subs	r3, #1
 800575e:	b21b      	sxth	r3, r3
 8005760:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8005762:	9b02      	ldr	r3, [sp, #8]
 8005764:	3302      	adds	r3, #2
 8005766:	b29b      	uxth	r3, r3
 8005768:	b21a      	sxth	r2, r3
            f += ddF_y;
 800576a:	445b      	add	r3, fp
 800576c:	fa0f fb83 	sxth.w	fp, r3
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005770:	9202      	str	r2, [sp, #8]
 8005772:	f8bd 8004 	ldrh.w	r8, [sp, #4]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
 8005776:	2201      	movs	r2, #1
 8005778:	f8bd 5000 	ldrh.w	r5, [sp]
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 800577c:	eb0b 0348 	add.w	r3, fp, r8, lsl #1

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
 8005780:	eb07 0a05 	add.w	sl, r7, r5
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005784:	3303      	adds	r3, #3

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
 8005786:	fa0f fa8a 	sxth.w	sl, sl
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 800578a:	fa0f fb83 	sxth.w	fp, r3
 800578e:	9b04      	ldr	r3, [sp, #16]

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
 8005790:	4651      	mov	r1, sl
 8005792:	4443      	add	r3, r8
 8005794:	b21b      	sxth	r3, r3
 8005796:	9303      	str	r3, [sp, #12]
 8005798:	4623      	mov	r3, r4
 800579a:	9803      	ldr	r0, [sp, #12]
 800579c:	f7ff ff1e 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
 80057a0:	9b05      	ldr	r3, [sp, #20]
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
 80057a2:	4651      	mov	r1, sl
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
 80057a4:	ebc5 0a07 	rsb	sl, r5, r7
 80057a8:	ebc8 0903 	rsb	r9, r8, r3
        x++;
        ddF_x += 2;
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
 80057ac:	2201      	movs	r2, #1
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
 80057ae:	fa0f fa8a 	sxth.w	sl, sl
        x++;
        ddF_x += 2;
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
 80057b2:	4623      	mov	r3, r4
 80057b4:	fa0f f989 	sxth.w	r9, r9
 80057b8:	4648      	mov	r0, r9
 80057ba:	f7ff ff0f 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
 80057be:	4651      	mov	r1, sl
 80057c0:	4623      	mov	r3, r4
 80057c2:	2201      	movs	r2, #1
 80057c4:	9803      	ldr	r0, [sp, #12]
 80057c6:	f7ff ff09 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 - y, 1, color);
 80057ca:	4648      	mov	r0, r9
 80057cc:	f107 0901 	add.w	r9, r7, #1
 80057d0:	4651      	mov	r1, sl

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 + x, 1, color);
 80057d2:	eb06 0a05 	add.w	sl, r6, r5
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 + x, 1, color);
 80057d6:	1b75      	subs	r5, r6, r5
 80057d8:	44c1      	add	r9, r8
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 - y, 1, color);
 80057da:	4623      	mov	r3, r4

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 + x, 1, color);
 80057dc:	fa0f fa8a 	sxth.w	sl, sl
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 - y, 1, color);
 80057e0:	2201      	movs	r2, #1
 80057e2:	fa0f f989 	sxth.w	r9, r9

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 + x, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 + x, 1, color);
 80057e6:	b22d      	sxth	r5, r5
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 + y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + x, y0 - y, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - x, y0 - y, 1, color);
 80057e8:	f7ff fef8 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>

        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 + x, 1, color);
 80057ec:	4623      	mov	r3, r4
 80057ee:	2201      	movs	r2, #1
 80057f0:	4649      	mov	r1, r9
 80057f2:	4650      	mov	r0, sl
 80057f4:	f7ff fef2 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 + x, 1, color);
 80057f8:	4623      	mov	r3, r4
 80057fa:	2201      	movs	r2, #1
 80057fc:	4649      	mov	r1, r9
 80057fe:	4628      	mov	r0, r5
 8005800:	f7ff feec 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
 8005804:	1e7b      	subs	r3, r7, #1
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 - x, 1, color);
 8005806:	2201      	movs	r2, #1
 8005808:	4650      	mov	r0, sl
 800580a:	ebc8 0803 	rsb	r8, r8, r3
 800580e:	4623      	mov	r3, r4
 8005810:	fa0f f888 	sxth.w	r8, r8
 8005814:	4641      	mov	r1, r8
 8005816:	f7ff fee1 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
 800581a:	4623      	mov	r3, r4
 800581c:	2201      	movs	r2, #1
 800581e:	4641      	mov	r1, r8
 8005820:	4628      	mov	r0, r5
 8005822:	f7ff fedb 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
 8005826:	9b01      	ldr	r3, [sp, #4]
 8005828:	3301      	adds	r3, #1
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	e78d      	b.n	800574a <TM_DMA2DGRAPHIC_DrawCircle+0x6e>
    }
}
 800582e:	b007      	add	sp, #28
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>:
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawHorizontalLine(int16_t x, int16_t y, uint16_t length, uint32_t color) {
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 8005836:	4e41      	ldr	r6, [pc, #260]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawHorizontalLine(int16_t x, int16_t y, uint16_t length, uint32_t color) {
 8005838:	4614      	mov	r4, r2
 800583a:	4605      	mov	r5, r0
	/* Check if initialized */
	if (DIS.Initialized != 1) {
 800583c:	7f32      	ldrb	r2, [r6, #28]
 800583e:	2a01      	cmp	r2, #1
 8005840:	d17a      	bne.n	8005938 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x104>
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 8005842:	88b2      	ldrh	r2, [r6, #4]
 8005844:	b292      	uxth	r2, r2
	if (DIS.Initialized != 1) {
		return;
	}
	
	/* Filter */
	if (
 8005846:	4290      	cmp	r0, r2
 8005848:	da76      	bge.n	8005938 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x104>
		x >= DIS.CurrentWidth ||
		y >= DIS.CurrentHeight ||
 800584a:	88f2      	ldrh	r2, [r6, #6]
 800584c:	b292      	uxth	r2, r2
		return;
	}
	
	/* Filter */
	if (
		x >= DIS.CurrentWidth ||
 800584e:	4291      	cmp	r1, r2
 8005850:	da72      	bge.n	8005938 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x104>
		y >= DIS.CurrentHeight ||
 8005852:	2c00      	cmp	r4, #0
 8005854:	d070      	beq.n	8005938 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x104>
		length == 0
	) {
		return;
	}
	
	if (x < 0) {
 8005856:	2800      	cmp	r0, #0
	if (y < 0) {
		y = 0;
	}
	
	/* Filter height */
	if ((x + length) >= DIS.CurrentWidth) {
 8005858:	88b2      	ldrh	r2, [r6, #4]
 800585a:	ea21 77e1 	bic.w	r7, r1, r1, asr #31
	) {
		return;
	}
	
	if (x < 0) {
		length += x;
 800585e:	bfbc      	itt	lt
 8005860:	1824      	addlt	r4, r4, r0
		x = 0;
 8005862:	2500      	movlt	r5, #0
	if (y < 0) {
		y = 0;
	}
	
	/* Filter height */
	if ((x + length) >= DIS.CurrentWidth) {
 8005864:	b292      	uxth	r2, r2
	) {
		return;
	}
	
	if (x < 0) {
		length += x;
 8005866:	bfb8      	it	lt
 8005868:	b2a4      	uxthlt	r4, r4
	if (y < 0) {
		y = 0;
	}
	
	/* Filter height */
	if ((x + length) >= DIS.CurrentWidth) {
 800586a:	1961      	adds	r1, r4, r5
 800586c:	4291      	cmp	r1, r2
 800586e:	db03      	blt.n	8005878 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x44>
		length = DIS.CurrentWidth - x;
 8005870:	4a32      	ldr	r2, [pc, #200]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
 8005872:	8894      	ldrh	r4, [r2, #4]
 8005874:	1b64      	subs	r4, r4, r5
 8005876:	b2a4      	uxth	r4, r4
	}

	/* Set color */
	DMA2D_Convert565ToARGB8888(color);
 8005878:	b298      	uxth	r0, r3
 800587a:	f7ff fc81 	bl	8005180 <DMA2D_Convert565ToARGB8888>
	
	/* Set memory settings */
	if (DIS.Orientation == 1) { /* Normal */
 800587e:	7f72      	ldrb	r2, [r6, #29]
 8005880:	4b2e      	ldr	r3, [pc, #184]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	2a01      	cmp	r2, #1
 8005886:	d10d      	bne.n	80058a4 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x70>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y * DIS.Width + x), DIS.Width - length, 1, length);
 8005888:	f893 e01e 	ldrb.w	lr, [r3, #30]
 800588c:	8818      	ldrh	r0, [r3, #0]
 800588e:	8819      	ldrh	r1, [r3, #0]
 8005890:	4623      	mov	r3, r4
 8005892:	b280      	uxth	r0, r0
 8005894:	b289      	uxth	r1, r1
 8005896:	fb00 5007 	mla	r0, r0, r7, r5
 800589a:	1b09      	subs	r1, r1, r4
 800589c:	fb0e f000 	mul.w	r0, lr, r0
 80058a0:	f7ff fdf8 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 0) { /* 180 */
 80058a4:	7f73      	ldrb	r3, [r6, #29]
 80058a6:	4925      	ldr	r1, [pc, #148]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
 80058a8:	b9b3      	cbnz	r3, 80058d8 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0xa4>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * ((DIS.Height - 1 - y) * DIS.Width + DIS.Width - x - length), DIS.Width - length, 1, length);
 80058aa:	f891 e01e 	ldrb.w	lr, [r1, #30]
 80058ae:	884a      	ldrh	r2, [r1, #2]
 80058b0:	8808      	ldrh	r0, [r1, #0]
 80058b2:	b292      	uxth	r2, r2
 80058b4:	880b      	ldrh	r3, [r1, #0]
 80058b6:	b280      	uxth	r0, r0
 80058b8:	8809      	ldrh	r1, [r1, #0]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	b289      	uxth	r1, r1
 80058be:	1bd2      	subs	r2, r2, r7
 80058c0:	1b09      	subs	r1, r1, r4
 80058c2:	4350      	muls	r0, r2
 80058c4:	2201      	movs	r2, #1
 80058c6:	fa10 f083 	uxtah	r0, r0, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	1b40      	subs	r0, r0, r5
 80058ce:	1b00      	subs	r0, r0, r4
 80058d0:	fb0e f000 	mul.w	r0, lr, r0
 80058d4:	f7ff fdde 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 3) { /* 90 */
 80058d8:	7f73      	ldrb	r3, [r6, #29]
 80058da:	4a18      	ldr	r2, [pc, #96]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d112      	bne.n	8005906 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0xd2>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (DIS.Width - y - 1 + DIS.Width * x), DIS.Width - 1, length, 1);
 80058e0:	f892 e01e 	ldrb.w	lr, [r2, #30]
 80058e4:	8813      	ldrh	r3, [r2, #0]
 80058e6:	8810      	ldrh	r0, [r2, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8811      	ldrh	r1, [r2, #0]
 80058ec:	b280      	uxth	r0, r0
 80058ee:	4622      	mov	r2, r4
 80058f0:	1bdb      	subs	r3, r3, r7
 80058f2:	b289      	uxth	r1, r1
 80058f4:	3b01      	subs	r3, #1
 80058f6:	3901      	subs	r1, #1
 80058f8:	fb05 3000 	mla	r0, r5, r0, r3
 80058fc:	2301      	movs	r3, #1
 80058fe:	fb0e f000 	mul.w	r0, lr, r0
 8005902:	f7ff fdc7 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	} 
	if (DIS.Orientation == 2) { /* 270 */
 8005906:	7f73      	ldrb	r3, [r6, #29]
 8005908:	4a0c      	ldr	r2, [pc, #48]	; (800593c <TM_DMA2DGRAPHIC_DrawHorizontalLine+0x108>)
 800590a:	2b02      	cmp	r3, #2
 800590c:	d110      	bne.n	8005930 <TM_DMA2DGRAPHIC_DrawHorizontalLine+0xfc>
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y + DIS.Width * (DIS.Height - length - x)), DIS.Width - 1, length, 1);
 800590e:	7f90      	ldrb	r0, [r2, #30]
 8005910:	8816      	ldrh	r6, [r2, #0]
 8005912:	8853      	ldrh	r3, [r2, #2]
 8005914:	b2b6      	uxth	r6, r6
 8005916:	8811      	ldrh	r1, [r2, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	4622      	mov	r2, r4
 800591c:	b289      	uxth	r1, r1
 800591e:	1b1b      	subs	r3, r3, r4
 8005920:	3901      	subs	r1, #1
 8005922:	1b5b      	subs	r3, r3, r5
 8005924:	fb06 7503 	mla	r5, r6, r3, r7
 8005928:	2301      	movs	r3, #1
 800592a:	4368      	muls	r0, r5
 800592c:	f7ff fdb2 	bl	8005494 <TM_INT_DMA2DGRAPHIC_SetMemory>
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}
 8005930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (DIS.Orientation == 2) { /* 270 */
		TM_INT_DMA2DGRAPHIC_SetMemory(DIS.PixelSize * (y + DIS.Width * (DIS.Height - length - x)), DIS.Width - 1, length, 1);
	}
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
 8005934:	f7ff bd6a 	b.w	800540c <TM_INT_DMA2DGRAPHIC_InitAndTransfer>
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593a:	bf00      	nop
 800593c:	20004c40 	.word	0x20004c40

08005940 <TM_DMA2DGRAPHIC_DrawRectangle>:
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 8005940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005944:	9d08      	ldr	r5, [sp, #32]
 8005946:	461c      	mov	r4, r3
	/* Draw 2 vertical lines */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y, height, color);
 8005948:	b206      	sxth	r6, r0
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 800594a:	4617      	mov	r7, r2
	/* Draw 2 vertical lines */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y, height, color);
 800594c:	fa0f f881 	sxth.w	r8, r1
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color) {
 8005950:	4682      	mov	sl, r0
 8005952:	4689      	mov	r9, r1
	/* Draw 2 vertical lines */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y, height, color);
 8005954:	462b      	mov	r3, r5
 8005956:	4622      	mov	r2, r4
 8005958:	4641      	mov	r1, r8
 800595a:	4630      	mov	r0, r6
 800595c:	f7ff fe3e 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y, height, color);
 8005960:	1e78      	subs	r0, r7, #1
 8005962:	462b      	mov	r3, r5
 8005964:	4622      	mov	r2, r4
 8005966:	4450      	add	r0, sl
 8005968:	4641      	mov	r1, r8
 800596a:	b200      	sxth	r0, r0
 800596c:	f7ff fe36 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
	
	/* Draw 2 horizontal lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y, width, color);
 8005970:	462b      	mov	r3, r5
 8005972:	463a      	mov	r2, r7
 8005974:	4641      	mov	r1, r8
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ff5c 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y + height, width, color);
 800597c:	eb09 0104 	add.w	r1, r9, r4
 8005980:	462b      	mov	r3, r5
 8005982:	463a      	mov	r2, r7
 8005984:	4630      	mov	r0, r6
 8005986:	b209      	sxth	r1, r1
}
 8005988:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y, height, color);
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y, height, color);
	
	/* Draw 2 horizontal lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y, width, color);
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y + height, width, color);
 800598c:	f7ff bf52 	b.w	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>

08005990 <TM_DMA2DGRAPHIC_DrawLine>:
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color) {
 8005990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
	curpixel = 0;

	deltax = ABS(x2 - x1);
 8005994:	1a14      	subs	r4, r2, r0
	deltay = ABS(y2 - y1);
 8005996:	ebc1 0803 	rsb	r8, r1, r3
	
	/* Start transfer and wait till done */
	TM_INT_DMA2DGRAPHIC_InitAndTransfer();
}

void TM_DMA2DGRAPHIC_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color) {
 800599a:	4605      	mov	r5, r0
 800599c:	460e      	mov	r6, r1
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
	curpixel = 0;

	deltax = ABS(x2 - x1);
 800599e:	2c00      	cmp	r4, #0
 80059a0:	f04f 0702 	mov.w	r7, #2
 80059a4:	bfb8      	it	lt
 80059a6:	4264      	neglt	r4, r4
	deltay = ABS(y2 - y1);
 80059a8:	f1b8 0f00 	cmp.w	r8, #0
 80059ac:	bfb8      	it	lt
 80059ae:	f1c8 0800 	rsblt	r8, r8, #0
void TM_DMA2DGRAPHIC_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color) {
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
	curpixel = 0;

	deltax = ABS(x2 - x1);
 80059b2:	b224      	sxth	r4, r4
	
	if (x2 >= x1) {
		xinc1 = 1;
		xinc2 = 1;
	} else {
		xinc1 = -1;
 80059b4:	4282      	cmp	r2, r0
 80059b6:	bfac      	ite	ge
 80059b8:	f04f 0901 	movge.w	r9, #1
 80059bc:	f04f 39ff 	movlt.w	r9, #4294967295

	if (y2 >= y1) {
		yinc1 = 1;
		yinc2 = 1;
	} else {
		yinc1 = -1;
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bfac      	ite	ge
 80059c4:	f04f 0a01 	movge.w	sl, #1
 80059c8:	f04f 3aff 	movlt.w	sl, #4294967295
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
	curpixel = 0;

	deltax = ABS(x2 - x1);
	deltay = ABS(y2 - y1);
 80059cc:	fa0f f888 	sxth.w	r8, r8
	} else {
		yinc1 = -1;
		yinc2 = -1;
	}

	if (deltax >= deltay) {
 80059d0:	4544      	cmp	r4, r8
 80059d2:	db08      	blt.n	80059e6 <TM_DMA2DGRAPHIC_DrawLine+0x56>
 80059d4:	f8cd 9000 	str.w	r9, [sp]
		xinc1 = 0;
		yinc2 = 0;
 80059d8:	f04f 0900 	mov.w	r9, #0
		den = deltax;
		num = deltax / 2;
 80059dc:	fb94 f7f7 	sdiv	r7, r4, r7
		yinc1 = -1;
		yinc2 = -1;
	}

	if (deltax >= deltay) {
		xinc1 = 0;
 80059e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80059e4:	e00b      	b.n	80059fe <TM_DMA2DGRAPHIC_DrawLine+0x6e>
		numpixels = deltax;
	} else {
		xinc2 = 0;
		yinc1 = 0;
		den = deltay;
		num = deltay / 2;
 80059e6:	fb98 f7f7 	sdiv	r7, r8, r7
 80059ea:	4623      	mov	r3, r4
 80059ec:	f8cd a004 	str.w	sl, [sp, #4]
 80059f0:	4644      	mov	r4, r8
		num = deltax / 2;
		numadd = deltay;
		numpixels = deltax;
	} else {
		xinc2 = 0;
		yinc1 = 0;
 80059f2:	f04f 0a00 	mov.w	sl, #0
		den = deltay;
		num = deltay / 2;
 80059f6:	b23f      	sxth	r7, r7
 80059f8:	4698      	mov	r8, r3
		den = deltax;
		num = deltax / 2;
		numadd = deltay;
		numpixels = deltax;
	} else {
		xinc2 = 0;
 80059fa:	f8cd a000 	str.w	sl, [sp]
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	fa0f f38b 	sxth.w	r3, fp
 8005a06:	429c      	cmp	r4, r3
 8005a08:	db19      	blt.n	8005a3e <TM_DMA2DGRAPHIC_DrawLine+0xae>
		DrawPixel(x, y, color);
		num += numadd;
 8005a0a:	4447      	add	r7, r8
static DMA2D_HandleTypeDef DMA2DHandle;
//static DMA2D_FG_InitTypeDef GRAPHIC_DMA2D_FG_InitStruct;
volatile TM_INT_DMA2D_t DIS;

__STATIC_INLINE void DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y, 1, color);
 8005a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7ff ff0e 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
		numpixels = deltay;
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
		DrawPixel(x, y, color);
		num += numadd;
 8005a18:	b2bb      	uxth	r3, r7
 8005a1a:	b21f      	sxth	r7, r3
		if (num >= den) {
 8005a1c:	42bc      	cmp	r4, r7
 8005a1e:	dc05      	bgt.n	8005a2c <TM_DMA2DGRAPHIC_DrawLine+0x9c>
			num -= den;
 8005a20:	1b1f      	subs	r7, r3, r4
			x += xinc1;
 8005a22:	444d      	add	r5, r9
			y += yinc1;
 8005a24:	4456      	add	r6, sl

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
		DrawPixel(x, y, color);
		num += numadd;
		if (num >= den) {
			num -= den;
 8005a26:	b23f      	sxth	r7, r7
			x += xinc1;
 8005a28:	b22d      	sxth	r5, r5
			y += yinc1;
 8005a2a:	b236      	sxth	r6, r6
		}
		x += xinc2;
 8005a2c:	9b00      	ldr	r3, [sp, #0]
 8005a2e:	f10b 0b01 	add.w	fp, fp, #1
 8005a32:	441d      	add	r5, r3
		y += yinc2;
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	441e      	add	r6, r3
		if (num >= den) {
			num -= den;
			x += xinc1;
			y += yinc1;
		}
		x += xinc2;
 8005a38:	b22d      	sxth	r5, r5
		y += yinc2;
 8005a3a:	b236      	sxth	r6, r6
 8005a3c:	e7e1      	b.n	8005a02 <TM_DMA2DGRAPHIC_DrawLine+0x72>
	}
}
 8005a3e:	b003      	add	sp, #12
 8005a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a44 <TM_DMA2DGRAPHIC_DrawFilledCircle>:
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 - x, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
    }
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 8005a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a48:	4615      	mov	r5, r2
	int16_t f = 1 - r;
 8005a4a:	f1c2 0401 	rsb	r4, r2, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005a4e:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 - x, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
    }
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 8005a52:	b087      	sub	sp, #28
 8005a54:	460f      	mov	r7, r1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 8005a56:	fa0f f880 	sxth.w	r8, r0
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005a5a:	0052      	lsls	r2, r2, #1
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 8005a5c:	1869      	adds	r1, r5, r1
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 - x, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
    }
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 8005a5e:	4682      	mov	sl, r0
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 8005a60:	4640      	mov	r0, r8
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005a62:	b212      	sxth	r2, r2
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + y, y0 - x, 1, color);
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
    }
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
 8005a64:	461e      	mov	r6, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 8005a66:	b209      	sxth	r1, r1
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005a68:	9202      	str	r2, [sp, #8]
	int16_t x = 0;
	int16_t y = r;
 8005a6a:	b22a      	sxth	r2, r5

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
 8005a6c:	fa0f f987 	sxth.w	r9, r7
void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;
 8005a70:	9200      	str	r2, [sp, #0]

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
 8005a72:	2201      	movs	r2, #1
 8005a74:	f7ff fdb2 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
 8005a78:	1b79      	subs	r1, r7, r5
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4633      	mov	r3, r6
 8005a7e:	2201      	movs	r2, #1
 8005a80:	b209      	sxth	r1, r1
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
 8005a82:	ebc5 080a 	rsb	r8, r5, sl
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
 8005a86:	f7ff fda9 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
 8005a8a:	eb05 000a 	add.w	r0, r5, sl
 8005a8e:	4633      	mov	r3, r6
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
 8005a90:	fa0f f888 	sxth.w	r8, r8
	int16_t x = 0;
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
 8005a94:	2201      	movs	r2, #1
 8005a96:	4649      	mov	r1, r9
 8005a98:	b200      	sxth	r0, r0
 8005a9a:	f7ff fd9f 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
 8005a9e:	4633      	mov	r3, r6
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4640      	mov	r0, r8
        TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - y, y0 - x, 1, color);
    }
}

void TM_DMA2DGRAPHIC_DrawFilledCircle(uint16_t x0, uint16_t y0, uint16_t r, uint32_t color) {
	int16_t f = 1 - r;
 8005aa6:	b224      	sxth	r4, r4
	int16_t y = r;

    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 + r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
 8005aa8:	f7ff fd98 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
    TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - r, y0, 2 * r, color);
 8005aac:	4633      	mov	r3, r6
 8005aae:	006a      	lsls	r2, r5, #1
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	f7ff febd 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>

    while (x < y) {
 8005aba:	2300      	movs	r3, #0
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ac2:	9303      	str	r3, [sp, #12]
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 + y, 2 * x, color);
		TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 - y, 2 * x, color);

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 + x, 2 * y, color);
 8005ac4:	1c7b      	adds	r3, r7, #1
 8005ac6:	9304      	str	r3, [sp, #16]
        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 - x, 2 * y, color);
 8005ac8:	1e7b      	subs	r3, r7, #1
 8005aca:	9305      	str	r3, [sp, #20]
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0, y0 - r, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 + r, y0, 1, color);
    TM_DMA2DGRAPHIC_DrawVerticalLine(x0 - r, y0, 1, color);
    TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - r, y0, 2 * r, color);

    while (x < y) {
 8005acc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8005ad0:	9a00      	ldr	r2, [sp, #0]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	da49      	bge.n	8005b6a <TM_DMA2DGRAPHIC_DrawFilledCircle+0x126>
        if (f >= 0) {
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	db0a      	blt.n	8005af0 <TM_DMA2DGRAPHIC_DrawFilledCircle+0xac>
            y--;
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b21b      	sxth	r3, r3
 8005ae0:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8005ae2:	9b02      	ldr	r3, [sp, #8]
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	b29b      	uxth	r3, r3
            f += ddF_y;
 8005ae8:	441c      	add	r4, r3
    TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - r, y0, 2 * r, color);

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005aea:	b21a      	sxth	r2, r3
            f += ddF_y;
 8005aec:	b224      	sxth	r4, r4
    TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - r, y0, 2 * r, color);

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005aee:	9202      	str	r2, [sp, #8]
 8005af0:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	f108 0901 	add.w	r9, r8, #1
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 + y, 2 * x, color);
 8005afa:	f8bd 5000 	ldrh.w	r5, [sp]
 8005afe:	ebc8 0b03 	rsb	fp, r8, r3
 8005b02:	4633      	mov	r3, r6
 8005b04:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8005b08:	1979      	adds	r1, r7, r5
 8005b0a:	fa0f fb8b 	sxth.w	fp, fp
 8005b0e:	fa1f f989 	uxth.w	r9, r9
 8005b12:	b209      	sxth	r1, r1
 8005b14:	4658      	mov	r0, fp
 8005b16:	464a      	mov	r2, r9
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005b18:	eb04 0448 	add.w	r4, r4, r8, lsl #1

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 + y, 2 * x, color);
 8005b1c:	f7ff fe8a 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
		TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 - y, 2 * x, color);
 8005b20:	1b79      	subs	r1, r7, r5
 8005b22:	464a      	mov	r2, r9
 8005b24:	4633      	mov	r3, r6
 8005b26:	b209      	sxth	r1, r1
 8005b28:	4658      	mov	r0, fp
 8005b2a:	f7ff fe83 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 + x, 2 * y, color);
 8005b2e:	ebc5 090a 	rsb	r9, r5, sl
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	006d      	lsls	r5, r5, #1
 8005b36:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005b3a:	3403      	adds	r4, #3

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 + y, 2 * x, color);
		TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 - y, 2 * x, color);

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 + x, 2 * y, color);
 8005b3c:	b2ad      	uxth	r5, r5
 8005b3e:	eb08 0103 	add.w	r1, r8, r3
 8005b42:	4648      	mov	r0, r9
 8005b44:	4633      	mov	r3, r6
 8005b46:	462a      	mov	r2, r5
 8005b48:	b209      	sxth	r1, r1
 8005b4a:	f7ff fe73 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 - x, 2 * y, color);
 8005b4e:	9b05      	ldr	r3, [sp, #20]
 8005b50:	462a      	mov	r2, r5
 8005b52:	4648      	mov	r0, r9
 8005b54:	ebc8 0103 	rsb	r1, r8, r3
 8005b58:	4633      	mov	r3, r6
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005b5a:	b224      	sxth	r4, r4

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 + y, 2 * x, color);
		TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - x, y0 - y, 2 * x, color);

        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 + x, 2 * y, color);
        TM_DMA2DGRAPHIC_DrawHorizontalLine(x0 - y, y0 - x, 2 * y, color);
 8005b5c:	b209      	sxth	r1, r1
 8005b5e:	f7ff fe69 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
 8005b62:	9b01      	ldr	r3, [sp, #4]
 8005b64:	3301      	adds	r3, #1
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	e7b0      	b.n	8005acc <TM_DMA2DGRAPHIC_DrawFilledCircle+0x88>
    }
}
 8005b6a:	b007      	add	sp, #28
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b70 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner>:
	DMA2D_StartAddress = DIS.StartAddress + DIS.Offset + MemoryAddress;
	DMA2D_Width = PixelPerLine;
	DMA2D_Height = NumberOfLine;
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	469b      	mov	fp, r3
	int16_t f = 1 - r;
 8005b76:	b293      	uxth	r3, r2
	DMA2D_StartAddress = DIS.StartAddress + DIS.Offset + MemoryAddress;
	DMA2D_Width = PixelPerLine;
	DMA2D_Height = NumberOfLine;
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005b78:	b085      	sub	sp, #20
 8005b7a:	468a      	mov	sl, r1
	int16_t f = 1 - r;
 8005b7c:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005b80:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
	DMA2D_StartAddress = DIS.StartAddress + DIS.Offset + MemoryAddress;
	DMA2D_Width = PixelPerLine;
	DMA2D_Height = NumberOfLine;
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005b84:	4615      	mov	r5, r2
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
 8005b86:	f04f 0900 	mov.w	r9, #0
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005b8a:	005b      	lsls	r3, r3, #1
	DMA2D_Width = PixelPerLine;
	DMA2D_Height = NumberOfLine;
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
	int16_t f = 1 - r;
 8005b8c:	b224      	sxth	r4, r4
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005b8e:	b21b      	sxth	r3, r3
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */	
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 - x, color);
 8005b90:	b287      	uxth	r7, r0
}

void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005b92:	9301      	str	r3, [sp, #4]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */	
 8005b94:	f00b 0301 	and.w	r3, fp, #1
 8005b98:	9302      	str	r3, [sp, #8]
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
 8005b9a:	fa0f f389 	sxth.w	r3, r9
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	da7b      	bge.n	8005c9a <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0x12a>
        if (f >= 0) {
 8005ba2:	2c00      	cmp	r4, #0
 8005ba4:	db08      	blt.n	8005bb8 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0x48>
            y--;
            ddF_y += 2;
 8005ba6:	9b01      	ldr	r3, [sp, #4]
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
 8005ba8:	3d01      	subs	r5, #1
            ddF_y += 2;
 8005baa:	3302      	adds	r3, #2
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
 8005bac:	b22d      	sxth	r5, r5
            ddF_y += 2;
 8005bae:	b29b      	uxth	r3, r3
            f += ddF_y;
 8005bb0:	441c      	add	r4, r3
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005bb2:	b21a      	sxth	r2, r3
            f += ddF_y;
 8005bb4:	b224      	sxth	r4, r4
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	fa1f f689 	uxth.w	r6, r9
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */	
 8005bbc:	9b02      	ldr	r3, [sp, #8]
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005bbe:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8005bc2:	3403      	adds	r4, #3
 8005bc4:	b224      	sxth	r4, r4

        if (corner & 0x01) {/* Top left */	
 8005bc6:	b1bb      	cbz	r3, 8005bf8 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0x88>
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 - x, color);
 8005bc8:	fa1f f88a 	uxth.w	r8, sl
 8005bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bce:	b2ab      	uxth	r3, r5
 8005bd0:	f108 3eff 	add.w	lr, r8, #4294967295
 8005bd4:	1af8      	subs	r0, r7, r3
 8005bd6:	9303      	str	r3, [sp, #12]
 8005bd8:	ebc6 010e 	rsb	r1, r6, lr
 8005bdc:	b280      	uxth	r0, r0
 8005bde:	b289      	uxth	r1, r1
 8005be0:	f7ff fb18 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
			TM_DMA2DGRAPHIC_DrawPixel(x0 - x, y0 - y, color);
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	1e78      	subs	r0, r7, #1
 8005be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bea:	ebc3 0108 	rsb	r1, r3, r8
 8005bee:	1b80      	subs	r0, r0, r6
 8005bf0:	b289      	uxth	r1, r1
 8005bf2:	b280      	uxth	r0, r0
 8005bf4:	f7ff fb0e 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
		}
		
        if (corner & 0x02) {/* Top right */
 8005bf8:	f01b 0f02 	tst.w	fp, #2
 8005bfc:	d016      	beq.n	8005c2c <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0xbc>
			TM_DMA2DGRAPHIC_DrawPixel(x0 + x, y0 - y, color);
 8005bfe:	b2ab      	uxth	r3, r5
 8005c00:	1c78      	adds	r0, r7, #1
 8005c02:	fa1f f88a 	uxth.w	r8, sl
 8005c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c08:	4430      	add	r0, r6
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	ebc3 0108 	rsb	r1, r3, r8
 8005c10:	b280      	uxth	r0, r0
 8005c12:	b289      	uxth	r1, r1
 8005c14:	f7ff fafe 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
			TM_DMA2DGRAPHIC_DrawPixel(x0 + y, y0 - x, color);
 8005c18:	f108 31ff 	add.w	r1, r8, #4294967295
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	1b89      	subs	r1, r1, r6
 8005c20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c22:	18f8      	adds	r0, r7, r3
 8005c24:	b289      	uxth	r1, r1
 8005c26:	b280      	uxth	r0, r0
 8005c28:	f7ff faf4 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
		}
		
		if (corner & 0x04) {/* Bottom right */
 8005c2c:	f01b 0f04 	tst.w	fp, #4
 8005c30:	d016      	beq.n	8005c60 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0xf0>
			TM_DMA2DGRAPHIC_DrawPixel(x0 + x, y0 + y, color);
 8005c32:	b2ab      	uxth	r3, r5
 8005c34:	1c78      	adds	r0, r7, #1
 8005c36:	fa1f f88a 	uxth.w	r8, sl
 8005c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c3c:	4430      	add	r0, r6
 8005c3e:	9303      	str	r3, [sp, #12]
 8005c40:	eb08 0103 	add.w	r1, r8, r3
 8005c44:	b280      	uxth	r0, r0
 8005c46:	b289      	uxth	r1, r1
 8005c48:	f7ff fae4 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
			TM_DMA2DGRAPHIC_DrawPixel(x0 + y, y0 + x, color);
 8005c4c:	f108 0101 	add.w	r1, r8, #1
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	4431      	add	r1, r6
 8005c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c56:	18f8      	adds	r0, r7, r3
 8005c58:	b289      	uxth	r1, r1
 8005c5a:	b280      	uxth	r0, r0
 8005c5c:	f7ff fada 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
		}
		
        if (corner & 0x08) {/* Bottom left */	
 8005c60:	f01b 0f08 	tst.w	fp, #8
 8005c64:	d016      	beq.n	8005c94 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0x124>
			TM_DMA2DGRAPHIC_DrawPixel(x0 - x, y0 + y, color);
 8005c66:	b2ab      	uxth	r3, r5
 8005c68:	1e78      	subs	r0, r7, #1
 8005c6a:	fa1f f88a 	uxth.w	r8, sl
 8005c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c70:	1b80      	subs	r0, r0, r6
 8005c72:	9303      	str	r3, [sp, #12]
 8005c74:	eb08 0103 	add.w	r1, r8, r3
 8005c78:	b280      	uxth	r0, r0
 8005c7a:	b289      	uxth	r1, r1
 8005c7c:	f7ff faca 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 + x, color);
 8005c80:	f108 0101 	add.w	r1, r8, #1
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	4431      	add	r1, r6
 8005c88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c8a:	1af8      	subs	r0, r7, r3
 8005c8c:	b289      	uxth	r1, r1
 8005c8e:	b280      	uxth	r0, r0
 8005c90:	f7ff fac0 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
 8005c94:	f109 0901 	add.w	r9, r9, #1
 8005c98:	e77f      	b.n	8005b9a <TM_INT_DMA2DGRAPHIC_DrawCircleCorner+0x2a>
		}
    }
}
 8005c9a:	b005      	add	sp, #20
 8005c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ca0 <TM_DMA2DGRAPHIC_DrawRoundedRectangle>:
	/* Draw 2 horizontal lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y, width, color);
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y + height, width, color);
}

void TM_DMA2DGRAPHIC_DrawRoundedRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t r, uint32_t color) {
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	460e      	mov	r6, r1
 8005caa:	469a      	mov	sl, r3
 8005cac:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
	/* Check input parameters */
	if (width == 0 || height == 0) {
 8005cb0:	4691      	mov	r9, r2
	/* Draw 2 horizontal lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y, width, color);
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x, y + height, width, color);
}

void TM_DMA2DGRAPHIC_DrawRoundedRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t r, uint32_t color) {
 8005cb2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	/* Check input parameters */
	if (width == 0 || height == 0) {
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	d07b      	beq.n	8005db0 <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x110>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d079      	beq.n	8005db0 <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x110>
		return;
	}
	
	/* Check max radius */
	if (r > (width / 2)) {
 8005cbc:	0853      	lsrs	r3, r2, #1
		r = width / 2 - 1;
	}
	if (r > (height / 2)) {
 8005cbe:	ea4f 025a 	mov.w	r2, sl, lsr #1
	if (width == 0 || height == 0) {
		return;
	}
	
	/* Check max radius */
	if (r > (width / 2)) {
 8005cc2:	42a3      	cmp	r3, r4
		r = width / 2 - 1;
 8005cc4:	bf3c      	itt	cc
 8005cc6:	f103 34ff 	addcc.w	r4, r3, #4294967295
 8005cca:	b2a4      	uxthcc	r4, r4
	}
	if (r > (height / 2)) {
 8005ccc:	4294      	cmp	r4, r2
 8005cce:	d96c      	bls.n	8005daa <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x10a>
		r = height / 2 - 1;
 8005cd0:	1e54      	subs	r4, r2, #1
 8005cd2:	b2a4      	uxth	r4, r4
	}
	if (
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d302      	bcc.n	8005cde <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x3e>
		r > (width / 2) || 
 8005cd8:	42a2      	cmp	r2, r4
 8005cda:	d300      	bcc.n	8005cde <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x3e>
	) {
		r = 0;
	}
	
	/* No radius */
	if (r == 0) {
 8005cdc:	b94c      	cbnz	r4, 8005cf2 <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x52>
		/* Draw normal rectangle */
		TM_DMA2DGRAPHIC_DrawRectangle(x, y, width, height, color);
 8005cde:	4653      	mov	r3, sl
 8005ce0:	464a      	mov	r2, r9
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	970e      	str	r7, [sp, #56]	; 0x38
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}
 8005ce8:	b005      	add	sp, #20
 8005cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	}
	
	/* No radius */
	if (r == 0) {
		/* Draw normal rectangle */
		TM_DMA2DGRAPHIC_DrawRectangle(x, y, width, height, color);
 8005cee:	f7ff be27 	b.w	8005940 <TM_DMA2DGRAPHIC_DrawRectangle>
		/* Return from function */
		return;
	}
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
 8005cf2:	0063      	lsls	r3, r4, #1
 8005cf4:	eb05 0804 	add.w	r8, r5, r4
 8005cf8:	b231      	sxth	r1, r6
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	fa0f f888 	sxth.w	r8, r8
 8005d00:	ebc3 0b09 	rsb	fp, r3, r9
 8005d04:	9302      	str	r3, [sp, #8]
 8005d06:	4640      	mov	r0, r8
 8005d08:	463b      	mov	r3, r7
 8005d0a:	fa1f fb8b 	uxth.w	fp, fp
 8005d0e:	465a      	mov	r2, fp
 8005d10:	f7ff fd90 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
 8005d14:	1e73      	subs	r3, r6, #1
 8005d16:	465a      	mov	r2, fp
 8005d18:	4640      	mov	r0, r8
 8005d1a:	4453      	add	r3, sl
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d1c:	4426      	add	r6, r4
		return;
	}
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
 8005d1e:	b29b      	uxth	r3, r3
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d20:	b236      	sxth	r6, r6
		return;
	}
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	463b      	mov	r3, r7
 8005d26:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8005d2a:	f7ff fd83 	bl	8005834 <TM_DMA2DGRAPHIC_DrawHorizontalLine>
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d2e:	9b02      	ldr	r3, [sp, #8]
 8005d30:	b228      	sxth	r0, r5
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d32:	3d01      	subs	r5, #1
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d34:	ebc3 0a0a 	rsb	sl, r3, sl
 8005d38:	4631      	mov	r1, r6
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d3a:	44a9      	add	r9, r5
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	fa1f fa8a 	uxth.w	sl, sl
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d42:	fa1f f989 	uxth.w	r9, r9
	
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
 8005d46:	4652      	mov	r2, sl
 8005d48:	f7ff fc48 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d4c:	4652      	mov	r2, sl
 8005d4e:	fa0f f089 	sxth.w	r0, r9
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005d52:	ebc4 0909 	rsb	r9, r4, r9
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
 8005d56:	fa0f fa84 	sxth.w	sl, r4
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4631      	mov	r1, r6
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005d5e:	fa0f f989 	sxth.w	r9, r9
	/* Draw lines */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y, width - 2 * r, color); /* Top */
	TM_DMA2DGRAPHIC_DrawHorizontalLine(x + r, y + height - 1, width - 2 * r, color); /* Bottom */
	
	TM_DMA2DGRAPHIC_DrawVerticalLine(x, y + r, height - 2 * r, color); /* Right */
	TM_DMA2DGRAPHIC_DrawVerticalLine(x + width - 1, y + r, height - 2 * r, color); /* Left */
 8005d62:	f7ff fc3b 	bl	80055dc <TM_DMA2DGRAPHIC_DrawVerticalLine>
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
 8005d66:	4652      	mov	r2, sl
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	9700      	str	r7, [sp, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f7ff fefe 	bl	8005b70 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005d74:	4652      	mov	r2, sl
 8005d76:	4631      	mov	r1, r6
 8005d78:	4648      	mov	r0, r9
 8005d7a:	9700      	str	r7, [sp, #0]
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f7ff fef7 	bl	8005b70 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	4652      	mov	r2, sl
 8005d86:	4648      	mov	r0, r9
 8005d88:	1b1c      	subs	r4, r3, r4
 8005d8a:	9700      	str	r7, [sp, #0]
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	b224      	sxth	r4, r4
 8005d90:	4621      	mov	r1, r4
 8005d92:	f7ff feed 	bl	8005b70 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
 8005d96:	2308      	movs	r3, #8
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	970e      	str	r7, [sp, #56]	; 0x38
}
 8005da0:	b005      	add	sp, #20
 8005da2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
 8005da6:	f7ff bee3 	b.w	8005b70 <TM_INT_DMA2DGRAPHIC_DrawCircleCorner>
		r = width / 2 - 1;
	}
	if (r > (height / 2)) {
		r = height / 2 - 1;
	}
	if (
 8005daa:	429c      	cmp	r4, r3
 8005dac:	d897      	bhi.n	8005cde <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x3e>
 8005dae:	e795      	b.n	8005cdc <TM_DMA2DGRAPHIC_DrawRoundedRectangle+0x3c>
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}
 8005db0:	b005      	add	sp, #20
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005db6 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner>:
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 + x, color);
		}
    }
}

void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	4616      	mov	r6, r2
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */
			TM_DMA2DGRAPHIC_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 8005dc0:	fa1f f981 	uxth.w	r9, r1
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 + x, color);
		}
    }
}

void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005dc4:	9303      	str	r3, [sp, #12]
	int16_t f = 1 - r;
 8005dc6:	b293      	uxth	r3, r2
			TM_DMA2DGRAPHIC_DrawPixel(x0 - y, y0 + x, color);
		}
    }
}

void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
 8005dc8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	int16_t f = 1 - r;
 8005dcc:	f1c3 0501 	rsb	r5, r3, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005dd0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8005dd4:	005b      	lsls	r3, r3, #1
		}
    }
}

void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color) {
	int16_t f = 1 - r;
 8005dd6:	b22d      	sxth	r5, r5
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	9304      	str	r3, [sp, #16]
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9302      	str	r3, [sp, #8]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	9305      	str	r3, [sp, #20]
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
 8005de8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005dec:	42b3      	cmp	r3, r6
 8005dee:	f280 8098 	bge.w	8005f22 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x16c>
        if (f >= 0) {
 8005df2:	2d00      	cmp	r5, #0
 8005df4:	db08      	blt.n	8005e08 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x52>
            y--;
            ddF_y += 2;
 8005df6:	9b04      	ldr	r3, [sp, #16]
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
 8005df8:	3e01      	subs	r6, #1
            ddF_y += 2;
 8005dfa:	3302      	adds	r3, #2
	int16_t x = 0;
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
 8005dfc:	b236      	sxth	r6, r6
            ddF_y += 2;
 8005dfe:	b29b      	uxth	r3, r3
            f += ddF_y;
 8005e00:	441d      	add	r5, r3
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005e02:	b21a      	sxth	r2, r3
            f += ddF_y;
 8005e04:	b22d      	sxth	r5, r5
	int16_t y = r;

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
 8005e06:	9204      	str	r2, [sp, #16]
 8005e08:	f8bd 7008 	ldrh.w	r7, [sp, #8]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        if (corner & 0x01) {/* Top left */
 8005e0c:	9b05      	ldr	r3, [sp, #20]
            ddF_y += 2;
            f += ddF_y;
        }
        x++;
        ddF_x += 2;
        f += ddF_x;
 8005e0e:	eb05 0547 	add.w	r5, r5, r7, lsl #1
 8005e12:	3503      	adds	r5, #3
 8005e14:	b22d      	sxth	r5, r5

        if (corner & 0x01) {/* Top left */
 8005e16:	b1eb      	cbz	r3, 8005e54 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x9e>
			TM_DMA2DGRAPHIC_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 8005e18:	fa1f fb86 	uxth.w	fp, r6
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	fa1f fa84 	uxth.w	sl, r4
 8005e22:	f8cd 8000 	str.w	r8, [sp]
 8005e26:	ebcb 0309 	rsb	r3, fp, r9
 8005e2a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005e2e:	b21b      	sxth	r3, r3
 8005e30:	1bd2      	subs	r2, r2, r7
 8005e32:	4619      	mov	r1, r3
 8005e34:	b212      	sxth	r2, r2
 8005e36:	f7ff fdab 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
 8005e3a:	f109 33ff 	add.w	r3, r9, #4294967295
			TM_DMA2DGRAPHIC_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 8005e3e:	ebcb 020a 	rsb	r2, fp, sl
 8005e42:	f8cd 8000 	str.w	r8, [sp]
 8005e46:	1bdb      	subs	r3, r3, r7
 8005e48:	4620      	mov	r0, r4
 8005e4a:	b212      	sxth	r2, r2
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f7ff fd9e 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
		}
		
        if (corner & 0x02) {/* Top right */
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	0799      	lsls	r1, r3, #30
 8005e58:	d51d      	bpl.n	8005e96 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0xe0>
			TM_DMA2DGRAPHIC_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 8005e5a:	fa1f fb84 	uxth.w	fp, r4
 8005e5e:	4622      	mov	r2, r4
 8005e60:	fa1f fa86 	uxth.w	sl, r6
 8005e64:	f8cd 8000 	str.w	r8, [sp]
 8005e68:	f10b 0001 	add.w	r0, fp, #1
 8005e6c:	ebca 0309 	rsb	r3, sl, r9
 8005e70:	4438      	add	r0, r7
 8005e72:	b21b      	sxth	r3, r3
 8005e74:	b200      	sxth	r0, r0
 8005e76:	4619      	mov	r1, r3
 8005e78:	f7ff fd8a 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
 8005e7c:	f109 33ff 	add.w	r3, r9, #4294967295
			TM_DMA2DGRAPHIC_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 8005e80:	eb0b 000a 	add.w	r0, fp, sl
 8005e84:	f8cd 8000 	str.w	r8, [sp]
 8005e88:	1bdb      	subs	r3, r3, r7
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	b200      	sxth	r0, r0
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7ff fd7d 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
		}
		
		if (corner & 0x04) {/* Bottom right */
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	075a      	lsls	r2, r3, #29
 8005e9a:	d51d      	bpl.n	8005ed8 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x122>
			TM_DMA2DGRAPHIC_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 8005e9c:	fa1f fb86 	uxth.w	fp, r6
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	fa1f fa84 	uxth.w	sl, r4
 8005ea6:	f8cd 8000 	str.w	r8, [sp]
 8005eaa:	eb09 030b 	add.w	r3, r9, fp
 8005eae:	f10a 0201 	add.w	r2, sl, #1
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	443a      	add	r2, r7
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	b212      	sxth	r2, r2
 8005eba:	f7ff fd69 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
 8005ebe:	f109 0301 	add.w	r3, r9, #1
			TM_DMA2DGRAPHIC_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 8005ec2:	eb0b 000a 	add.w	r0, fp, sl
 8005ec6:	f8cd 8000 	str.w	r8, [sp]
 8005eca:	443b      	add	r3, r7
 8005ecc:	4622      	mov	r2, r4
 8005ece:	b200      	sxth	r0, r0
 8005ed0:	b21b      	sxth	r3, r3
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7ff fd5c 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
		}
		
        if (corner & 0x08) {/* Bottom left */
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	071b      	lsls	r3, r3, #28
 8005edc:	d51d      	bpl.n	8005f1a <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x164>
			TM_DMA2DGRAPHIC_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 8005ede:	fa1f fa84 	uxth.w	sl, r4
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	fa1f fb86 	uxth.w	fp, r6
 8005ee8:	f8cd 8000 	str.w	r8, [sp]
 8005eec:	f10a 30ff 	add.w	r0, sl, #4294967295
 8005ef0:	eb09 030b 	add.w	r3, r9, fp
 8005ef4:	1bc0      	subs	r0, r0, r7
 8005ef6:	b21b      	sxth	r3, r3
 8005ef8:	b200      	sxth	r0, r0
 8005efa:	4619      	mov	r1, r3
 8005efc:	f7ff fd48 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
 8005f00:	f109 0301 	add.w	r3, r9, #1
			TM_DMA2DGRAPHIC_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 8005f04:	ebcb 020a 	rsb	r2, fp, sl
 8005f08:	f8cd 8000 	str.w	r8, [sp]
 8005f0c:	443b      	add	r3, r7
 8005f0e:	4620      	mov	r0, r4
 8005f10:	b212      	sxth	r2, r2
 8005f12:	b21b      	sxth	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	f7ff fd3b 	bl	8005990 <TM_DMA2DGRAPHIC_DrawLine>
 8005f1a:	9b02      	ldr	r3, [sp, #8]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	9302      	str	r3, [sp, #8]
 8005f20:	e762      	b.n	8005de8 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner+0x32>
		}
    }
}
 8005f22:	b007      	add	sp, #28
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f28 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle>:
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}

void TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t r, uint32_t color) {
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	4605      	mov	r5, r0
 8005f30:	460e      	mov	r6, r1
 8005f32:	469b      	mov	fp, r3
 8005f34:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
	/* Check input parameters */
	if (width == 0 || width == 0) {
 8005f38:	4692      	mov	sl, r2
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}

void TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t r, uint32_t color) {
 8005f3a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	/* Check input parameters */
	if (width == 0 || width == 0) {
 8005f3e:	2a00      	cmp	r2, #0
 8005f40:	d076      	beq.n	8006030 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x108>
		return;
	}
	
	/* Check max radius */
	if (r > (width / 2)) {
 8005f42:	0853      	lsrs	r3, r2, #1
		r = width / 2 - 1;
	}
	if (r > (height / 2)) {
 8005f44:	ea4f 025b 	mov.w	r2, fp, lsr #1
	if (width == 0 || width == 0) {
		return;
	}
	
	/* Check max radius */
	if (r > (width / 2)) {
 8005f48:	42a3      	cmp	r3, r4
		r = width / 2 - 1;
 8005f4a:	bf3c      	itt	cc
 8005f4c:	f103 34ff 	addcc.w	r4, r3, #4294967295
 8005f50:	b2a4      	uxthcc	r4, r4
	}
	if (r > (height / 2)) {
 8005f52:	4294      	cmp	r4, r2
 8005f54:	d969      	bls.n	800602a <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x102>
		r = height / 2 - 1;
 8005f56:	1e54      	subs	r4, r2, #1
 8005f58:	b2a4      	uxth	r4, r4
	}
	if (
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	d302      	bcc.n	8005f64 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x3c>
		r > (width / 2) || 
 8005f5e:	42a2      	cmp	r2, r4
 8005f60:	d300      	bcc.n	8005f64 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x3c>
	) {
		r = 0;
	}
	
	/* No radius */
	if (r == 0) {
 8005f62:	b954      	cbnz	r4, 8005f7a <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x52>
		TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y, width, height, color);
 8005f64:	465b      	mov	r3, fp
 8005f66:	4652      	mov	r2, sl
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}
 8005f70:	b005      	add	sp, #20
 8005f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		r = 0;
	}
	
	/* No radius */
	if (r == 0) {
		TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y, width, height, color);
 8005f76:	f7ff baa7 	b.w	80054c8 <TM_DMA2DGRAPHIC_DrawFilledRectangle>
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
 8005f7a:	0067      	lsls	r7, r4, #1
 8005f7c:	192b      	adds	r3, r5, r4
 8005f7e:	4631      	mov	r1, r6
 8005f80:	f8cd 8000 	str.w	r8, [sp]
 8005f84:	b2bf      	uxth	r7, r7
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005f86:	eb06 0904 	add.w	r9, r6, r4
		TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y, width, height, color);
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
 8005f8a:	b29b      	uxth	r3, r3
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8005f8c:	3e01      	subs	r6, #1
		TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y, width, height, color);
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
 8005f8e:	ebc7 020a 	rsb	r2, r7, sl
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005f92:	ebc7 070b 	rsb	r7, r7, fp
		TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y, width, height, color);
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
 8005f96:	9303      	str	r3, [sp, #12]
 8005f98:	465b      	mov	r3, fp
 8005f9a:	9803      	ldr	r0, [sp, #12]
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	f7ff fa93 	bl	80054c8 <TM_DMA2DGRAPHIC_DrawFilledRectangle>
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005fa2:	4628      	mov	r0, r5
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
 8005fa4:	4455      	add	r5, sl
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005fa6:	fa1f f989 	uxth.w	r9, r9
 8005faa:	b2bf      	uxth	r7, r7
 8005fac:	4622      	mov	r2, r4
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
 8005fae:	1b2d      	subs	r5, r5, r4
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	f8cd 8000 	str.w	r8, [sp]
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
 8005fb8:	b2ad      	uxth	r5, r5
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8005fba:	44b3      	add	fp, r6
		return;
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
 8005fbc:	f7ff fa84 	bl	80054c8 <TM_DMA2DGRAPHIC_DrawFilledRectangle>
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f8cd 8000 	str.w	r8, [sp]
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005fcc:	3d01      	subs	r5, #1
	}
	
	/* Draw rectangles */
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
 8005fce:	f7ff fa7b 	bl	80054c8 <TM_DMA2DGRAPHIC_DrawFilledRectangle>
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
 8005fd2:	b227      	sxth	r7, r4
 8005fd4:	f9bd a00c 	ldrsh.w	sl, [sp, #12]
 8005fd8:	fa0f f989 	sxth.w	r9, r9
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8005fdc:	ebc4 040b 	rsb	r4, r4, fp
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005fe0:	b22d      	sxth	r5, r5
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
 8005fe2:	463a      	mov	r2, r7
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	4650      	mov	r0, sl
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8005fe8:	b224      	sxth	r4, r4
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + r, y, width - 2 * r, height, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x, y + r, r, height - 2 * r, color);
	TM_DMA2DGRAPHIC_DrawFilledRectangle(x + width - r, y + r, r, height - 2 * r, color);
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
 8005fea:	f8cd 8000 	str.w	r8, [sp]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f7ff fee1 	bl	8005db6 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
 8005ff4:	463a      	mov	r2, r7
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f8cd 8000 	str.w	r8, [sp]
 8005ffe:	2302      	movs	r3, #2
 8006000:	f7ff fed9 	bl	8005db6 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
 8006004:	463a      	mov	r2, r7
 8006006:	4621      	mov	r1, r4
 8006008:	4628      	mov	r0, r5
 800600a:	f8cd 8000 	str.w	r8, [sp]
 800600e:	2304      	movs	r3, #4
 8006010:	f7ff fed1 	bl	8005db6 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner>
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
 8006014:	2308      	movs	r3, #8
 8006016:	463a      	mov	r2, r7
 8006018:	4621      	mov	r1, r4
 800601a:	4650      	mov	r0, sl
 800601c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
}
 8006020:	b005      	add	sp, #20
 8006022:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
 8006026:	f7ff bec6 	b.w	8005db6 <TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner>
		r = width / 2 - 1;
	}
	if (r > (height / 2)) {
		r = height / 2 - 1;
	}
	if (
 800602a:	429c      	cmp	r4, r3
 800602c:	d89a      	bhi.n	8005f64 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x3c>
 800602e:	e798      	b.n	8005f62 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle+0x3a>
	/* Draw corners */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + r, r, 0x01, color); /* Top left */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + r, r, 0x02, color); /* Top right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + width - r - 1, y + height - r - 1, r, 0x04, color); /* Bottom right */
	TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(x + r, y + height - r - 1, r, 0x08, color); /* Bottom left */
}
 8006030:	b005      	add	sp, #20
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006036 <TM_FONT_GetStringSize>:
	TM_Font16x26
};

char* TM_FONT_GetStringSize(char* str, TM_FONT_SIZE_t* SizeStruct, TM_FONT_t* Font) {
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
 8006036:	7853      	ldrb	r3, [r2, #1]
	16,
	26,
	TM_Font16x26
};

char* TM_FONT_GetStringSize(char* str, TM_FONT_SIZE_t* SizeStruct, TM_FONT_t* Font) {
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4615      	mov	r5, r2
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
 800603c:	804b      	strh	r3, [r1, #2]
	16,
	26,
	TM_Font16x26
};

char* TM_FONT_GetStringSize(char* str, TM_FONT_SIZE_t* SizeStruct, TM_FONT_t* Font) {
 800603e:	4606      	mov	r6, r0
 8006040:	460c      	mov	r4, r1
	/* Fill settings */
	SizeStruct->Height = Font->FontHeight;
	SizeStruct->Width = Font->FontWidth * strlen(str);
 8006042:	f7fa f8e5 	bl	8000210 <strlen>
 8006046:	782b      	ldrb	r3, [r5, #0]
 8006048:	fb13 f000 	smulbb	r0, r3, r0
 800604c:	8020      	strh	r0, [r4, #0]
	
	/* Return pointer */
	return str;
}
 800604e:	4630      	mov	r0, r6
 8006050:	bd70      	pop	{r4, r5, r6, pc}
	...

08006054 <TM_GPIO_INT_EnableClock>:
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8006054:	f100 403f 	add.w	r0, r0, #3204448256	; 0xbf000000
 8006058:	4905      	ldr	r1, [pc, #20]	; (8006070 <TM_GPIO_INT_EnableClock+0x1c>)
 800605a:	2201      	movs	r2, #1
 800605c:	f500 007e 	add.w	r0, r0, #16646144	; 0xfe0000
 8006060:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006062:	f3c0 208f 	ubfx	r0, r0, #10, #16
 8006066:	fa02 f000 	lsl.w	r0, r2, r0
 800606a:	4303      	orrs	r3, r0
 800606c:	630b      	str	r3, [r1, #48]	; 0x30
 800606e:	4770      	bx	lr
 8006070:	40023800 	.word	0x40023800

08006074 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8006078:	f100 463f 	add.w	r6, r0, #3204448256	; 0xbf000000
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800607c:	b085      	sub	sp, #20
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800607e:	f102 3eff 	add.w	lr, r2, #4294967295
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8006082:	2500      	movs	r5, #0
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006084:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8006088:	f506 067e 	add.w	r6, r6, #16646144	; 0xfe0000
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800608c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8006134 <TM_GPIO_INT_Init+0xc0>
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8006090:	f04f 0b03 	mov.w	fp, #3
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006094:	9402      	str	r4, [sp, #8]
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8006096:	f3c6 2687 	ubfx	r6, r6, #10, #8
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800609a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800609e:	fa5f fe8e 	uxtb.w	lr, lr
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	9403      	str	r4, [sp, #12]
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80060a6:	fa41 f405 	asr.w	r4, r1, r5
 80060aa:	07e3      	lsls	r3, r4, #31
 80060ac:	d53c      	bpl.n	8006128 <TM_GPIO_INT_Init+0xb4>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f839 4016 	ldrh.w	r4, [r9, r6, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80060b4:	f8d0 800c 	ldr.w	r8, [r0, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80060b8:	f1be 0f01 	cmp.w	lr, #1
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80060bc:	fa03 fa05 	lsl.w	sl, r3, r5
 80060c0:	ea4a 0404 	orr.w	r4, sl, r4
 80060c4:	f829 4016 	strh.w	r4, [r9, r6, lsl #1]
 80060c8:	fa05 f403 	lsl.w	r4, r5, r3
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80060cc:	9b02      	ldr	r3, [sp, #8]
 80060ce:	fa0b f704 	lsl.w	r7, fp, r4
 80060d2:	fa03 fc04 	lsl.w	ip, r3, r4
 80060d6:	ea6f 0707 	mvn.w	r7, r7
 80060da:	ea07 0808 	and.w	r8, r7, r8
 80060de:	ea48 0c0c 	orr.w	ip, r8, ip
 80060e2:	f8c0 c00c 	str.w	ip, [r0, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80060e6:	fa02 fc04 	lsl.w	ip, r2, r4
 80060ea:	f8d0 8000 	ldr.w	r8, [r0]
 80060ee:	ea08 0807 	and.w	r8, r8, r7
 80060f2:	ea48 0c0c 	orr.w	ip, r8, ip
 80060f6:	f8c0 c000 	str.w	ip, [r0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80060fa:	d815      	bhi.n	8006128 <TM_GPIO_INT_Init+0xb4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80060fc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8006100:	9b01      	ldr	r3, [sp, #4]
 8006102:	ea2c 0a0a 	bic.w	sl, ip, sl
 8006106:	fa03 fc05 	lsl.w	ip, r3, r5
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800610a:	9b03      	ldr	r3, [sp, #12]
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800610c:	fa1f fc8c 	uxth.w	ip, ip
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8006110:	fa03 f404 	lsl.w	r4, r3, r4
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8006114:	ea4a 0a0c 	orr.w	sl, sl, ip
 8006118:	f8c0 a004 	str.w	sl, [r0, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800611c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8006120:	ea07 070c 	and.w	r7, r7, ip
 8006124:	4327      	orrs	r7, r4
 8006126:	6087      	str	r7, [r0, #8]
 8006128:	3501      	adds	r5, #1
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800612a:	2d10      	cmp	r5, #16
 800612c:	d1bb      	bne.n	80060a6 <TM_GPIO_INT_Init+0x32>
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
		}
	}
}
 800612e:	b005      	add	sp, #20
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	20004474 	.word	0x20004474

08006138 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	4605      	mov	r5, r0
 800613e:	4616      	mov	r6, r2
 8006140:	461f      	mov	r7, r3
 8006142:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8006146:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	/* Check input */
	if (GPIO_Pin == 0x00) {
 800614a:	460c      	mov	r4, r1
 800614c:	b169      	cbz	r1, 800616a <TM_GPIO_Init+0x32>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 800614e:	f7ff ff81 	bl	8006054 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006156:	f8cd 8020 	str.w	r8, [sp, #32]
 800615a:	463b      	mov	r3, r7
 800615c:	4632      	mov	r2, r6
 800615e:	4621      	mov	r1, r4
 8006160:	4628      	mov	r0, r5
}
 8006162:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8006166:	f7ff bf85 	b.w	8006074 <TM_GPIO_INT_Init>
 800616a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800616e <TM_GPIO_InitAlternate>:
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800616e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006172:	4605      	mov	r5, r0
 8006174:	4616      	mov	r6, r2
 8006176:	461f      	mov	r7, r3
 8006178:	f89d 8020 	ldrb.w	r8, [sp, #32]
 800617c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8006180:	460c      	mov	r4, r1
 8006182:	b329      	cbz	r1, 80061d0 <TM_GPIO_InitAlternate+0x62>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8006184:	f7ff ff66 	bl	8006054 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006188:	2300      	movs	r3, #0
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800618a:	f04f 0e0f 	mov.w	lr, #15
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800618e:	fa44 f203 	asr.w	r2, r4, r3
 8006192:	07d2      	lsls	r2, r2, #31
 8006194:	d50e      	bpl.n	80061b4 <TM_GPIO_InitAlternate+0x46>
 8006196:	08da      	lsrs	r2, r3, #3
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8006198:	f003 0007 	and.w	r0, r3, #7
 800619c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80061a0:	0080      	lsls	r0, r0, #2
 80061a2:	6a11      	ldr	r1, [r2, #32]
 80061a4:	fa0e fc00 	lsl.w	ip, lr, r0
 80061a8:	fa09 f000 	lsl.w	r0, r9, r0
 80061ac:	ea21 010c 	bic.w	r1, r1, ip
 80061b0:	4308      	orrs	r0, r1
 80061b2:	6210      	str	r0, [r2, #32]
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80061b4:	3301      	adds	r3, #1
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d1e9      	bne.n	800618e <TM_GPIO_InitAlternate+0x20>
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80061ba:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80061be:	4633      	mov	r3, r6
 80061c0:	9708      	str	r7, [sp, #32]
 80061c2:	4621      	mov	r1, r4
 80061c4:	4628      	mov	r0, r5
 80061c6:	2202      	movs	r2, #2
}
 80061c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80061cc:	f7ff bf52 	b.w	8006074 <TM_GPIO_INT_Init>
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061d4 <TM_I2C_GetHandle>:
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack);
#endif

I2C_HandleTypeDef* TM_I2C_GetHandle(I2C_TypeDef* I2Cx) {
#ifdef I2C1
	if (I2Cx == I2C1) {
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <TM_I2C_GetHandle+0x30>)
 80061d6:	4298      	cmp	r0, r3
 80061d8:	d00e      	beq.n	80061f8 <TM_I2C_GetHandle+0x24>
		return &I2C1Handle;
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
 80061da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061de:	4298      	cmp	r0, r3
 80061e0:	d00c      	beq.n	80061fc <TM_I2C_GetHandle+0x28>
		return &I2C2Handle;
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 80061e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e6:	4298      	cmp	r0, r3
 80061e8:	d00a      	beq.n	8006200 <TM_I2C_GetHandle+0x2c>
		return &I2C4Handle;
	}
#endif
	
	/* Return invalid */
	return 0;
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <TM_I2C_GetHandle+0x34>)
 80061ec:	4a07      	ldr	r2, [pc, #28]	; (800620c <TM_I2C_GetHandle+0x38>)
 80061ee:	4290      	cmp	r0, r2
 80061f0:	bf0c      	ite	eq
 80061f2:	4618      	moveq	r0, r3
 80061f4:	2000      	movne	r0, #0
 80061f6:	4770      	bx	lr
#endif

I2C_HandleTypeDef* TM_I2C_GetHandle(I2C_TypeDef* I2Cx) {
#ifdef I2C1
	if (I2Cx == I2C1) {
		return &I2C1Handle;
 80061f8:	4805      	ldr	r0, [pc, #20]	; (8006210 <TM_I2C_GetHandle+0x3c>)
 80061fa:	4770      	bx	lr
	}
#endif
#ifdef I2C2
	if (I2Cx == I2C2) {
		return &I2C2Handle;
 80061fc:	4805      	ldr	r0, [pc, #20]	; (8006214 <TM_I2C_GetHandle+0x40>)
 80061fe:	4770      	bx	lr
	}
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
		return &I2C3Handle;
 8006200:	4805      	ldr	r0, [pc, #20]	; (8006218 <TM_I2C_GetHandle+0x44>)
	}
#endif
	
	/* Return invalid */
	return 0;
}
 8006202:	4770      	bx	lr
 8006204:	40005400 	.word	0x40005400
 8006208:	200000b8 	.word	0x200000b8
 800620c:	40006000 	.word	0x40006000
 8006210:	20000104 	.word	0x20000104
 8006214:	20000020 	.word	0x20000020
 8006218:	2000006c 	.word	0x2000006c

0800621c <TM_I2C_Read>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
 800621c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006220:	ae04      	add	r6, sp, #16
 8006222:	4698      	mov	r8, r3
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
	
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8006224:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8006228:	f806 2d01 	strb.w	r2, [r6, #-1]!
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800622c:	f7ff ffd2 	bl	80061d4 <TM_I2C_GetHandle>
	
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8006230:	b28c      	uxth	r4, r1
 8006232:	9700      	str	r7, [sp, #0]
 8006234:	2301      	movs	r3, #1
 8006236:	4632      	mov	r2, r6
 8006238:	4621      	mov	r1, r4
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data) {
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800623a:	4605      	mov	r5, r0
	
	/* Send address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800623c:	f7fb faa2 	bl	8001784 <HAL_I2C_Master_Transmit>
 8006240:	b938      	cbnz	r0, 8006252 <TM_I2C_Read+0x36>
		/* Return error */
		return TM_I2C_Result_Error;
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, 1, 1000) != HAL_OK) {
 8006242:	9700      	str	r7, [sp, #0]
 8006244:	2301      	movs	r3, #1
 8006246:	4642      	mov	r2, r8
 8006248:	4621      	mov	r1, r4
 800624a:	4628      	mov	r0, r5
 800624c:	f7fb fb32 	bl	80018b4 <HAL_I2C_Master_Receive>
 8006250:	b118      	cbz	r0, 800625a <TM_I2C_Read+0x3e>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8006252:	4628      	mov	r0, r5
 8006254:	f7fb fc4d 	bl	8001af2 <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 8006258:	2001      	movs	r0, #1
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}
 800625a:	b004      	add	sp, #16
 800625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006260 <TM_I2C_ReadMulti>:

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8006260:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006264:	ae04      	add	r6, sp, #16
 8006266:	4698      	mov	r8, r3
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
	
	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8006268:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 800626c:	f806 2d01 	strb.w	r2, [r6, #-1]!
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 8006270:	f7ff ffb0 	bl	80061d4 <TM_I2C_GetHandle>
	
	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8006274:	b28c      	uxth	r4, r1
 8006276:	9700      	str	r7, [sp, #0]
 8006278:	2301      	movs	r3, #1
 800627a:	4632      	mov	r2, r6
 800627c:	4621      	mov	r1, r4
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 800627e:	4605      	mov	r5, r0
	
	/* Send register address */
	if (HAL_I2C_Master_Transmit(Handle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8006280:	f7fb fa80 	bl	8001784 <HAL_I2C_Master_Transmit>
 8006284:	b940      	cbnz	r0, 8006298 <TM_I2C_ReadMulti+0x38>
		/* Return error */
		return TM_I2C_Result_Error;
	}
	
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(Handle, device_address, data, count, 1000) != HAL_OK) {
 8006286:	9700      	str	r7, [sp, #0]
 8006288:	4642      	mov	r2, r8
 800628a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f7fb fb0f 	bl	80018b4 <HAL_I2C_Master_Receive>
 8006296:	b118      	cbz	r0, 80062a0 <TM_I2C_ReadMulti+0x40>
		/* Check error */
		if (HAL_I2C_GetError(Handle) != HAL_I2C_ERROR_AF) {
 8006298:	4628      	mov	r0, r5
 800629a:	f7fb fc2a 	bl	8001af2 <HAL_I2C_GetError>
			
		}
		
		/* Return error */
		return TM_I2C_Result_Error;
 800629e:	2001      	movs	r0, #1
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}
 80062a0:	b004      	add	sp, #16
 80062a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080062a6 <TM_I2C_IsDeviceConnected>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

TM_I2C_Result_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t device_address) {
 80062a6:	b508      	push	{r3, lr}
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80062a8:	f7ff ff94 	bl	80061d4 <TM_I2C_GetHandle>
	
	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(Handle, device_address, 2, 5) != HAL_OK) {
 80062ac:	2305      	movs	r3, #5
 80062ae:	2202      	movs	r2, #2
 80062b0:	f7fb fb98 	bl	80019e4 <HAL_I2C_IsDeviceReady>
		return TM_I2C_Result_Error;
	}
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}
 80062b4:	3000      	adds	r0, #0
 80062b6:	bf18      	it	ne
 80062b8:	2001      	movne	r0, #1
 80062ba:	bd08      	pop	{r3, pc}

080062bc <TM_I2C_InitCustomPinsCallback>:
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 80062bc:	4770      	bx	lr
	...

080062c0 <TM_I2C_Init>:
	Handle->Init.ClockSpeed = clockSpeed;
	Handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
#endif
}

TM_I2C_Result_t TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {	
 80062c0:	b570      	push	{r4, r5, r6, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	4605      	mov	r5, r0
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80062c6:	f7ff ff85 	bl	80061d4 <TM_I2C_GetHandle>
	
	/* Fill instance value */
	Handle->Instance = I2Cx;
	
#ifdef I2C1
	if (I2Cx == I2C1) {
 80062ca:	4b68      	ldr	r3, [pc, #416]	; (800646c <TM_I2C_Init+0x1ac>)
	Handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
#endif
}

TM_I2C_Result_t TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {	
	I2C_HandleTypeDef* Handle = TM_I2C_GetHandle(I2Cx);
 80062cc:	4604      	mov	r4, r0
	
	/* Fill instance value */
	Handle->Instance = I2Cx;
 80062ce:	6005      	str	r5, [r0, #0]
	
#ifdef I2C1
	if (I2Cx == I2C1) {
 80062d0:	429d      	cmp	r5, r3
 80062d2:	d126      	bne.n	8006322 <TM_I2C_Init+0x62>
		/* Enable clock */
		__HAL_RCC_I2C1_CLK_ENABLE();
 80062d4:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 80062d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062da:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e6:	9302      	str	r3, [sp, #8]
 80062e8:	9b02      	ldr	r3, [sp, #8]
/* Private functions */
#ifdef I2C1
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 80062ea:	b931      	cbnz	r1, 80062fa <TM_I2C_Init+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 80062ec:	2304      	movs	r3, #4
 80062ee:	21c0      	movs	r1, #192	; 0xc0
 80062f0:	9301      	str	r3, [sp, #4]
 80062f2:	2301      	movs	r3, #1
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	e029      	b.n	800634e <TM_I2C_Init+0x8e>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 80062fa:	2901      	cmp	r1, #1
 80062fc:	d107      	bne.n	800630e <TM_I2C_Init+0x4e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 80062fe:	2304      	movs	r3, #4
 8006300:	460a      	mov	r2, r1
 8006302:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006306:	460b      	mov	r3, r1
 8006308:	f44f 7140 	mov.w	r1, #768	; 0x300
 800630c:	e01f      	b.n	800634e <TM_I2C_Init+0x8e>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 800630e:	2902      	cmp	r1, #2
 8006310:	d156      	bne.n	80063c0 <TM_I2C_Init+0x100>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C1);
 8006312:	2304      	movs	r3, #4
 8006314:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	2301      	movs	r3, #1
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	e015      	b.n	800634e <TM_I2C_Init+0x8e>
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
	}
#endif
#ifdef I2C2	
	if (I2Cx == I2C2) {
 8006322:	4b53      	ldr	r3, [pc, #332]	; (8006470 <TM_I2C_Init+0x1b0>)
 8006324:	429d      	cmp	r5, r3
 8006326:	d11f      	bne.n	8006368 <TM_I2C_Init+0xa8>
		/* Enable clock */
		__HAL_RCC_I2C2_CLK_ENABLE();
 8006328:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 800632c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800632e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006332:	641a      	str	r2, [r3, #64]	; 0x40
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	9b03      	ldr	r3, [sp, #12]
#endif
#ifdef I2C2
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 800633e:	b941      	cbnz	r1, 8006352 <TM_I2C_Init+0x92>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 8006340:	2304      	movs	r3, #4
 8006342:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	2301      	movs	r3, #1
 800634a:	461a      	mov	r2, r3
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	4849      	ldr	r0, [pc, #292]	; (8006474 <TM_I2C_Init+0x1b4>)
 8006350:	e058      	b.n	8006404 <TM_I2C_Init+0x144>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8006352:	2901      	cmp	r1, #1
 8006354:	d03a      	beq.n	80063cc <TM_I2C_Init+0x10c>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8006356:	2902      	cmp	r1, #2
 8006358:	d132      	bne.n	80063c0 <TM_I2C_Init+0x100>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C2);
 800635a:	2304      	movs	r3, #4
 800635c:	2130      	movs	r1, #48	; 0x30
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	2301      	movs	r3, #1
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	e04c      	b.n	8006402 <TM_I2C_Init+0x142>
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
	} 
#endif
#ifdef I2C3
	if (I2Cx == I2C3) {
 8006368:	4843      	ldr	r0, [pc, #268]	; (8006478 <TM_I2C_Init+0x1b8>)
 800636a:	4285      	cmp	r5, r0
 800636c:	d152      	bne.n	8006414 <TM_I2C_Init+0x154>
		/* Enable clock */
		__HAL_RCC_I2C3_CLK_ENABLE();
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <TM_I2C_Init+0x1bc>)
 8006370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006372:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800637e:	9304      	str	r3, [sp, #16]
 8006380:	9b04      	ldr	r3, [sp, #16]
#endif
#ifdef I2C3
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8006382:	b999      	cbnz	r1, 80063ac <TM_I2C_Init+0xec>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 8006384:	2501      	movs	r5, #1
 8006386:	2604      	movs	r6, #4
 8006388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800638c:	f500 30d2 	add.w	r0, r0, #107520	; 0x1a400
 8006390:	462b      	mov	r3, r5
 8006392:	462a      	mov	r2, r5
 8006394:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006398:	f7ff fee9 	bl	800616e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 800639c:	462b      	mov	r3, r5
 800639e:	462a      	mov	r2, r5
 80063a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063a4:	4836      	ldr	r0, [pc, #216]	; (8006480 <TM_I2C_Init+0x1c0>)
 80063a6:	e88d 0060 	stmia.w	sp, {r5, r6}
 80063aa:	e02b      	b.n	8006404 <TM_I2C_Init+0x144>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 80063ac:	2901      	cmp	r1, #1
 80063ae:	d107      	bne.n	80063c0 <TM_I2C_Init+0x100>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C3);
 80063b0:	2304      	movs	r3, #4
 80063b2:	460a      	mov	r2, r1
 80063b4:	e88d 000a 	stmia.w	sp, {r1, r3}
 80063b8:	460b      	mov	r3, r1
 80063ba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80063be:	e020      	b.n	8006402 <TM_I2C_Init+0x142>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 80063c0:	2904      	cmp	r1, #4
 80063c2:	d13f      	bne.n	8006444 <TM_I2C_Init+0x184>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C3);
 80063c4:	4628      	mov	r0, r5
 80063c6:	e022      	b.n	800640e <TM_I2C_Init+0x14e>
	if (pinspack == TM_I2C_PinsPack_1) {
		TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 80063c8:	2901      	cmp	r1, #1
 80063ca:	d106      	bne.n	80063da <TM_I2C_Init+0x11a>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_1 | GPIO_PIN_0, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 80063cc:	2304      	movs	r3, #4
 80063ce:	460a      	mov	r2, r1
 80063d0:	e88d 000a 	stmia.w	sp, {r1, r3}
 80063d4:	460b      	mov	r3, r1
 80063d6:	2103      	movs	r1, #3
 80063d8:	e008      	b.n	80063ec <TM_I2C_Init+0x12c>
	}
	if (pinspack == TM_I2C_PinsPack_3) {
 80063da:	2902      	cmp	r1, #2
 80063dc:	d108      	bne.n	80063f0 <TM_I2C_Init+0x130>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 80063de:	2304      	movs	r3, #4
 80063e0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	2301      	movs	r3, #1
 80063e8:	461a      	mov	r2, r3
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	4825      	ldr	r0, [pc, #148]	; (8006484 <TM_I2C_Init+0x1c4>)
 80063ee:	e009      	b.n	8006404 <TM_I2C_Init+0x144>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_4) {
 80063f0:	2903      	cmp	r1, #3
 80063f2:	d10a      	bne.n	800640a <TM_I2C_Init+0x14a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 80063f4:	2304      	movs	r3, #4
 80063f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	2301      	movs	r3, #1
 80063fe:	461a      	mov	r2, r3
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4821      	ldr	r0, [pc, #132]	; (8006488 <TM_I2C_Init+0x1c8>)
 8006404:	f7ff feb3 	bl	800616e <TM_GPIO_InitAlternate>
 8006408:	e01c      	b.n	8006444 <TM_I2C_Init+0x184>
	}
#endif
	/* Init pins */
	if (pinspack == TM_I2C_PinsPack_Custom) {
 800640a:	2904      	cmp	r1, #4
 800640c:	d11a      	bne.n	8006444 <TM_I2C_Init+0x184>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF4_I2C4);
 800640e:	f7ff ff55 	bl	80062bc <TM_I2C_InitCustomPinsCallback>
 8006412:	e017      	b.n	8006444 <TM_I2C_Init+0x184>
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
	}
#endif
#ifdef I2C4
	if (I2Cx == I2C4) {
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <TM_I2C_Init+0x1cc>)
 8006416:	429d      	cmp	r5, r3
 8006418:	d114      	bne.n	8006444 <TM_I2C_Init+0x184>
		/* Enable clock */
		__HAL_RCC_I2C4_CLK_ENABLE();
 800641a:	4b18      	ldr	r3, [pc, #96]	; (800647c <TM_I2C_Init+0x1bc>)
 800641c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	9b05      	ldr	r3, [sp, #20]
#endif
#ifdef I2C4
static void TM_I2C4_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
	/* Init pins */
#if defined(GPIOD)
	if (pinspack == TM_I2C_PinsPack_1) {
 800642e:	2900      	cmp	r1, #0
 8006430:	d1ca      	bne.n	80063c8 <TM_I2C_Init+0x108>
		TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF4_I2C4);
 8006432:	2304      	movs	r3, #4
 8006434:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006438:	4815      	ldr	r0, [pc, #84]	; (8006490 <TM_I2C_Init+0x1d0>)
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	2301      	movs	r3, #1
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	e7df      	b.n	8006404 <TM_I2C_Init+0x144>
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
	Handle->Init.OwnAddress1 = 0x00;
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006444:	2301      	movs	r3, #1
	/* 100kHz @ 48MHz APB clock */
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
 8006446:	2500      	movs	r5, #0
	
	/* Fill settings */
	TM_I2C_FillSettings(Handle, clockSpeed);
	
	/* Initialize I2C */
	HAL_I2C_Init(Handle);
 8006448:	4620      	mov	r0, r4
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
	Handle->Init.OwnAddress1 = 0x00;
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800644a:	60e3      	str	r3, [r4, #12]
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; 
#if defined(STM32F7xx) || defined(STM32F0xx)
	Handle->Init.Timing = I2C_Timing;
 800644c:	4b11      	ldr	r3, [pc, #68]	; (8006494 <TM_I2C_Init+0x1d4>)
	/* 100kHz @ 48MHz APB clock */
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
 800644e:	6165      	str	r5, [r4, #20]
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; 
#if defined(STM32F7xx) || defined(STM32F0xx)
	Handle->Init.Timing = I2C_Timing;
 8006450:	6063      	str	r3, [r4, #4]
	uint32_t I2C_Timing = 0x10805E89;
#endif

	/* Fill settings */
	Handle->Init.OwnAddress2 = 0x00;
	Handle->Init.OwnAddress1 = 0x00;
 8006452:	60a5      	str	r5, [r4, #8]
	Handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	Handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006454:	6125      	str	r5, [r4, #16]
	Handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006456:	61e5      	str	r5, [r4, #28]
	Handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; 
 8006458:	6225      	str	r5, [r4, #32]
	
	/* Fill settings */
	TM_I2C_FillSettings(Handle, clockSpeed);
	
	/* Initialize I2C */
	HAL_I2C_Init(Handle);
 800645a:	f7fb f941 	bl	80016e0 <HAL_I2C_Init>
		
	/* Enable analog filter */
#if defined(I2C_ANALOGFILTER_ENABLE)
	HAL_I2CEx_ConfigAnalogFilter(Handle, I2C_ANALOGFILTER_ENABLE);
 800645e:	4629      	mov	r1, r5
 8006460:	4620      	mov	r0, r4
 8006462:	f7fb fb48 	bl	8001af6 <HAL_I2CEx_ConfigAnalogFilter>
#endif
	
	/* Return OK */
	return TM_I2C_Result_Ok;
}
 8006466:	4628      	mov	r0, r5
 8006468:	b006      	add	sp, #24
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	40005400 	.word	0x40005400
 8006470:	40005800 	.word	0x40005800
 8006474:	40020400 	.word	0x40020400
 8006478:	40005c00 	.word	0x40005c00
 800647c:	40023800 	.word	0x40023800
 8006480:	40020800 	.word	0x40020800
 8006484:	40021400 	.word	0x40021400
 8006488:	40021c00 	.word	0x40021c00
 800648c:	40006000 	.word	0x40006000
 8006490:	40020c00 	.word	0x40020c00
 8006494:	40912732 	.word	0x40912732

08006498 <TM_LCD_Fill>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
 8006498:	b508      	push	{r3, lr}
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 800649a:	f7fe ff2b 	bl	80052f4 <TM_DMA2DGRAPHIC_Fill>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 800649e:	2000      	movs	r0, #0
 80064a0:	bd08      	pop	{r3, pc}
	...

080064a4 <TM_LCD_SetOrientation>:

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
	/* Check input */
	if (orientation > 3) {
 80064a4:	2803      	cmp	r0, #3
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
 80064a6:	b508      	push	{r3, lr}
	/* Check input */
	if (orientation > 3) {
 80064a8:	d80f      	bhi.n	80064ca <TM_LCD_SetOrientation+0x26>
		return TM_LCD_Result_Error;
	}
	
	/* Save rotation */
	LCD.Orientation = orientation;
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <TM_LCD_SetOrientation+0x2c>)
	
	/* Check X and Y values */
	if (
 80064ac:	2801      	cmp	r0, #1
		orientation == 0 ||
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
 80064ae:	bf95      	itete	ls
 80064b0:	885a      	ldrhls	r2, [r3, #2]
		LCD.CurrentWidth = LCD.Width;
	} else {
		LCD.CurrentHeight = LCD.Width;
 80064b2:	881a      	ldrhhi	r2, [r3, #0]
	/* Check X and Y values */
	if (
		orientation == 0 ||
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
 80064b4:	80da      	strhls	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Width;
	} else {
		LCD.CurrentHeight = LCD.Width;
 80064b6:	80da      	strhhi	r2, [r3, #6]
	if (
		orientation == 0 ||
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
		LCD.CurrentWidth = LCD.Width;
 80064b8:	bf94      	ite	ls
 80064ba:	881a      	ldrhls	r2, [r3, #0]
	} else {
		LCD.CurrentHeight = LCD.Width;
		LCD.CurrentWidth = LCD.Height;
 80064bc:	885a      	ldrhhi	r2, [r3, #2]
	if (orientation > 3) {
		return TM_LCD_Result_Error;
	}
	
	/* Save rotation */
	LCD.Orientation = orientation;
 80064be:	7218      	strb	r0, [r3, #8]
	) {
		LCD.CurrentHeight = LCD.Height;
		LCD.CurrentWidth = LCD.Width;
	} else {
		LCD.CurrentHeight = LCD.Width;
		LCD.CurrentWidth = LCD.Height;
 80064c0:	809a      	strh	r2, [r3, #4]
	}
	
	/* Rotate DMA2D graphic library */
	TM_DMA2DGRAPHIC_SetOrientation(orientation);
 80064c2:	f7fe ff03 	bl	80052cc <TM_DMA2DGRAPHIC_SetOrientation>
 80064c6:	2000      	movs	r0, #0
 80064c8:	bd08      	pop	{r3, pc}
}

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
	/* Check input */
	if (orientation > 3) {
		return TM_LCD_Result_Error;
 80064ca:	2001      	movs	r0, #1
	/* Rotate DMA2D graphic library */
	TM_DMA2DGRAPHIC_SetOrientation(orientation);
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80064cc:	bd08      	pop	{r3, pc}
 80064ce:	bf00      	nop
 80064d0:	20004538 	.word	0x20004538

080064d4 <TM_LCD_DisplayOn>:

TM_LCD_Result_t TM_LCD_DisplayOn(void) {
	/* Enable LTDC */
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 80064d4:	4a06      	ldr	r2, [pc, #24]	; (80064f0 <TM_LCD_DisplayOn+0x1c>)
	TM_ILI9341_SendCommand(0x29);
#endif
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80064d6:	2000      	movs	r0, #0
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_DisplayOn(void) {
	/* Enable LTDC */
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 80064d8:	6993      	ldr	r3, [r2, #24]
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6193      	str	r3, [r2, #24]
	
#if defined(LCD_USE_STM32F7_DISCOVERY)
	/* Set PIN high */
	TM_GPIO_SetPinHigh(GPIOI, GPIO_PIN_12);	
 80064e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <TM_LCD_DisplayOn+0x20>)
 80064e6:	619a      	str	r2, [r3, #24]
    TM_GPIO_SetPinHigh(GPIOK, GPIO_PIN_3);
 80064e8:	2208      	movs	r2, #8
 80064ea:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
	TM_ILI9341_SendCommand(0x29);
#endif
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80064ee:	4770      	bx	lr
 80064f0:	40016800 	.word	0x40016800
 80064f4:	40022000 	.word	0x40022000

080064f8 <TM_LCD_SetXY>:
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <TM_LCD_SetXY+0x1c>)
 80064fa:	889a      	ldrh	r2, [r3, #4]
 80064fc:	4282      	cmp	r2, r0
 80064fe:	d907      	bls.n	8006510 <TM_LCD_SetXY+0x18>
 8006500:	88da      	ldrh	r2, [r3, #6]
 8006502:	428a      	cmp	r2, r1
 8006504:	d904      	bls.n	8006510 <TM_LCD_SetXY+0x18>
		return TM_LCD_Result_Error;
	}
	
	/* Set new values */
	LCD.CurrentX = X;
 8006506:	8518      	strh	r0, [r3, #40]	; 0x28
	LCD.CurrentY = Y;
	LCD.StartX = X;
 8006508:	8558      	strh	r0, [r3, #42]	; 0x2a
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800650a:	2000      	movs	r0, #0
		return TM_LCD_Result_Error;
	}
	
	/* Set new values */
	LCD.CurrentX = X;
	LCD.CurrentY = Y;
 800650c:	8599      	strh	r1, [r3, #44]	; 0x2c
	LCD.StartX = X;
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800650e:	4770      	bx	lr
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
		return TM_LCD_Result_Error;
 8006510:	2001      	movs	r0, #1
	LCD.CurrentY = Y;
	LCD.StartX = X;
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006512:	4770      	bx	lr
 8006514:	20004538 	.word	0x20004538

08006518 <TM_LCD_SetFont>:
	return LCD.CurrentY;
}

TM_LCD_Result_t TM_LCD_SetFont(TM_FONT_t* Font) {
	/* Set new font used for drawing */
	LCD.CurrentFont = Font;
 8006518:	4b01      	ldr	r3, [pc, #4]	; (8006520 <TM_LCD_SetFont+0x8>)
 800651a:	6258      	str	r0, [r3, #36]	; 0x24
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 800651c:	2000      	movs	r0, #0
 800651e:	4770      	bx	lr
 8006520:	20004538 	.word	0x20004538

08006524 <TM_LCD_SetColors>:
	return LCD.CurrentFont;
}

TM_LCD_Result_t TM_LCD_SetColors(uint32_t Foreground, uint32_t Background) {
	/* Set new colors */
	LCD.ForegroundColor = Foreground;
 8006524:	4b02      	ldr	r3, [pc, #8]	; (8006530 <TM_LCD_SetColors+0xc>)
 8006526:	61d8      	str	r0, [r3, #28]
	LCD.BackgroundColor = Background;
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006528:	2000      	movs	r0, #0
}

TM_LCD_Result_t TM_LCD_SetColors(uint32_t Foreground, uint32_t Background) {
	/* Set new colors */
	LCD.ForegroundColor = Foreground;
	LCD.BackgroundColor = Background;
 800652a:	6219      	str	r1, [r3, #32]
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20004538 	.word	0x20004538

08006534 <TM_LCD_Putc>:

TM_LCD_Result_t TM_LCD_Putc(char c) {
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
 8006538:	4c26      	ldr	r4, [pc, #152]	; (80065d4 <TM_LCD_Putc+0xa0>)
 800653a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800653c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800653e:	782a      	ldrb	r2, [r5, #0]
 8006540:	88a6      	ldrh	r6, [r4, #4]
 8006542:	4413      	add	r3, r2
 8006544:	42b3      	cmp	r3, r6
 8006546:	da06      	bge.n	8006556 <TM_LCD_Putc+0x22>
 8006548:	280a      	cmp	r0, #10
 800654a:	d004      	beq.n	8006556 <TM_LCD_Putc+0x22>
	/* Draw character */
	if (c != '\n') {
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 800654c:	2500      	movs	r5, #0
	}
	
	/* Draw character */
	if (c != '\n') {
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 800654e:	4e21      	ldr	r6, [pc, #132]	; (80065d4 <TM_LCD_Putc+0xa0>)
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 8006550:	f1a0 0820 	sub.w	r8, r0, #32
 8006554:	e013      	b.n	800657e <TM_LCD_Putc+0x4a>
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 8006556:	786d      	ldrb	r5, [r5, #1]
 8006558:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800655a:	491e      	ldr	r1, [pc, #120]	; (80065d4 <TM_LCD_Putc+0xa0>)
 800655c:	442b      	add	r3, r5
		LCD.CurrentX = LCD.StartX;
 800655e:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 8006560:	442a      	add	r2, r5
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 8006562:	b29b      	uxth	r3, r3
		LCD.CurrentX = LCD.StartX;
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 8006564:	4296      	cmp	r6, r2
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 8006566:	85a3      	strh	r3, [r4, #44]	; 0x2c
		LCD.CurrentX = LCD.StartX;
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
			LCD.CurrentX = 0;
 8006568:	bfd6      	itet	le
 800656a:	2200      	movle	r2, #0
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
		LCD.CurrentX = LCD.StartX;
 800656c:	850d      	strhgt	r5, [r1, #40]	; 0x28
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
			LCD.CurrentX = 0;
 800656e:	850a      	strhle	r2, [r1, #40]	; 0x28
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
 8006570:	88e2      	ldrh	r2, [r4, #6]
 8006572:	429a      	cmp	r2, r3
 8006574:	d92b      	bls.n	80065ce <TM_LCD_Putc+0x9a>
			return TM_LCD_Result_Error;
		}
	}
	
	/* Draw character */
	if (c != '\n') {
 8006576:	280a      	cmp	r0, #10
 8006578:	d1e8      	bne.n	800654c <TM_LCD_Putc+0x18>
 800657a:	e025      	b.n	80065c8 <TM_LCD_Putc+0x94>
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 800657c:	3501      	adds	r5, #1
 800657e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006580:	4914      	ldr	r1, [pc, #80]	; (80065d4 <TM_LCD_Putc+0xa0>)
 8006582:	7853      	ldrb	r3, [r2, #1]
 8006584:	429d      	cmp	r5, r3
 8006586:	d21b      	bcs.n	80065c0 <TM_LCD_Putc+0x8c>
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 8006588:	fb03 5308 	mla	r3, r3, r8, r5
 800658c:	6852      	ldr	r2, [r2, #4]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 800658e:	2700      	movs	r7, #0
	
	/* Draw character */
	if (c != '\n') {
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 8006590:	f832 9013 	ldrh.w	r9, [r2, r3, lsl #1]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8006594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	429f      	cmp	r7, r3
 800659a:	d2ef      	bcs.n	800657c <TM_LCD_Putc+0x48>
				if ((b << j) & 0x8000) {
 800659c:	fa09 f307 	lsl.w	r3, r9, r7
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 80065a0:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
 80065a2:	8d30      	ldrh	r0, [r6, #40]	; 0x28
	if (c != '\n') {
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
				if ((b << j) & 0x8000) {
 80065a4:	041b      	lsls	r3, r3, #16
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 80065a6:	4429      	add	r1, r5
 80065a8:	4438      	add	r0, r7
	/* Draw character */
	if (c != '\n') {
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 80065aa:	f107 0701 	add.w	r7, r7, #1
				if ((b << j) & 0x8000) {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 80065ae:	bf48      	it	mi
 80065b0:	69f2      	ldrmi	r2, [r6, #28]
				} else {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.BackgroundColor);
 80065b2:	b289      	uxth	r1, r1
 80065b4:	bf58      	it	pl
 80065b6:	6a32      	ldrpl	r2, [r6, #32]
 80065b8:	b280      	uxth	r0, r0
 80065ba:	f7fe fe2b 	bl	8005214 <TM_DMA2DGRAPHIC_DrawPixel>
 80065be:	e7e9      	b.n	8006594 <TM_LCD_Putc+0x60>
				}
			}
		}
	
		/* Set new current X location */
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
 80065c0:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	850b      	strh	r3, [r1, #40]	; 0x28
 80065c8:	2000      	movs	r0, #0
 80065ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
			/* Return error */
			return TM_LCD_Result_Error;
 80065ce:	2001      	movs	r0, #1
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80065d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d4:	20004538 	.word	0x20004538

080065d8 <TM_LCD_Puts>:
uint32_t TM_LCD_GetPixel(uint16_t X, uint16_t Y) {
	/* Get pixel at desired location */
	return TM_DMA2DGRAPHIC_GetPixel(X, Y);
}

TM_LCD_Result_t TM_LCD_Puts(char* str) {
 80065d8:	b510      	push	{r4, lr}
 80065da:	1e44      	subs	r4, r0, #1
	/* Send till string ends or error returned */
	while (*str) {
 80065dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80065e0:	b128      	cbz	r0, 80065ee <TM_LCD_Puts+0x16>
		/* Check if string OK */
		if (TM_LCD_Putc(*str) != TM_LCD_Result_Ok) {
 80065e2:	f7ff ffa7 	bl	8006534 <TM_LCD_Putc>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d0f8      	beq.n	80065dc <TM_LCD_Puts+0x4>
			/* Return error */
			return TM_LCD_Result_Error;
 80065ea:	2001      	movs	r0, #1
		str++;
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bd10      	pop	{r4, pc}

080065f0 <TM_LCD_SetLayer1>:

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <TM_LCD_SetLayer1+0x18>)
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
 80065f2:	b510      	push	{r4, lr}
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
	LCD.CurrentLayer = 0;
 80065f4:	2400      	movs	r4, #0
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 80065f6:	691a      	ldr	r2, [r3, #16]
	LCD.CurrentLayer = 0;
	
	/* Set layer for DMA2D */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 80065f8:	4620      	mov	r0, r4
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 80065fa:	60da      	str	r2, [r3, #12]
	LCD.CurrentLayer = 0;
 80065fc:	761c      	strb	r4, [r3, #24]
	
	/* Set layer for DMA2D */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 80065fe:	f7fe fe01 	bl	8005204 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;

}
 8006602:	4620      	mov	r0, r4
 8006604:	bd10      	pop	{r4, pc}
 8006606:	bf00      	nop
 8006608:	20004538 	.word	0x20004538

0800660c <TM_LCD_SetLayer2>:

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
 800660c:	b508      	push	{r3, lr}
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 800660e:	4b05      	ldr	r3, [pc, #20]	; (8006624 <TM_LCD_SetLayer2+0x18>)
	LCD.CurrentLayer = 1;
 8006610:	2001      	movs	r0, #1

}

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 8006612:	6919      	ldr	r1, [r3, #16]
 8006614:	695a      	ldr	r2, [r3, #20]
	LCD.CurrentLayer = 1;
 8006616:	7618      	strb	r0, [r3, #24]

}

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 8006618:	440a      	add	r2, r1
 800661a:	60da      	str	r2, [r3, #12]
	LCD.CurrentLayer = 1;
	
	/* Set layer for DMA2D also */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 800661c:	f7fe fdf2 	bl	8005204 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006620:	2000      	movs	r0, #0
 8006622:	bd08      	pop	{r3, pc}
 8006624:	20004538 	.word	0x20004538

08006628 <TM_LCD_SetLayer1Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer1Opacity(uint8_t opacity) {
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 0);
 8006628:	4601      	mov	r1, r0
 800662a:	2200      	movs	r2, #0
 800662c:	4802      	ldr	r0, [pc, #8]	; (8006638 <TM_LCD_SetLayer1Opacity+0x10>)
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetLayer1Opacity(uint8_t opacity) {
 800662e:	b508      	push	{r3, lr}
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 0);
 8006630:	f7fb fbad 	bl	8001d8e <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006634:	2000      	movs	r0, #0
 8006636:	bd08      	pop	{r3, pc}
 8006638:	20004490 	.word	0x20004490

0800663c <TM_LCD_SetLayer2Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer2Opacity(uint8_t opacity) {
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 1);
 800663c:	4601      	mov	r1, r0
 800663e:	2201      	movs	r2, #1
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <TM_LCD_SetLayer2Opacity+0x10>)
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetLayer2Opacity(uint8_t opacity) {
 8006642:	b508      	push	{r3, lr}
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 1);
 8006644:	f7fb fba3 	bl	8001d8e <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006648:	2000      	movs	r0, #0
 800664a:	bd08      	pop	{r3, pc}
 800664c:	20004490 	.word	0x20004490

08006650 <TM_LCD_Init>:
	uint16_t StartX;
	uint16_t CurrentY;
} TM_LCD_INT_t;
static TM_LCD_INT_t LCD;

TM_LCD_Result_t TM_LCD_Init(void) {
 8006650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006654:	b0ad      	sub	sp, #180	; 0xb4
	TM_DMA2DGRAPHIC_INT_Conf_t DMA2DConf;
	
	/* Init SDRAM */
	if (!TM_SDRAM_Init()) {
 8006656:	f000 f96b 	bl	8006930 <TM_SDRAM_Init>
 800665a:	2800      	cmp	r0, #0
 800665c:	f000 80f8 	beq.w	8006850 <TM_LCD_Init+0x200>
	LCD.FrameStart = LCD_FRAME_BUFFER;
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
	LCD.CurrentFont = &TM_Font_11x18;
	LCD.ForegroundColor = 0x0000;
	LCD.BackgroundColor = 0xFFFF;
	LCD.Orientation = 1;
 8006660:	2701      	movs	r7, #1
	LCD.Height = LCD_PIXEL_HEIGHT;
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
	LCD.FrameStart = LCD_FRAME_BUFFER;
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
	LCD.CurrentFont = &TM_Font_11x18;
	LCD.ForegroundColor = 0x0000;
 8006662:	2400      	movs	r4, #0
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
	}
	
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
 8006664:	4b7c      	ldr	r3, [pc, #496]	; (8006858 <TM_LCD_Init+0x208>)
 8006666:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
	LCD.Height = LCD_PIXEL_HEIGHT;
 800666a:	f44f 7888 	mov.w	r8, #272	; 0x110
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
 800666e:	f04f 4a40 	mov.w	sl, #3221225472	; 0xc0000000
	LCD.FrameStart = LCD_FRAME_BUFFER;
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
 8006672:	f44f 357f 	mov.w	r5, #261120	; 0x3fc00
	LCD.CurrentFont = &TM_Font_11x18;
 8006676:	4a79      	ldr	r2, [pc, #484]	; (800685c <TM_LCD_Init+0x20c>)
	LCD.ForegroundColor = 0x0000;
	LCD.BackgroundColor = 0xFFFF;
 8006678:	f64f 7bff 	movw	fp, #65535	; 0xffff
	LCD.Orientation = 1;
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
 800667c:	4638      	mov	r0, r7
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
 800667e:	2602      	movs	r6, #2
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
	LCD.Height = LCD_PIXEL_HEIGHT;
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
	LCD.FrameStart = LCD_FRAME_BUFFER;
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
 8006680:	615d      	str	r5, [r3, #20]
	LCD.CurrentFont = &TM_Font_11x18;
 8006682:	625a      	str	r2, [r3, #36]	; 0x24
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
	}
	
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
 8006684:	f8a3 9000 	strh.w	r9, [r3]
	LCD.Height = LCD_PIXEL_HEIGHT;
 8006688:	f8a3 8002 	strh.w	r8, [r3, #2]
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
 800668c:	f8c3 a00c 	str.w	sl, [r3, #12]
	LCD.FrameStart = LCD_FRAME_BUFFER;
 8006690:	f8c3 a010 	str.w	sl, [r3, #16]
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
	LCD.CurrentFont = &TM_Font_11x18;
	LCD.ForegroundColor = 0x0000;
 8006694:	61dc      	str	r4, [r3, #28]
	LCD.BackgroundColor = 0xFFFF;
 8006696:	f8c3 b020 	str.w	fp, [r3, #32]
	LCD.Orientation = 1;
 800669a:	721f      	strb	r7, [r3, #8]
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
 800669c:	f7ff ff02 	bl	80064a4 <TM_LCD_SetOrientation>
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
 80066a0:	9509      	str	r5, [sp, #36]	; 0x24
}

static void TM_LCD_INT_InitPins(void) {
#if defined(LCD_USE_STM32F7_DISCOVERY)
	/* Init GPIO pins for LTDC */
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_4, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066a2:	250e      	movs	r5, #14
 80066a4:	9600      	str	r6, [sp, #0]
 80066a6:	4623      	mov	r3, r4
 80066a8:	9501      	str	r5, [sp, #4]
 80066aa:	4622      	mov	r2, r4
 80066ac:	2110      	movs	r1, #16
 80066ae:	486c      	ldr	r0, [pc, #432]	; (8006860 <TM_LCD_Init+0x210>)
	TM_LCD_SetOrientation(LCD.Orientation);
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
 80066b0:	f88d 601c 	strb.w	r6, [sp, #28]
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
 80066b4:	f8cd a020 	str.w	sl, [sp, #32]
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
	DMA2DConf.Width = LCD_PIXEL_WIDTH;
 80066b8:	f8ad 9018 	strh.w	r9, [sp, #24]
	DMA2DConf.Height = LCD_PIXEL_HEIGHT;
 80066bc:	f8ad 801a 	strh.w	r8, [sp, #26]
	DMA2DConf.Orientation = 1;
 80066c0:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
}

static void TM_LCD_INT_InitPins(void) {
#if defined(LCD_USE_STM32F7_DISCOVERY)
	/* Init GPIO pins for LTDC */
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_4, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066c4:	f7ff fd53 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066c8:	9501      	str	r5, [sp, #4]
 80066ca:	4623      	mov	r3, r4
 80066cc:	9600      	str	r6, [sp, #0]
 80066ce:	4622      	mov	r2, r4
 80066d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066d4:	4863      	ldr	r0, [pc, #396]	; (8006864 <TM_LCD_Init+0x214>)
 80066d6:	f7ff fd4a 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066da:	9501      	str	r5, [sp, #4]
 80066dc:	9600      	str	r6, [sp, #0]
 80066de:	4623      	mov	r3, r4
 80066e0:	4622      	mov	r2, r4
 80066e2:	f44f 4167 	mov.w	r1, #59136	; 0xe700
 80066e6:	4860      	ldr	r0, [pc, #384]	; (8006868 <TM_LCD_Init+0x218>)
 80066e8:	f7ff fd41 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOJ, GPIO_PIN_All & ~(GPIO_PIN_12), TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066ec:	9501      	str	r5, [sp, #4]
 80066ee:	9600      	str	r6, [sp, #0]
 80066f0:	4623      	mov	r3, r4
 80066f2:	4622      	mov	r2, r4
 80066f4:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80066f8:	485c      	ldr	r0, [pc, #368]	; (800686c <TM_LCD_Init+0x21c>)
 80066fa:	f7ff fd38 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOK, 0x00FF & ~(GPIO_PIN_3), TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, GPIO_AF14_LTDC);
 80066fe:	9501      	str	r5, [sp, #4]
 8006700:	9600      	str	r6, [sp, #0]
 8006702:	4623      	mov	r3, r4
 8006704:	4622      	mov	r2, r4
 8006706:	21f7      	movs	r1, #247	; 0xf7
 8006708:	4859      	ldr	r0, [pc, #356]	; (8006870 <TM_LCD_Init+0x220>)
 800670a:	f7ff fd30 	bl	800616e <TM_GPIO_InitAlternate>
	
	/* Init pins for LCD control */
	/* Display enable */
	TM_GPIO_Init(GPIOI, GPIO_PIN_12, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_DOWN, TM_GPIO_Speed_Low);
 800670e:	9600      	str	r6, [sp, #0]
 8006710:	4623      	mov	r3, r4
 8006712:	463a      	mov	r2, r7
 8006714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006718:	4853      	ldr	r0, [pc, #332]	; (8006868 <TM_LCD_Init+0x218>)
 800671a:	9401      	str	r4, [sp, #4]
 800671c:	f7ff fd0c 	bl	8006138 <TM_GPIO_Init>
	/* Backlight control */
	TM_GPIO_Init(GPIOK, GPIO_PIN_3, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_DOWN, TM_GPIO_Speed_Low);
 8006720:	2108      	movs	r1, #8
 8006722:	9600      	str	r6, [sp, #0]
 8006724:	4623      	mov	r3, r4
 8006726:	463a      	mov	r2, r7
 8006728:	4851      	ldr	r0, [pc, #324]	; (8006870 <TM_LCD_Init+0x220>)
 800672a:	9401      	str	r4, [sp, #4]
 800672c:	f7ff fd04 	bl	8006138 <TM_GPIO_Init>
/* Private functions */
static void TM_LCD_INT_InitLTDC(void) {
	RCC_PeriphCLKInitTypeDef  periph_clk_init_struct;
	
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8006730:	4b50      	ldr	r3, [pc, #320]	; (8006874 <TM_LCD_Init+0x224>)
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 8006732:	4d51      	ldr	r5, [pc, #324]	; (8006878 <TM_LCD_Init+0x228>)
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006734:	a80b      	add	r0, sp, #44	; 0x2c
/* Private functions */
static void TM_LCD_INT_InitLTDC(void) {
	RCC_PeriphCLKInitTypeDef  periph_clk_init_struct;
	
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8006736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006738:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800673c:	631a      	str	r2, [r3, #48]	; 0x30
 800673e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006740:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8006744:	9204      	str	r2, [sp, #16]
 8006746:	9a04      	ldr	r2, [sp, #16]
	__HAL_RCC_LTDC_CLK_ENABLE();
 8006748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800674a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800674e:	645a      	str	r2, [r3, #68]	; 0x44
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	9b05      	ldr	r3, [sp, #20]
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;
 800675a:	4b48      	ldr	r3, [pc, #288]	; (800687c <TM_LCD_Init+0x22c>)
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	619a      	str	r2, [r3, #24]

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 8006764:	2228      	movs	r2, #40	; 0x28
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
	__HAL_RCC_LTDC_CLK_ENABLE();
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;
 8006766:	9303      	str	r3, [sp, #12]

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 8006768:	616a      	str	r2, [r5, #20]
    LTDCHandle.Init.VerticalSync = LCD_VSYNC - 1;
 800676a:	2209      	movs	r2, #9
 800676c:	61aa      	str	r2, [r5, #24]
    LTDCHandle.Init.AccumulatedHBP = LCD_HSYNC + LCD_HBP - 1;
 800676e:	2235      	movs	r2, #53	; 0x35
 8006770:	61ea      	str	r2, [r5, #28]
    LTDCHandle.Init.AccumulatedVBP = LCD_VSYNC + LCD_VBP - 1;  
 8006772:	220b      	movs	r2, #11
 8006774:	622a      	str	r2, [r5, #32]
    LTDCHandle.Init.AccumulatedActiveH = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP - 1;
 8006776:	f240 121b 	movw	r2, #283	; 0x11b
 800677a:	62aa      	str	r2, [r5, #40]	; 0x28
    LTDCHandle.Init.AccumulatedActiveW = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP - 1;
 800677c:	f240 2215 	movw	r2, #533	; 0x215
 8006780:	626a      	str	r2, [r5, #36]	; 0x24
    LTDCHandle.Init.TotalWidth = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1; 
 8006782:	f240 2235 	movw	r2, #565	; 0x235
 8006786:	62ea      	str	r2, [r5, #44]	; 0x2c
    LTDCHandle.Init.TotalHeigh = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1;
 8006788:	f240 121d 	movw	r2, #285	; 0x11d
 800678c:	632a      	str	r2, [r5, #48]	; 0x30
    /* Enable Pixel Clock */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/2 = 96 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800678e:	2208      	movs	r2, #8
 8006790:	920b      	str	r2, [sp, #44]	; 0x2c
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006792:	22c0      	movs	r2, #192	; 0xc0
 8006794:	9210      	str	r2, [sp, #64]	; 0x40
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
 8006796:	2205      	movs	r2, #5
 8006798:	9212      	str	r2, [sp, #72]	; 0x48
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800679a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800679e:	9216      	str	r2, [sp, #88]	; 0x58
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80067a0:	f7fb fde4 	bl	800236c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	LTDCHandle.Instance = LTDC;
 80067a4:	9b03      	ldr	r3, [sp, #12]

	/* Init LTDC */
	HAL_LTDC_Init(&LTDCHandle);
 80067a6:	4628      	mov	r0, r5
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);

	/* Initialize the LCD pixel width and pixel height */
	LTDCHandle.LayerCfg->ImageWidth  = LCD_PIXEL_WIDTH;
 80067a8:	f8c5 9060 	str.w	r9, [r5, #96]	; 0x60
	LTDCHandle.LayerCfg->ImageHeight = LCD_PIXEL_HEIGHT;
 80067ac:	f8c5 8064 	str.w	r8, [r5, #100]	; 0x64
	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	LTDCHandle.Instance = LTDC;
 80067b0:	602b      	str	r3, [r5, #0]
	/* Initialize the LCD pixel width and pixel height */
	LTDCHandle.LayerCfg->ImageWidth  = LCD_PIXEL_WIDTH;
	LTDCHandle.LayerCfg->ImageHeight = LCD_PIXEL_HEIGHT;

	/* Background value */
	LTDCHandle.Init.Backcolor.Blue = 0;
 80067b2:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
	LTDCHandle.Init.Backcolor.Green = 0;
 80067b6:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
	LTDCHandle.Init.Backcolor.Red = 0;
 80067ba:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36

	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80067be:	606c      	str	r4, [r5, #4]
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80067c0:	60ac      	str	r4, [r5, #8]
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80067c2:	60ec      	str	r4, [r5, #12]
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80067c4:	612c      	str	r4, [r5, #16]
	LTDCHandle.Instance = LTDC;

	/* Init LTDC */
	HAL_LTDC_Init(&LTDCHandle);
 80067c6:	f7fb fa45 	bl	8001c54 <HAL_LTDC_Init>
	layer_cfg.Alpha = 255;
	layer_cfg.Alpha0 = 0;
	layer_cfg.Backcolor.Blue = 0;
	layer_cfg.Backcolor.Green = 0;
	layer_cfg.Backcolor.Red = 0;
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80067ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
	/* Layer Init */
	layer_cfg.WindowX0 = 0;
	layer_cfg.WindowX1 = LCD_PIXEL_WIDTH;
	layer_cfg.WindowY0 = 0;
	layer_cfg.WindowY1 = LCD_PIXEL_HEIGHT; 
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80067ce:	960f      	str	r6, [sp, #60]	; 0x3c
	layer_cfg.FBStartAdress = SDRAM_START_ADR;
	layer_cfg.Alpha = 255;
 80067d0:	26ff      	movs	r6, #255	; 0xff
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 80067d2:	4622      	mov	r2, r4
	layer_cfg.Alpha = 255;
	layer_cfg.Alpha0 = 0;
	layer_cfg.Backcolor.Blue = 0;
	layer_cfg.Backcolor.Green = 0;
	layer_cfg.Backcolor.Red = 0;
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80067d4:	9312      	str	r3, [sp, #72]	; 0x48
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80067d6:	2307      	movs	r3, #7
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 80067d8:	a90b      	add	r1, sp, #44	; 0x2c
 80067da:	4628      	mov	r0, r5
	layer_cfg.Alpha0 = 0;
	layer_cfg.Backcolor.Blue = 0;
	layer_cfg.Backcolor.Green = 0;
	layer_cfg.Backcolor.Red = 0;
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80067dc:	9313      	str	r3, [sp, #76]	; 0x4c

static void TM_LCD_INT_InitLayers(void) {
	LTDC_LayerCfgTypeDef layer_cfg;
	
	/* Layer Init */
	layer_cfg.WindowX0 = 0;
 80067de:	940b      	str	r4, [sp, #44]	; 0x2c
	layer_cfg.WindowX1 = LCD_PIXEL_WIDTH;
 80067e0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	layer_cfg.WindowY0 = 0;
 80067e4:	940d      	str	r4, [sp, #52]	; 0x34
	layer_cfg.WindowY1 = LCD_PIXEL_HEIGHT; 
 80067e6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
	layer_cfg.FBStartAdress = SDRAM_START_ADR;
 80067ea:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
	layer_cfg.Alpha = 255;
 80067ee:	9610      	str	r6, [sp, #64]	; 0x40
	layer_cfg.Alpha0 = 0;
 80067f0:	9411      	str	r4, [sp, #68]	; 0x44
	layer_cfg.Backcolor.Blue = 0;
 80067f2:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
	layer_cfg.Backcolor.Green = 0;
 80067f6:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
	layer_cfg.Backcolor.Red = 0;
 80067fa:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
 80067fe:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8006802:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 8006806:	f7fb fa99 	bl	8001d3c <HAL_LTDC_ConfigLayer>
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
	layer_cfg.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <TM_LCD_Init+0x230>)

	/* Init layer 2 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 1);
 800680c:	463a      	mov	r2, r7
 800680e:	a90b      	add	r1, sp, #44	; 0x2c
 8006810:	4628      	mov	r0, r5
	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
	layer_cfg.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;
 8006812:	9314      	str	r3, [sp, #80]	; 0x50

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
 8006814:	9610      	str	r6, [sp, #64]	; 0x40
	layer_cfg.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;

	/* Init layer 2 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 1);
 8006816:	f7fb fa91 	bl	8001d3c <HAL_LTDC_ConfigLayer>
	
	/* Init LTDC layers */
	TM_LCD_INT_InitLayers();
	
	/* Init DMA2D GRAPHICS */
	TM_DMA2DGRAPHIC_Init();
 800681a:	f7fe fcc1 	bl	80051a0 <TM_DMA2DGRAPHIC_Init>
	
	/* Set settings */
	TM_INT_DMA2DGRAPHIC_SetConf(&DMA2DConf);
 800681e:	a806      	add	r0, sp, #24
 8006820:	f7fe fdd6 	bl	80053d0 <TM_INT_DMA2DGRAPHIC_SetConf>
	
	/* Enable LCD */
	TM_LCD_DisplayOn();
 8006824:	f7ff fe56 	bl	80064d4 <TM_LCD_DisplayOn>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
 8006828:	f7ff fee2 	bl	80065f0 <TM_LCD_SetLayer1>
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 800682c:	4658      	mov	r0, fp
 800682e:	f7fe fd61 	bl	80052f4 <TM_DMA2DGRAPHIC_Fill>
	TM_LCD_DisplayOn();
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
	TM_LCD_Fill(LCD_COLOR_WHITE);
	TM_LCD_SetLayer2();
 8006832:	f7ff feeb 	bl	800660c <TM_LCD_SetLayer2>
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 8006836:	4658      	mov	r0, fp
 8006838:	f7fe fd5c 	bl	80052f4 <TM_DMA2DGRAPHIC_Fill>
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
	TM_LCD_Fill(LCD_COLOR_WHITE);
	TM_LCD_SetLayer2();
	TM_LCD_Fill(LCD_COLOR_WHITE);
	TM_LCD_SetLayer1();
 800683c:	f7ff fed8 	bl	80065f0 <TM_LCD_SetLayer1>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1Opacity(255);
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff fef1 	bl	8006628 <TM_LCD_SetLayer1Opacity>
	TM_LCD_SetLayer2Opacity(0);
 8006846:	4620      	mov	r0, r4
 8006848:	f7ff fef8 	bl	800663c <TM_LCD_SetLayer2Opacity>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800684c:	4620      	mov	r0, r4
 800684e:	e000      	b.n	8006852 <TM_LCD_Init+0x202>
	TM_DMA2DGRAPHIC_INT_Conf_t DMA2DConf;
	
	/* Init SDRAM */
	if (!TM_SDRAM_Init()) {
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
 8006850:	2002      	movs	r0, #2
	TM_LCD_SetLayer1Opacity(255);
	TM_LCD_SetLayer2Opacity(0);
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 8006852:	b02d      	add	sp, #180	; 0xb4
 8006854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006858:	20004538 	.word	0x20004538
 800685c:	20000018 	.word	0x20000018
 8006860:	40021000 	.word	0x40021000
 8006864:	40021800 	.word	0x40021800
 8006868:	40022000 	.word	0x40022000
 800686c:	40022400 	.word	0x40022400
 8006870:	40022800 	.word	0x40022800
 8006874:	40023800 	.word	0x40023800
 8006878:	20004490 	.word	0x20004490
 800687c:	40016800 	.word	0x40016800
 8006880:	c003fc00 	.word	0xc003fc00

08006884 <TM_LCD_Layer1To2>:

	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Layer1To2(void) {
 8006884:	b513      	push	{r0, r1, r4, lr}
	/* Copy buffer using DMA2D */
	TM_DMA2DGRAPHIC_CopyBuffer(
		(void *)(LCD.FrameStart),
 8006886:	4907      	ldr	r1, [pc, #28]	; (80068a4 <TM_LCD_Layer1To2+0x20>)
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Layer1To2(void) {
	/* Copy buffer using DMA2D */
	TM_DMA2DGRAPHIC_CopyBuffer(
 8006888:	2400      	movs	r4, #0
		(void *)(LCD.FrameStart),
 800688a:	6908      	ldr	r0, [r1, #16]
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Layer1To2(void) {
	/* Copy buffer using DMA2D */
	TM_DMA2DGRAPHIC_CopyBuffer(
 800688c:	884b      	ldrh	r3, [r1, #2]
 800688e:	880a      	ldrh	r2, [r1, #0]
 8006890:	6949      	ldr	r1, [r1, #20]
 8006892:	9401      	str	r4, [sp, #4]
 8006894:	4401      	add	r1, r0
 8006896:	9400      	str	r4, [sp, #0]
 8006898:	f7fe fd88 	bl	80053ac <TM_DMA2DGRAPHIC_CopyBuffer>
		0
	);
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 800689c:	4620      	mov	r0, r4
 800689e:	b002      	add	sp, #8
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	20004538 	.word	0x20004538

080068a8 <TM_LCD_DrawRoundedRectangle>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_DrawRoundedRectangle(uint16_t x0, uint16_t y0, uint16_t Width, uint16_t Height, uint16_t r, uint32_t color) {
 80068a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check input parameters */
	if ((x0 + Width) > LCD.Width || (y0 + Height) > LCD.Height) {
 80068aa:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <TM_LCD_DrawRoundedRectangle+0x30>)
 80068ac:	eb00 0e02 	add.w	lr, r0, r2
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_DrawRoundedRectangle(uint16_t x0, uint16_t y0, uint16_t Width, uint16_t Height, uint16_t r, uint32_t color) {
 80068b0:	461c      	mov	r4, r3
	/* Check input parameters */
	if ((x0 + Width) > LCD.Width || (y0 + Height) > LCD.Height) {
 80068b2:	882f      	ldrh	r7, [r5, #0]
 80068b4:	45be      	cmp	lr, r7
 80068b6:	dc0c      	bgt.n	80068d2 <TM_LCD_DrawRoundedRectangle+0x2a>
 80068b8:	440c      	add	r4, r1
 80068ba:	886d      	ldrh	r5, [r5, #2]
 80068bc:	42ac      	cmp	r4, r5
 80068be:	dc08      	bgt.n	80068d2 <TM_LCD_DrawRoundedRectangle+0x2a>
		/* Return error */
		return TM_LCD_Result_Error;
	}
	
	/* Draw rectangle with DMA2D */
	TM_DMA2DGRAPHIC_DrawRoundedRectangle(x0, y0, Width, Height, r, color);
 80068c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80068c2:	9401      	str	r4, [sp, #4]
 80068c4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80068c8:	9400      	str	r4, [sp, #0]
 80068ca:	f7ff f9e9 	bl	8005ca0 <TM_DMA2DGRAPHIC_DrawRoundedRectangle>

	/* Return OK */
	return TM_LCD_Result_Ok;
 80068ce:	2000      	movs	r0, #0
 80068d0:	e000      	b.n	80068d4 <TM_LCD_DrawRoundedRectangle+0x2c>

TM_LCD_Result_t TM_LCD_DrawRoundedRectangle(uint16_t x0, uint16_t y0, uint16_t Width, uint16_t Height, uint16_t r, uint32_t color) {
	/* Check input parameters */
	if ((x0 + Width) > LCD.Width || (y0 + Height) > LCD.Height) {
		/* Return error */
		return TM_LCD_Result_Error;
 80068d2:	2001      	movs	r0, #1
	/* Draw rectangle with DMA2D */
	TM_DMA2DGRAPHIC_DrawRoundedRectangle(x0, y0, Width, Height, r, color);

	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80068d4:	b003      	add	sp, #12
 80068d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d8:	20004538 	.word	0x20004538

080068dc <TM_LCD_DrawFilledRoundedRectangle>:

TM_LCD_Result_t TM_LCD_DrawFilledRoundedRectangle(uint16_t x0, uint16_t y0, uint16_t Width, uint16_t Height, uint16_t r, uint32_t color) {
 80068dc:	b513      	push	{r0, r1, r4, lr}
	/* Check input parameters */
	TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle(x0, y0, Width, Height, r, color);
 80068de:	9c05      	ldr	r4, [sp, #20]
 80068e0:	9401      	str	r4, [sp, #4]
 80068e2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80068e6:	9400      	str	r4, [sp, #0]
 80068e8:	f7ff fb1e 	bl	8005f28 <TM_DMA2DGRAPHIC_DrawFilledRoundedRectangle>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80068ec:	2000      	movs	r0, #0
 80068ee:	b002      	add	sp, #8
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <TM_LCD_DrawCircle>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint32_t color) {
 80068f2:	b508      	push	{r3, lr}
	/* Use DMA2D */
	TM_DMA2DGRAPHIC_DrawCircle(x0, y0, r, color);
 80068f4:	b292      	uxth	r2, r2
 80068f6:	b289      	uxth	r1, r1
 80068f8:	b280      	uxth	r0, r0
 80068fa:	f7fe feef 	bl	80056dc <TM_DMA2DGRAPHIC_DrawCircle>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 80068fe:	2000      	movs	r0, #0
 8006900:	bd08      	pop	{r3, pc}

08006902 <TM_LCD_DrawFilledCircle>:

TM_LCD_Result_t TM_LCD_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint32_t color) {
 8006902:	b508      	push	{r3, lr}
	/* Use DMA2D */
	TM_DMA2DGRAPHIC_DrawFilledCircle(x0, y0, r, color);
 8006904:	b292      	uxth	r2, r2
 8006906:	b289      	uxth	r1, r1
 8006908:	b280      	uxth	r0, r0
 800690a:	f7ff f89b 	bl	8005a44 <TM_DMA2DGRAPHIC_DrawFilledCircle>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}
 800690e:	2000      	movs	r0, #0
 8006910:	bd08      	pop	{r3, pc}
	...

08006914 <TM_LCD_GetWidth>:


uint16_t TM_LCD_GetWidth(void) {
	return LCD.CurrentWidth;
}
 8006914:	4b01      	ldr	r3, [pc, #4]	; (800691c <TM_LCD_GetWidth+0x8>)
 8006916:	8898      	ldrh	r0, [r3, #4]
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20004538 	.word	0x20004538

08006920 <TM_LCD_GetHeight>:

uint16_t TM_LCD_GetHeight(void) {
	return LCD.CurrentHeight;
}
 8006920:	4b01      	ldr	r3, [pc, #4]	; (8006928 <TM_LCD_GetHeight+0x8>)
 8006922:	88d8      	ldrh	r0, [r3, #6]
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20004538 	.word	0x20004538

0800692c <TM_SDRAM_InitCustomPinsCallback>:
             the TM_SDRAM_InitCustomPinsCallback could be implemented in the user file
	*/
	
	/* Return 0, use pins already supported from library */
	return 0;
}
 800692c:	2000      	movs	r0, #0
 800692e:	4770      	bx	lr

08006930 <TM_SDRAM_Init>:
#include "tm_stm32_sdram.h"

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	volatile uint32_t timeout = SDRAM_TIMEOUT;
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8006934:	4f65      	ldr	r7, [pc, #404]	; (8006acc <TM_SDRAM_Init+0x19c>)
#include "tm_stm32_sdram.h"

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8006936:	b09c      	sub	sp, #112	; 0x70
	SDRAM_HandleTypeDef SDRAMHandle;
	FMC_SDRAM_TimingTypeDef Timing;
	FMC_SDRAM_CommandTypeDef Command;

	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8006938:	f64f 73ff 	movw	r3, #65535	; 0xffff
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 800693c:	783c      	ldrb	r4, [r7, #0]
uint8_t TM_SDRAM_Init(void) {
	SDRAM_HandleTypeDef SDRAMHandle;
	FMC_SDRAM_TimingTypeDef Timing;
	FMC_SDRAM_CommandTypeDef Command;

	volatile uint32_t timeout = SDRAM_TIMEOUT;
 800693e:	9302      	str	r3, [sp, #8]
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8006940:	2c00      	cmp	r4, #0
 8006942:	f040 80bd 	bne.w	8006ac0 <TM_SDRAM_Init+0x190>
		return 1;
	}
	
	/* Set instance */
	SDRAMHandle.Instance = FMC_SDRAM_DEVICE;
 8006946:	4b62      	ldr	r3, [pc, #392]	; (8006ad0 <TM_SDRAM_Init+0x1a0>)
}

/* Private functions */
static void TM_SDRAM_InitPins(void) {
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback(GPIO_AF12_FMC)) {
 8006948:	200c      	movs	r0, #12
	if (initialized) {
		return 1;
	}
	
	/* Set instance */
	SDRAMHandle.Instance = FMC_SDRAM_DEVICE;
 800694a:	930f      	str	r3, [sp, #60]	; 0x3c
}

/* Private functions */
static void TM_SDRAM_InitPins(void) {
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback(GPIO_AF12_FMC)) {
 800694c:	f7ff ffee 	bl	800692c <TM_SDRAM_InitCustomPinsCallback>
 8006950:	bbc0      	cbnz	r0, 80069c4 <TM_SDRAM_Init+0x94>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#elif defined(SDRAM_USE_STM32F7_DISCOVERY)
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8006952:	2503      	movs	r5, #3
 8006954:	260c      	movs	r6, #12
 8006956:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800695a:	4623      	mov	r3, r4
 800695c:	4622      	mov	r2, r4
 800695e:	2108      	movs	r1, #8
 8006960:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 8006964:	e88d 0060 	stmia.w	sp, {r5, r6}
 8006968:	f7ff fc01 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800696c:	4623      	mov	r3, r4
 800696e:	4622      	mov	r2, r4
 8006970:	f24c 710b 	movw	r1, #50955	; 0xc70b
 8006974:	4857      	ldr	r0, [pc, #348]	; (8006ad4 <TM_SDRAM_Init+0x1a4>)
 8006976:	e88d 0060 	stmia.w	sp, {r5, r6}
 800697a:	f7ff fbf8 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800697e:	4623      	mov	r3, r4
 8006980:	4622      	mov	r2, r4
 8006982:	f64f 7183 	movw	r1, #65411	; 0xff83
 8006986:	4854      	ldr	r0, [pc, #336]	; (8006ad8 <TM_SDRAM_Init+0x1a8>)
 8006988:	e88d 0060 	stmia.w	sp, {r5, r6}
 800698c:	f7ff fbef 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8006990:	4623      	mov	r3, r4
 8006992:	4622      	mov	r2, r4
 8006994:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8006998:	4850      	ldr	r0, [pc, #320]	; (8006adc <TM_SDRAM_Init+0x1ac>)
 800699a:	e88d 0060 	stmia.w	sp, {r5, r6}
 800699e:	f7ff fbe6 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 80069a2:	4623      	mov	r3, r4
 80069a4:	4622      	mov	r2, r4
 80069a6:	f248 1133 	movw	r1, #33075	; 0x8133
 80069aa:	484d      	ldr	r0, [pc, #308]	; (8006ae0 <TM_SDRAM_Init+0x1b0>)
 80069ac:	e88d 0060 	stmia.w	sp, {r5, r6}
 80069b0:	f7ff fbdd 	bl	800616e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_3 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 80069b4:	4623      	mov	r3, r4
 80069b6:	4622      	mov	r2, r4
 80069b8:	2128      	movs	r1, #40	; 0x28
 80069ba:	484a      	ldr	r0, [pc, #296]	; (8006ae4 <TM_SDRAM_Init+0x1b4>)
 80069bc:	e88d 0060 	stmia.w	sp, {r5, r6}
 80069c0:	f7ff fbd5 	bl	800616e <TM_GPIO_InitAlternate>
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069c4:	4b48      	ldr	r3, [pc, #288]	; (8006ae8 <TM_SDRAM_Init+0x1b8>)
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
	Timing.ExitSelfRefreshDelay = 7;
 80069c6:	2107      	movs	r1, #7
	Timing.RPDelay              = 2;
	Timing.RCDDelay             = 2;
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
 80069c8:	2500      	movs	r5, #0
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80069ca:	2610      	movs	r6, #16
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 80069ce:	a80f      	add	r0, sp, #60	; 0x3c
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
	Timing.ExitSelfRefreshDelay = 7;
	Timing.SelfRefreshTime      = 4;
 80069d6:	2204      	movs	r2, #4
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
	Timing.ExitSelfRefreshDelay = 7;
 80069da:	9109      	str	r1, [sp, #36]	; 0x24
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069dc:	f003 0301 	and.w	r3, r3, #1
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
	Timing.ExitSelfRefreshDelay = 7;
	Timing.SelfRefreshTime      = 4;
	Timing.RowCycleDelay        = 7;
 80069e0:	910b      	str	r1, [sp, #44]	; 0x2c
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 80069e2:	a908      	add	r1, sp, #32
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
	Timing.ExitSelfRefreshDelay = 7;
	Timing.SelfRefreshTime      = 4;
 80069e4:	920a      	str	r2, [sp, #40]	; 0x28
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	9b03      	ldr	r3, [sp, #12]
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
 80069ea:	2302      	movs	r3, #2
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
 80069ec:	9212      	str	r2, [sp, #72]	; 0x48
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
 80069ee:	9308      	str	r3, [sp, #32]
	Timing.ExitSelfRefreshDelay = 7;
	Timing.SelfRefreshTime      = 4;
	Timing.RowCycleDelay        = 7;
	Timing.WriteRecoveryTime    = 2;
 80069f0:	930c      	str	r3, [sp, #48]	; 0x30
	Timing.RPDelay              = 2;
 80069f2:	930d      	str	r3, [sp, #52]	; 0x34
	Timing.RCDDelay             = 2;
 80069f4:	930e      	str	r3, [sp, #56]	; 0x38
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80069f6:	2340      	movs	r3, #64	; 0x40
	Timing.RPDelay              = 2;
	Timing.RCDDelay             = 2;
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
 80069f8:	9510      	str	r5, [sp, #64]	; 0x40
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80069fa:	9314      	str	r3, [sp, #80]	; 0x50
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80069fc:	f44f 7380 	mov.w	r3, #256	; 0x100
	Timing.RCDDelay             = 2;
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006a00:	9511      	str	r5, [sp, #68]	; 0x44
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8006a02:	9315      	str	r3, [sp, #84]	; 0x54
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006a08:	9613      	str	r6, [sp, #76]	; 0x4c
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006a0a:	9317      	str	r3, [sp, #92]	; 0x5c
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006a0c:	9516      	str	r5, [sp, #88]	; 0x58
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
 8006a0e:	9518      	str	r5, [sp, #96]	; 0x60
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006a10:	9519      	str	r5, [sp, #100]	; 0x64
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 8006a12:	f7fc f851 	bl	8002ab8 <HAL_SDRAM_Init>
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
 8006a16:	2301      	movs	r3, #1
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber 		= 1;
	Command.ModeRegisterDefinition 	= 0;
	
	/* Send command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a1c:	eb0d 0106 	add.w	r1, sp, r6
 8006a20:	a80f      	add	r0, sp, #60	; 0x3c
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
 8006a22:	9304      	str	r3, [sp, #16]
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber 		= 1;
 8006a24:	9306      	str	r3, [sp, #24]
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
 8006a26:	9605      	str	r6, [sp, #20]
	Command.AutoRefreshNumber 		= 1;
	Command.ModeRegisterDefinition 	= 0;
 8006a28:	9507      	str	r5, [sp, #28]
	
	/* Send command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a2a:	f7fc f865 	bl	8002af8 <HAL_SDRAM_SendCommand>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <TM_SDRAM_Init+0x1bc>)
 8006a30:	9302      	str	r3, [sp, #8]
	while (timeout--);
 8006a32:	9d02      	ldr	r5, [sp, #8]
 8006a34:	1e6b      	subs	r3, r5, #1
 8006a36:	9302      	str	r3, [sp, #8]
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	d1fa      	bne.n	8006a32 <TM_SDRAM_Init+0x102>
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8006a3c:	2610      	movs	r6, #16
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
	while (timeout--);
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
 8006a3e:	2302      	movs	r3, #2
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber      	= 1;
 8006a40:	f04f 0801 	mov.w	r8, #1
	Command.ModeRegisterDefinition 	= 0;
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a48:	eb0d 0106 	add.w	r1, sp, r6
 8006a4c:	a80f      	add	r0, sp, #60	; 0x3c
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
	while (timeout--);
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
 8006a4e:	9304      	str	r3, [sp, #16]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8006a50:	9605      	str	r6, [sp, #20]
	Command.AutoRefreshNumber      	= 1;
 8006a52:	f8cd 8018 	str.w	r8, [sp, #24]
	Command.ModeRegisterDefinition 	= 0;
 8006a56:	9507      	str	r5, [sp, #28]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a58:	f7fc f84e 	bl	8002af8 <HAL_SDRAM_SendCommand>

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006a5c:	2303      	movs	r3, #3
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber      	= 8;
	Command.ModeRegisterDefinition 	= 0;
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a62:	eb0d 0106 	add.w	r1, sp, r6
 8006a66:	a80f      	add	r0, sp, #60	; 0x3c
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006a68:	9304      	str	r3, [sp, #16]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber      	= 8;
 8006a6a:	2308      	movs	r3, #8
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8006a6c:	9605      	str	r6, [sp, #20]
	Command.AutoRefreshNumber      	= 8;
 8006a6e:	9306      	str	r3, [sp, #24]
	Command.ModeRegisterDefinition 	= 0;
 8006a70:	9507      	str	r5, [sp, #28]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a72:	f7fc f841 	bl	8002af8 <HAL_SDRAM_SendCommand>
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
 8006a76:	2304      	movs	r3, #4
	Command.AutoRefreshNumber      	= 1;
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
	
	/* Wait until the SDRAM controller is ready */
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a7c:	eb0d 0106 	add.w	r1, sp, r6
 8006a80:	a80f      	add	r0, sp, #60	; 0x3c
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
 8006a82:	9304      	str	r3, [sp, #16]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber      	= 1;
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 8006a84:	f44f 7308 	mov.w	r3, #544	; 0x220
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8006a88:	9605      	str	r6, [sp, #20]
	Command.AutoRefreshNumber      	= 1;
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 8006a8a:	9307      	str	r3, [sp, #28]
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
	Command.AutoRefreshNumber      	= 1;
 8006a8c:	f8cd 8018 	str.w	r8, [sp, #24]
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
	
	/* Wait until the SDRAM controller is ready */
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8006a90:	f7fc f832 	bl	8002af8 <HAL_SDRAM_SendCommand>
  
	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SDRAMHandle, SDRAM_REFRESH_COUNT); 
 8006a94:	f240 6103 	movw	r1, #1539	; 0x603
 8006a98:	a80f      	add	r0, sp, #60	; 0x3c
 8006a9a:	f7fc f844 	bl	8002b26 <HAL_SDRAM_ProgramRefreshRate>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <TM_SDRAM_Init+0x1bc>)
 8006aa0:	9302      	str	r3, [sp, #8]
	while (timeout--);
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	9202      	str	r2, [sp, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1fa      	bne.n	8006aa2 <TM_SDRAM_Init+0x172>
	
	/* Check if everything goes right */
	/* Write 0x45 at location 0x50 and check if result is the same on read operation */
	TM_SDRAM_Write8(0x50, 0x45);
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <TM_SDRAM_Init+0x1c0>)
 8006aae:	2145      	movs	r1, #69	; 0x45
 8006ab0:	7011      	strb	r1, [r2, #0]
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	428a      	cmp	r2, r1
		/* Initialized OK */
		initialized = 1;
 8006ab6:	bf0a      	itet	eq
 8006ab8:	2401      	moveq	r4, #1
		/* Initialized OK */
		return 1;
	}
	
	/* Not initialized OK */
	initialized = 0;
 8006aba:	703b      	strbne	r3, [r7, #0]
	TM_SDRAM_Write8(0x50, 0x45);
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
		/* Initialized OK */
		initialized = 1;
 8006abc:	703c      	strbeq	r4, [r7, #0]
	
	/* Not initialized OK */
	initialized = 0;
	
	/* Not ok */
	return 0;
 8006abe:	e000      	b.n	8006ac2 <TM_SDRAM_Init+0x192>
	volatile uint32_t timeout = SDRAM_TIMEOUT;
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
		return 1;
 8006ac0:	2401      	movs	r4, #1
	/* Not initialized OK */
	initialized = 0;
	
	/* Not ok */
	return 0;
}
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	b01c      	add	sp, #112	; 0x70
 8006ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aca:	bf00      	nop
 8006acc:	20004568 	.word	0x20004568
 8006ad0:	a0000140 	.word	0xa0000140
 8006ad4:	40020c00 	.word	0x40020c00
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40021400 	.word	0x40021400
 8006ae0:	40021800 	.word	0x40021800
 8006ae4:	40021c00 	.word	0x40021c00
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	000efff1 	.word	0x000efff1
 8006af0:	c0000050 	.word	0xc0000050

08006af4 <TM_TOUCH_Init>:
#endif

/* Static driver structure */
static TM_TOUCH_DRIVER_t TouchDriver;

TM_TOUCH_Result_t TM_TOUCH_Init(TM_TOUCH_DRIVER_t* Driver, TM_TOUCH_t* TS) {
 8006af4:	b508      	push	{r3, lr}
	/* Set memory to zero */
	memset((uint8_t *)&TouchDriver, 0, sizeof(TM_TOUCH_DRIVER_t));
 8006af6:	2200      	movs	r2, #0
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <TM_TOUCH_Init+0x24>)
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	605a      	str	r2, [r3, #4]

	/* Check for default driver */
	if (Driver != NULL) {
 8006afe:	b148      	cbz	r0, 8006b14 <TM_TOUCH_Init+0x20>
		TouchDriver.Init = Driver->Init;
 8006b00:	6802      	ldr	r2, [r0, #0]
		TouchDriver.Read = Driver->Read;
 8006b02:	6840      	ldr	r0, [r0, #4]
	/* Set memory to zero */
	memset((uint8_t *)&TouchDriver, 0, sizeof(TM_TOUCH_DRIVER_t));

	/* Check for default driver */
	if (Driver != NULL) {
		TouchDriver.Init = Driver->Init;
 8006b04:	601a      	str	r2, [r3, #0]
		TouchDriver.Read = Driver->Read;
 8006b06:	6058      	str	r0, [r3, #4]
		return TM_TOUCH_Result_Error;
#endif
	}
	
	/* Try to INIT */
	if (TouchDriver.Init(TS) == 0) {
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4790      	blx	r2
#elif defined(STM32F7_DISCOVERY) || defined(TOUCH_USE_STM32F7_DISCOVERY)
		TouchDriver.Init = TM_TOUCH_FT5336_Init;
		TouchDriver.Read = TM_TOUCH_FT5336_Read;
#else
		/* Return error, no default drivers available */
		return TM_TOUCH_Result_Error;
 8006b0c:	3000      	adds	r0, #0
 8006b0e:	bf18      	it	ne
 8006b10:	2001      	movne	r0, #1
 8006b12:	bd08      	pop	{r3, pc}
 8006b14:	2001      	movs	r0, #1
		return TM_TOUCH_Result_Ok;
	}
	
	/* Return ERROR */
	return TM_TOUCH_Result_Error;
}
 8006b16:	bd08      	pop	{r3, pc}
 8006b18:	2000456c 	.word	0x2000456c

08006b1c <TM_TOUCH_Read>:
uint8_t TM_TOUCH_Read(TM_TOUCH_t* TS) {
	uint8_t status, i;
	uint16_t tmp;
	
	/* Read touch values from sensor */
	status = TouchDriver.Read(TS);
 8006b1c:	4b1e      	ldr	r3, [pc, #120]	; (8006b98 <TM_TOUCH_Read+0x7c>)
	
	/* Return ERROR */
	return TM_TOUCH_Result_Error;
}

uint8_t TM_TOUCH_Read(TM_TOUCH_t* TS) {
 8006b1e:	b570      	push	{r4, r5, r6, lr}
	uint8_t status, i;
	uint16_t tmp;
	
	/* Read touch values from sensor */
	status = TouchDriver.Read(TS);
 8006b20:	685b      	ldr	r3, [r3, #4]
	
	/* Return ERROR */
	return TM_TOUCH_Result_Error;
}

uint8_t TM_TOUCH_Read(TM_TOUCH_t* TS) {
 8006b22:	4604      	mov	r4, r0
	uint8_t status, i;
	uint16_t tmp;
	
	/* Read touch values from sensor */
	status = TouchDriver.Read(TS);
 8006b24:	4798      	blx	r3
	
	/* Return touch status */
	if (status) {
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d134      	bne.n	8006b94 <TM_TOUCH_Read+0x78>
		return status;
	}
	
	/* Check for orientations */
	if (TS->Orientation == 0) {
 8006b2a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006b2e:	b98b      	cbnz	r3, 8006b54 <TM_TOUCH_Read+0x38>
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
 8006b30:	7820      	ldrb	r0, [r4, #0]
 8006b32:	4622      	mov	r2, r4
 8006b34:	b2d9      	uxtb	r1, r3
 8006b36:	3202      	adds	r2, #2
 8006b38:	4288      	cmp	r0, r1
 8006b3a:	d909      	bls.n	8006b50 <TM_TOUCH_Read+0x34>
			TS->X[i] = TS->MaxX - TS->X[i];
 8006b3c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006b3e:	3301      	adds	r3, #1
 8006b40:	8815      	ldrh	r5, [r2, #0]
 8006b42:	1b49      	subs	r1, r1, r5
			TS->Y[i] = TS->MaxY - TS->Y[i];
 8006b44:	8a95      	ldrh	r5, [r2, #20]
	
	/* Check for orientations */
	if (TS->Orientation == 0) {
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
			TS->X[i] = TS->MaxX - TS->X[i];
 8006b46:	8011      	strh	r1, [r2, #0]
			TS->Y[i] = TS->MaxY - TS->Y[i];
 8006b48:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8006b4a:	1b49      	subs	r1, r1, r5
 8006b4c:	8291      	strh	r1, [r2, #20]
 8006b4e:	e7f1      	b.n	8006b34 <TM_TOUCH_Read+0x18>
			TS->Y[i] = TS->MaxX - tmp;
		}
	}
	
	/* Return OK */
	return 0;
 8006b50:	2000      	movs	r0, #0
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < TS->NumPresses; i++) {
			TS->X[i] = TS->MaxX - TS->X[i];
			TS->Y[i] = TS->MaxY - TS->Y[i];
		}
	}
	if (TS->Orientation == 2) {
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d10d      	bne.n	8006b74 <TM_TOUCH_Read+0x58>
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
 8006b58:	7821      	ldrb	r1, [r4, #0]
 8006b5a:	4623      	mov	r3, r4
 8006b5c:	b2c2      	uxtb	r2, r0
 8006b5e:	3302      	adds	r3, #2
 8006b60:	4291      	cmp	r1, r2
 8006b62:	d9f5      	bls.n	8006b50 <TM_TOUCH_Read+0x34>
			tmp = TS->X[i];
			TS->X[i] = TS->MaxY - TS->Y[i];
 8006b64:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8006b66:	3001      	adds	r0, #1
 8006b68:	8a9e      	ldrh	r6, [r3, #20]
		}
	}
	if (TS->Orientation == 2) {
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
			tmp = TS->X[i];
 8006b6a:	881d      	ldrh	r5, [r3, #0]
			TS->X[i] = TS->MaxY - TS->Y[i];
 8006b6c:	1b92      	subs	r2, r2, r6
			TS->Y[i] = tmp;
 8006b6e:	829d      	strh	r5, [r3, #20]
	}
	if (TS->Orientation == 2) {
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
			tmp = TS->X[i];
			TS->X[i] = TS->MaxY - TS->Y[i];
 8006b70:	801a      	strh	r2, [r3, #0]
 8006b72:	e7f3      	b.n	8006b5c <TM_TOUCH_Read+0x40>
			TS->Y[i] = tmp;
		}
	}
	if (TS->Orientation == 3) {
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d1eb      	bne.n	8006b50 <TM_TOUCH_Read+0x34>
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
 8006b78:	7821      	ldrb	r1, [r4, #0]
 8006b7a:	4623      	mov	r3, r4
 8006b7c:	b2c2      	uxtb	r2, r0
 8006b7e:	3302      	adds	r3, #2
 8006b80:	4291      	cmp	r1, r2
 8006b82:	d9e5      	bls.n	8006b50 <TM_TOUCH_Read+0x34>
			tmp = TS->X[i];
			TS->X[i] = TS->Y[i];
 8006b84:	8a9a      	ldrh	r2, [r3, #20]
 8006b86:	3001      	adds	r0, #1
		}
	}
	if (TS->Orientation == 3) {
		/* Rotate all X and Y values */
		for (i = 0; i < TS->NumPresses; i++) {
			tmp = TS->X[i];
 8006b88:	881d      	ldrh	r5, [r3, #0]
			TS->X[i] = TS->Y[i];
 8006b8a:	801a      	strh	r2, [r3, #0]
			TS->Y[i] = TS->MaxX - tmp;
 8006b8c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006b8e:	1b52      	subs	r2, r2, r5
 8006b90:	829a      	strh	r2, [r3, #20]
 8006b92:	e7f3      	b.n	8006b7c <TM_TOUCH_Read+0x60>
		}
	}
	
	/* Return OK */
	return 0;
}
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	bf00      	nop
 8006b98:	2000456c 	.word	0x2000456c

08006b9c <TM_TOUCH_FT5336_Init>:

uint8_t TM_TOUCH_FT5336_Init(TM_TOUCH_t* TS) {
	uint8_t deviceID;
	
	/* Set max values */
	TS->MaxX = 479;
 8006b9c:	f240 13df 	movw	r3, #479	; 0x1df
/* Delay function */
static void FT_Delay(__IO uint32_t d) {
	while (d--);
}

uint8_t TM_TOUCH_FT5336_Init(TM_TOUCH_t* TS) {
 8006ba0:	b507      	push	{r0, r1, r2, lr}
	uint8_t deviceID;
	
	/* Set max values */
	TS->MaxX = 479;
 8006ba2:	8583      	strh	r3, [r0, #44]	; 0x2c
	TS->MaxY = 271;
 8006ba4:	f240 130f 	movw	r3, #271	; 0x10f
	
	/* Init I2C */
	TM_I2C_Init(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_PP, 100000);
 8006ba8:	4a10      	ldr	r2, [pc, #64]	; (8006bec <TM_TOUCH_FT5336_Init+0x50>)
 8006baa:	2101      	movs	r1, #1
uint8_t TM_TOUCH_FT5336_Init(TM_TOUCH_t* TS) {
	uint8_t deviceID;
	
	/* Set max values */
	TS->MaxX = 479;
	TS->MaxY = 271;
 8006bac:	85c3      	strh	r3, [r0, #46]	; 0x2e
	
	/* Init I2C */
	TM_I2C_Init(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_PP, 100000);
 8006bae:	4810      	ldr	r0, [pc, #64]	; (8006bf0 <TM_TOUCH_FT5336_Init+0x54>)
 8006bb0:	f7ff fb86 	bl	80062c0 <TM_I2C_Init>
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <TM_TOUCH_FT5336_Init+0x58>)
/* Start locations for reading pressed touches */
static uint8_t FT5336_DataRegs[] = {0x03, 0x09, 0x0F, 0x15, 0x1B};

/* Delay function */
static void FT_Delay(__IO uint32_t d) {
	while (d--);
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d1fb      	bne.n	8006bb6 <TM_TOUCH_FT5336_Init+0x1a>
	
	/* Delay */
	FT_Delay(0xFFFFF);
	
	/* Check if device is connected */
	if (TM_I2C_IsDeviceConnected(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV) != TM_I2C_Result_Ok) {
 8006bbe:	2170      	movs	r1, #112	; 0x70
 8006bc0:	480b      	ldr	r0, [pc, #44]	; (8006bf0 <TM_TOUCH_FT5336_Init+0x54>)
 8006bc2:	f7ff fb70 	bl	80062a6 <TM_I2C_IsDeviceConnected>
 8006bc6:	b968      	cbnz	r0, 8006be4 <TM_TOUCH_FT5336_Init+0x48>
		/* Device is not connected */
		return 1;
	}
	
	/* Check device ID */
	TM_I2C_Read(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, 0xA8, &deviceID);
 8006bc8:	f10d 0307 	add.w	r3, sp, #7
 8006bcc:	22a8      	movs	r2, #168	; 0xa8
 8006bce:	2170      	movs	r1, #112	; 0x70
 8006bd0:	4807      	ldr	r0, [pc, #28]	; (8006bf0 <TM_TOUCH_FT5336_Init+0x54>)
 8006bd2:	f7ff fb23 	bl	800621c <TM_I2C_Read>
	
	/* Check if OK */
	if (deviceID != 0x51) {
 8006bd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		/* Connected device is not FT5336 */
		return 2;
	}
	
	/* Return 0 = OK */
	return 0;
 8006bda:	2b51      	cmp	r3, #81	; 0x51
 8006bdc:	bf14      	ite	ne
 8006bde:	2002      	movne	r0, #2
 8006be0:	2000      	moveq	r0, #0
 8006be2:	e000      	b.n	8006be6 <TM_TOUCH_FT5336_Init+0x4a>
	FT_Delay(0xFFFFF);
	
	/* Check if device is connected */
	if (TM_I2C_IsDeviceConnected(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV) != TM_I2C_Result_Ok) {
		/* Device is not connected */
		return 1;
 8006be4:	2001      	movs	r0, #1
		return 2;
	}
	
	/* Return 0 = OK */
	return 0;
}
 8006be6:	b003      	add	sp, #12
 8006be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bec:	000186a0 	.word	0x000186a0
 8006bf0:	40005c00 	.word	0x40005c00
 8006bf4:	000fffff 	.word	0x000fffff

08006bf8 <TM_TOUCH_FT5336_Read>:

uint8_t TM_TOUCH_FT5336_Read(TM_TOUCH_t* TS) {
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status;
	uint8_t i;
	uint8_t DataRead[4];
	
	/* Reset */
	TS->NumPresses = 0;
 8006bfa:	2400      	movs	r4, #0
	
	/* Return 0 = OK */
	return 0;
}

uint8_t TM_TOUCH_FT5336_Read(TM_TOUCH_t* TS) {
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	4605      	mov	r5, r0
	
	/* Reset */
	TS->NumPresses = 0;
	
	/* Check status */
	TM_I2C_Read(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_STATUS_REG, &status);
 8006c00:	2202      	movs	r2, #2
	uint8_t status;
	uint8_t i;
	uint8_t DataRead[4];
	
	/* Reset */
	TS->NumPresses = 0;
 8006c02:	7004      	strb	r4, [r0, #0]
	
	/* Check status */
	TM_I2C_Read(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_STATUS_REG, &status);
 8006c04:	f10d 030b 	add.w	r3, sp, #11
 8006c08:	2170      	movs	r1, #112	; 0x70
 8006c0a:	481a      	ldr	r0, [pc, #104]	; (8006c74 <TM_TOUCH_FT5336_Read+0x7c>)
 8006c0c:	f7ff fb06 	bl	800621c <TM_I2C_Read>
	
	/* Mask status register */
	status &= 0x0F;
 8006c10:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006c14:	f003 030f 	and.w	r3, r3, #15
	
	/* Check if max detected more than max number of contacts */
	if (status > 5) {
 8006c18:	2b05      	cmp	r3, #5
	
	/* Check status */
	TM_I2C_Read(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_STATUS_REG, &status);
	
	/* Mask status register */
	status &= 0x0F;
 8006c1a:	f88d 300b 	strb.w	r3, [sp, #11]
	
	/* Check if max detected more than max number of contacts */
	if (status > 5) {
 8006c1e:	d826      	bhi.n	8006c6e <TM_TOUCH_FT5336_Read+0x76>
	TS->NumPresses = status;
	
	/* Read all positions */
	for (i = 0; i < TS->NumPresses; i++) {
		/* Read 4 bytes in a row */
		TM_I2C_ReadMulti(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_DataRegs[i], DataRead, 4);
 8006c20:	4f15      	ldr	r7, [pc, #84]	; (8006c78 <TM_TOUCH_FT5336_Read+0x80>)
		/* Return ERROR */
		return 1;
	}
	
	/* Save number of touches detected */
	TS->NumPresses = status;
 8006c22:	702b      	strb	r3, [r5, #0]
 8006c24:	1c66      	adds	r6, r4, #1
	
	/* Read all positions */
	for (i = 0; i < TS->NumPresses; i++) {
 8006c26:	782b      	ldrb	r3, [r5, #0]
 8006c28:	b2e4      	uxtb	r4, r4
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	d91d      	bls.n	8006c6a <TM_TOUCH_FT5336_Read+0x72>
		/* Read 4 bytes in a row */
		TM_I2C_ReadMulti(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_DataRegs[i], DataRead, 4);
 8006c2e:	2304      	movs	r3, #4
 8006c30:	5d3a      	ldrb	r2, [r7, r4]
 8006c32:	2170      	movs	r1, #112	; 0x70
 8006c34:	480f      	ldr	r0, [pc, #60]	; (8006c74 <TM_TOUCH_FT5336_Read+0x7c>)
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	ab03      	add	r3, sp, #12
 8006c3a:	f7ff fb11 	bl	8006260 <TM_I2C_ReadMulti>
		
		/* Format touches */
		TS->Y[i] = (DataRead[1]) | ((DataRead[0] & 0x0F) << 8);
 8006c3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006c42:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8006c46:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c50:	4313      	orrs	r3, r2
		TS->X[i] = (DataRead[3]) | ((DataRead[2] & 0x0F) << 8);
 8006c52:	f89d 200f 	ldrb.w	r2, [sp, #15]
	for (i = 0; i < TS->NumPresses; i++) {
		/* Read 4 bytes in a row */
		TM_I2C_ReadMulti(TOUCH_FT5336_I2C, TOUCH_FT5336_I2C_DEV, FT5336_DataRegs[i], DataRead, 4);
		
		/* Format touches */
		TS->Y[i] = (DataRead[1]) | ((DataRead[0] & 0x0F) << 8);
 8006c56:	82e3      	strh	r3, [r4, #22]
		TS->X[i] = (DataRead[3]) | ((DataRead[2] & 0x0F) << 8);
 8006c58:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c62:	4313      	orrs	r3, r2
 8006c64:	8063      	strh	r3, [r4, #2]
 8006c66:	4634      	mov	r4, r6
 8006c68:	e7dc      	b.n	8006c24 <TM_TOUCH_FT5336_Read+0x2c>
	}
	
	/* Return OK */
	return 0;
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e000      	b.n	8006c70 <TM_TOUCH_FT5336_Read+0x78>
	status &= 0x0F;
	
	/* Check if max detected more than max number of contacts */
	if (status > 5) {
		/* Return ERROR */
		return 1;
 8006c6e:	2001      	movs	r0, #1
		TS->X[i] = (DataRead[3]) | ((DataRead[2] & 0x0F) << 8);
	}
	
	/* Return OK */
	return 0;
}
 8006c70:	b005      	add	sp, #20
 8006c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c74:	40005c00 	.word	0x40005c00
 8006c78:	0800b0da 	.word	0x0800b0da

08006c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006c82:	e003      	b.n	8006c8c <LoopCopyDataInit>

08006c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006c8a:	3104      	adds	r1, #4

08006c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006c8c:	480b      	ldr	r0, [pc, #44]	; (8006cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006c94:	d3f6      	bcc.n	8006c84 <CopyDataInit>
  ldr  r2, =_sbss
 8006c96:	4a0b      	ldr	r2, [pc, #44]	; (8006cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006c98:	e002      	b.n	8006ca0 <LoopFillZerobss>

08006c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006c9c:	f842 3b04 	str.w	r3, [r2], #4

08006ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ca4:	d3f9      	bcc.n	8006c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ca6:	f7fe fa05 	bl	80050b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006caa:	f000 f811 	bl	8006cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cae:	f7fe f86f 	bl	8004d90 <main>
  bx  lr    
 8006cb2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006cb4:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8006cb8:	0800b254 	.word	0x0800b254
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006cc0:	2000068c 	.word	0x2000068c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006cc4:	2000068c 	.word	0x2000068c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006cc8:	20004c6c 	.word	0x20004c6c

08006ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006ccc:	e7fe      	b.n	8006ccc <ADC_IRQHandler>
	...

08006cd0 <__libc_init_array>:
 8006cd0:	b570      	push	{r4, r5, r6, lr}
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <__libc_init_array+0x3c>)
 8006cd4:	4c0e      	ldr	r4, [pc, #56]	; (8006d10 <__libc_init_array+0x40>)
 8006cd6:	1ae4      	subs	r4, r4, r3
 8006cd8:	10a4      	asrs	r4, r4, #2
 8006cda:	2500      	movs	r5, #0
 8006cdc:	461e      	mov	r6, r3
 8006cde:	42a5      	cmp	r5, r4
 8006ce0:	d004      	beq.n	8006cec <__libc_init_array+0x1c>
 8006ce2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ce6:	4798      	blx	r3
 8006ce8:	3501      	adds	r5, #1
 8006cea:	e7f8      	b.n	8006cde <__libc_init_array+0xe>
 8006cec:	f002 fef0 	bl	8009ad0 <_init>
 8006cf0:	4c08      	ldr	r4, [pc, #32]	; (8006d14 <__libc_init_array+0x44>)
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <__libc_init_array+0x48>)
 8006cf4:	1ae4      	subs	r4, r4, r3
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	2500      	movs	r5, #0
 8006cfa:	461e      	mov	r6, r3
 8006cfc:	42a5      	cmp	r5, r4
 8006cfe:	d004      	beq.n	8006d0a <__libc_init_array+0x3a>
 8006d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d04:	4798      	blx	r3
 8006d06:	3501      	adds	r5, #1
 8006d08:	e7f8      	b.n	8006cfc <__libc_init_array+0x2c>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	0800b24c 	.word	0x0800b24c
 8006d10:	0800b24c 	.word	0x0800b24c
 8006d14:	0800b250 	.word	0x0800b250
 8006d18:	0800b24c 	.word	0x0800b24c

08006d1c <malloc>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <malloc+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f000 b803 	b.w	8006d2c <_malloc_r>
 8006d26:	bf00      	nop
 8006d28:	20000650 	.word	0x20000650

08006d2c <_malloc_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	f101 040b 	add.w	r4, r1, #11
 8006d34:	2c16      	cmp	r4, #22
 8006d36:	b085      	sub	sp, #20
 8006d38:	4681      	mov	r9, r0
 8006d3a:	d903      	bls.n	8006d44 <_malloc_r+0x18>
 8006d3c:	f034 0407 	bics.w	r4, r4, #7
 8006d40:	d501      	bpl.n	8006d46 <_malloc_r+0x1a>
 8006d42:	e002      	b.n	8006d4a <_malloc_r+0x1e>
 8006d44:	2410      	movs	r4, #16
 8006d46:	428c      	cmp	r4, r1
 8006d48:	d203      	bcs.n	8006d52 <_malloc_r+0x26>
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	f8c9 3000 	str.w	r3, [r9]
 8006d50:	e1ea      	b.n	8007128 <_malloc_r+0x3fc>
 8006d52:	4648      	mov	r0, r9
 8006d54:	f000 fa1d 	bl	8007192 <__malloc_lock>
 8006d58:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006d5c:	4d9e      	ldr	r5, [pc, #632]	; (8006fd8 <_malloc_r+0x2ac>)
 8006d5e:	d217      	bcs.n	8006d90 <_malloc_r+0x64>
 8006d60:	f104 0208 	add.w	r2, r4, #8
 8006d64:	442a      	add	r2, r5
 8006d66:	f1a2 0108 	sub.w	r1, r2, #8
 8006d6a:	6856      	ldr	r6, [r2, #4]
 8006d6c:	428e      	cmp	r6, r1
 8006d6e:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8006d72:	d102      	bne.n	8006d7a <_malloc_r+0x4e>
 8006d74:	68d6      	ldr	r6, [r2, #12]
 8006d76:	42b2      	cmp	r2, r6
 8006d78:	d008      	beq.n	8006d8c <_malloc_r+0x60>
 8006d7a:	6873      	ldr	r3, [r6, #4]
 8006d7c:	68f2      	ldr	r2, [r6, #12]
 8006d7e:	68b1      	ldr	r1, [r6, #8]
 8006d80:	f023 0303 	bic.w	r3, r3, #3
 8006d84:	60ca      	str	r2, [r1, #12]
 8006d86:	4433      	add	r3, r6
 8006d88:	6091      	str	r1, [r2, #8]
 8006d8a:	e02f      	b.n	8006dec <_malloc_r+0xc0>
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	e03d      	b.n	8006e0c <_malloc_r+0xe0>
 8006d90:	0a63      	lsrs	r3, r4, #9
 8006d92:	d01a      	beq.n	8006dca <_malloc_r+0x9e>
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d802      	bhi.n	8006d9e <_malloc_r+0x72>
 8006d98:	09a3      	lsrs	r3, r4, #6
 8006d9a:	3338      	adds	r3, #56	; 0x38
 8006d9c:	e018      	b.n	8006dd0 <_malloc_r+0xa4>
 8006d9e:	2b14      	cmp	r3, #20
 8006da0:	d801      	bhi.n	8006da6 <_malloc_r+0x7a>
 8006da2:	335b      	adds	r3, #91	; 0x5b
 8006da4:	e014      	b.n	8006dd0 <_malloc_r+0xa4>
 8006da6:	2b54      	cmp	r3, #84	; 0x54
 8006da8:	d802      	bhi.n	8006db0 <_malloc_r+0x84>
 8006daa:	0b23      	lsrs	r3, r4, #12
 8006dac:	336e      	adds	r3, #110	; 0x6e
 8006dae:	e00f      	b.n	8006dd0 <_malloc_r+0xa4>
 8006db0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006db4:	d802      	bhi.n	8006dbc <_malloc_r+0x90>
 8006db6:	0be3      	lsrs	r3, r4, #15
 8006db8:	3377      	adds	r3, #119	; 0x77
 8006dba:	e009      	b.n	8006dd0 <_malloc_r+0xa4>
 8006dbc:	f240 5254 	movw	r2, #1364	; 0x554
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d804      	bhi.n	8006dce <_malloc_r+0xa2>
 8006dc4:	0ca3      	lsrs	r3, r4, #18
 8006dc6:	337c      	adds	r3, #124	; 0x7c
 8006dc8:	e002      	b.n	8006dd0 <_malloc_r+0xa4>
 8006dca:	233f      	movs	r3, #63	; 0x3f
 8006dcc:	e000      	b.n	8006dd0 <_malloc_r+0xa4>
 8006dce:	237e      	movs	r3, #126	; 0x7e
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006dd6:	f1a2 0008 	sub.w	r0, r2, #8
 8006dda:	6856      	ldr	r6, [r2, #4]
 8006ddc:	e00c      	b.n	8006df8 <_malloc_r+0xcc>
 8006dde:	2900      	cmp	r1, #0
 8006de0:	68f1      	ldr	r1, [r6, #12]
 8006de2:	db08      	blt.n	8006df6 <_malloc_r+0xca>
 8006de4:	68b3      	ldr	r3, [r6, #8]
 8006de6:	60d9      	str	r1, [r3, #12]
 8006de8:	608b      	str	r3, [r1, #8]
 8006dea:	18b3      	adds	r3, r6, r2
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	605a      	str	r2, [r3, #4]
 8006df4:	e1a3      	b.n	800713e <_malloc_r+0x412>
 8006df6:	460e      	mov	r6, r1
 8006df8:	4286      	cmp	r6, r0
 8006dfa:	d006      	beq.n	8006e0a <_malloc_r+0xde>
 8006dfc:	6872      	ldr	r2, [r6, #4]
 8006dfe:	f022 0203 	bic.w	r2, r2, #3
 8006e02:	1b11      	subs	r1, r2, r4
 8006e04:	290f      	cmp	r1, #15
 8006e06:	ddea      	ble.n	8006dde <_malloc_r+0xb2>
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	4a72      	ldr	r2, [pc, #456]	; (8006fd8 <_malloc_r+0x2ac>)
 8006e0e:	692e      	ldr	r6, [r5, #16]
 8006e10:	f102 0708 	add.w	r7, r2, #8
 8006e14:	42be      	cmp	r6, r7
 8006e16:	4639      	mov	r1, r7
 8006e18:	d079      	beq.n	8006f0e <_malloc_r+0x1e2>
 8006e1a:	6870      	ldr	r0, [r6, #4]
 8006e1c:	f020 0003 	bic.w	r0, r0, #3
 8006e20:	ebc4 0e00 	rsb	lr, r4, r0
 8006e24:	f1be 0f0f 	cmp.w	lr, #15
 8006e28:	dd0d      	ble.n	8006e46 <_malloc_r+0x11a>
 8006e2a:	1933      	adds	r3, r6, r4
 8006e2c:	f044 0401 	orr.w	r4, r4, #1
 8006e30:	6074      	str	r4, [r6, #4]
 8006e32:	6153      	str	r3, [r2, #20]
 8006e34:	6113      	str	r3, [r2, #16]
 8006e36:	f04e 0201 	orr.w	r2, lr, #1
 8006e3a:	60df      	str	r7, [r3, #12]
 8006e3c:	609f      	str	r7, [r3, #8]
 8006e3e:	605a      	str	r2, [r3, #4]
 8006e40:	f843 e00e 	str.w	lr, [r3, lr]
 8006e44:	e17b      	b.n	800713e <_malloc_r+0x412>
 8006e46:	f1be 0f00 	cmp.w	lr, #0
 8006e4a:	6157      	str	r7, [r2, #20]
 8006e4c:	6117      	str	r7, [r2, #16]
 8006e4e:	db05      	blt.n	8006e5c <_malloc_r+0x130>
 8006e50:	4430      	add	r0, r6
 8006e52:	6843      	ldr	r3, [r0, #4]
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6043      	str	r3, [r0, #4]
 8006e5a:	e170      	b.n	800713e <_malloc_r+0x412>
 8006e5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e60:	d215      	bcs.n	8006e8e <_malloc_r+0x162>
 8006e62:	08c0      	lsrs	r0, r0, #3
 8006e64:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006e68:	2701      	movs	r7, #1
 8006e6a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006e6e:	6857      	ldr	r7, [r2, #4]
 8006e70:	3001      	adds	r0, #1
 8006e72:	ea4e 0707 	orr.w	r7, lr, r7
 8006e76:	6057      	str	r7, [r2, #4]
 8006e78:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006e7c:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006e80:	f8c6 e008 	str.w	lr, [r6, #8]
 8006e84:	3f08      	subs	r7, #8
 8006e86:	60f7      	str	r7, [r6, #12]
 8006e88:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006e8c:	e03d      	b.n	8006f0a <_malloc_r+0x1de>
 8006e8e:	0a42      	lsrs	r2, r0, #9
 8006e90:	2a04      	cmp	r2, #4
 8006e92:	d802      	bhi.n	8006e9a <_malloc_r+0x16e>
 8006e94:	0982      	lsrs	r2, r0, #6
 8006e96:	3238      	adds	r2, #56	; 0x38
 8006e98:	e015      	b.n	8006ec6 <_malloc_r+0x19a>
 8006e9a:	2a14      	cmp	r2, #20
 8006e9c:	d801      	bhi.n	8006ea2 <_malloc_r+0x176>
 8006e9e:	325b      	adds	r2, #91	; 0x5b
 8006ea0:	e011      	b.n	8006ec6 <_malloc_r+0x19a>
 8006ea2:	2a54      	cmp	r2, #84	; 0x54
 8006ea4:	d802      	bhi.n	8006eac <_malloc_r+0x180>
 8006ea6:	0b02      	lsrs	r2, r0, #12
 8006ea8:	326e      	adds	r2, #110	; 0x6e
 8006eaa:	e00c      	b.n	8006ec6 <_malloc_r+0x19a>
 8006eac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006eb0:	d802      	bhi.n	8006eb8 <_malloc_r+0x18c>
 8006eb2:	0bc2      	lsrs	r2, r0, #15
 8006eb4:	3277      	adds	r2, #119	; 0x77
 8006eb6:	e006      	b.n	8006ec6 <_malloc_r+0x19a>
 8006eb8:	f240 5754 	movw	r7, #1364	; 0x554
 8006ebc:	42ba      	cmp	r2, r7
 8006ebe:	bf9a      	itte	ls
 8006ec0:	0c82      	lsrls	r2, r0, #18
 8006ec2:	327c      	addls	r2, #124	; 0x7c
 8006ec4:	227e      	movhi	r2, #126	; 0x7e
 8006ec6:	1c57      	adds	r7, r2, #1
 8006ec8:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006ecc:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006ed0:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006fd8 <_malloc_r+0x2ac>
 8006ed4:	45be      	cmp	lr, r7
 8006ed6:	d10d      	bne.n	8006ef4 <_malloc_r+0x1c8>
 8006ed8:	2001      	movs	r0, #1
 8006eda:	1092      	asrs	r2, r2, #2
 8006edc:	fa00 f202 	lsl.w	r2, r0, r2
 8006ee0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006ee4:	4310      	orrs	r0, r2
 8006ee6:	f8cc 0004 	str.w	r0, [ip, #4]
 8006eea:	4672      	mov	r2, lr
 8006eec:	e009      	b.n	8006f02 <_malloc_r+0x1d6>
 8006eee:	68bf      	ldr	r7, [r7, #8]
 8006ef0:	45be      	cmp	lr, r7
 8006ef2:	d004      	beq.n	8006efe <_malloc_r+0x1d2>
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	f022 0203 	bic.w	r2, r2, #3
 8006efa:	4290      	cmp	r0, r2
 8006efc:	d3f7      	bcc.n	8006eee <_malloc_r+0x1c2>
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	46be      	mov	lr, r7
 8006f02:	60f2      	str	r2, [r6, #12]
 8006f04:	f8c6 e008 	str.w	lr, [r6, #8]
 8006f08:	6096      	str	r6, [r2, #8]
 8006f0a:	f8ce 600c 	str.w	r6, [lr, #12]
 8006f0e:	2001      	movs	r0, #1
 8006f10:	109a      	asrs	r2, r3, #2
 8006f12:	fa00 f202 	lsl.w	r2, r0, r2
 8006f16:	6868      	ldr	r0, [r5, #4]
 8006f18:	4282      	cmp	r2, r0
 8006f1a:	d85f      	bhi.n	8006fdc <_malloc_r+0x2b0>
 8006f1c:	4202      	tst	r2, r0
 8006f1e:	d106      	bne.n	8006f2e <_malloc_r+0x202>
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	0052      	lsls	r2, r2, #1
 8006f26:	4202      	tst	r2, r0
 8006f28:	f103 0304 	add.w	r3, r3, #4
 8006f2c:	d0fa      	beq.n	8006f24 <_malloc_r+0x1f8>
 8006f2e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8006f32:	46c2      	mov	sl, r8
 8006f34:	469c      	mov	ip, r3
 8006f36:	f8da 600c 	ldr.w	r6, [sl, #12]
 8006f3a:	4556      	cmp	r6, sl
 8006f3c:	d02c      	beq.n	8006f98 <_malloc_r+0x26c>
 8006f3e:	6870      	ldr	r0, [r6, #4]
 8006f40:	68f7      	ldr	r7, [r6, #12]
 8006f42:	f020 0003 	bic.w	r0, r0, #3
 8006f46:	ebc4 0e00 	rsb	lr, r4, r0
 8006f4a:	f1be 0f0f 	cmp.w	lr, #15
 8006f4e:	dd11      	ble.n	8006f74 <_malloc_r+0x248>
 8006f50:	1933      	adds	r3, r6, r4
 8006f52:	f044 0401 	orr.w	r4, r4, #1
 8006f56:	6074      	str	r4, [r6, #4]
 8006f58:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8006f5c:	60d7      	str	r7, [r2, #12]
 8006f5e:	60ba      	str	r2, [r7, #8]
 8006f60:	f04e 0201 	orr.w	r2, lr, #1
 8006f64:	616b      	str	r3, [r5, #20]
 8006f66:	612b      	str	r3, [r5, #16]
 8006f68:	60d9      	str	r1, [r3, #12]
 8006f6a:	6099      	str	r1, [r3, #8]
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	f843 e00e 	str.w	lr, [r3, lr]
 8006f72:	e00b      	b.n	8006f8c <_malloc_r+0x260>
 8006f74:	f1be 0f00 	cmp.w	lr, #0
 8006f78:	db0c      	blt.n	8006f94 <_malloc_r+0x268>
 8006f7a:	1833      	adds	r3, r6, r0
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006f88:	60df      	str	r7, [r3, #12]
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	f000 f901 	bl	8007194 <__malloc_unlock>
 8006f92:	e0d8      	b.n	8007146 <_malloc_r+0x41a>
 8006f94:	463e      	mov	r6, r7
 8006f96:	e7d0      	b.n	8006f3a <_malloc_r+0x20e>
 8006f98:	f10c 0c01 	add.w	ip, ip, #1
 8006f9c:	f01c 0f03 	tst.w	ip, #3
 8006fa0:	f10a 0a08 	add.w	sl, sl, #8
 8006fa4:	d1c7      	bne.n	8006f36 <_malloc_r+0x20a>
 8006fa6:	0798      	lsls	r0, r3, #30
 8006fa8:	d104      	bne.n	8006fb4 <_malloc_r+0x288>
 8006faa:	686b      	ldr	r3, [r5, #4]
 8006fac:	ea23 0302 	bic.w	r3, r3, r2
 8006fb0:	606b      	str	r3, [r5, #4]
 8006fb2:	e005      	b.n	8006fc0 <_malloc_r+0x294>
 8006fb4:	f858 0908 	ldr.w	r0, [r8], #-8
 8006fb8:	4580      	cmp	r8, r0
 8006fba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fbe:	d0f2      	beq.n	8006fa6 <_malloc_r+0x27a>
 8006fc0:	6868      	ldr	r0, [r5, #4]
 8006fc2:	0052      	lsls	r2, r2, #1
 8006fc4:	4282      	cmp	r2, r0
 8006fc6:	d809      	bhi.n	8006fdc <_malloc_r+0x2b0>
 8006fc8:	b142      	cbz	r2, 8006fdc <_malloc_r+0x2b0>
 8006fca:	4663      	mov	r3, ip
 8006fcc:	4202      	tst	r2, r0
 8006fce:	d1ae      	bne.n	8006f2e <_malloc_r+0x202>
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	0052      	lsls	r2, r2, #1
 8006fd4:	e7fa      	b.n	8006fcc <_malloc_r+0x2a0>
 8006fd6:	bf00      	nop
 8006fd8:	20000150 	.word	0x20000150
 8006fdc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006fe0:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006fe4:	f026 0603 	bic.w	r6, r6, #3
 8006fe8:	42b4      	cmp	r4, r6
 8006fea:	d803      	bhi.n	8006ff4 <_malloc_r+0x2c8>
 8006fec:	1b33      	subs	r3, r6, r4
 8006fee:	2b0f      	cmp	r3, #15
 8006ff0:	f300 809c 	bgt.w	800712c <_malloc_r+0x400>
 8006ff4:	4a56      	ldr	r2, [pc, #344]	; (8007150 <_malloc_r+0x424>)
 8006ff6:	4957      	ldr	r1, [pc, #348]	; (8007154 <_malloc_r+0x428>)
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	6808      	ldr	r0, [r1, #0]
 8006ffc:	9101      	str	r1, [sp, #4]
 8006ffe:	f102 0810 	add.w	r8, r2, #16
 8007002:	4a55      	ldr	r2, [pc, #340]	; (8007158 <_malloc_r+0x42c>)
 8007004:	9203      	str	r2, [sp, #12]
 8007006:	3001      	adds	r0, #1
 8007008:	bf18      	it	ne
 800700a:	f102 31ff 	addne.w	r1, r2, #4294967295
 800700e:	44a0      	add	r8, r4
 8007010:	bf1e      	ittt	ne
 8007012:	4488      	addne	r8, r1
 8007014:	4251      	negne	r1, r2
 8007016:	ea01 0808 	andne.w	r8, r1, r8
 800701a:	eb0b 0306 	add.w	r3, fp, r6
 800701e:	4641      	mov	r1, r8
 8007020:	4648      	mov	r0, r9
 8007022:	9302      	str	r3, [sp, #8]
 8007024:	f000 f8b8 	bl	8007198 <_sbrk_r>
 8007028:	1c42      	adds	r2, r0, #1
 800702a:	4607      	mov	r7, r0
 800702c:	d06f      	beq.n	800710e <_malloc_r+0x3e2>
 800702e:	9b02      	ldr	r3, [sp, #8]
 8007030:	9a03      	ldr	r2, [sp, #12]
 8007032:	4283      	cmp	r3, r0
 8007034:	d901      	bls.n	800703a <_malloc_r+0x30e>
 8007036:	45ab      	cmp	fp, r5
 8007038:	d169      	bne.n	800710e <_malloc_r+0x3e2>
 800703a:	f8df a128 	ldr.w	sl, [pc, #296]	; 8007164 <_malloc_r+0x438>
 800703e:	f8df c128 	ldr.w	ip, [pc, #296]	; 8007168 <_malloc_r+0x43c>
 8007042:	f8da 0000 	ldr.w	r0, [sl]
 8007046:	42bb      	cmp	r3, r7
 8007048:	4440      	add	r0, r8
 800704a:	f8ca 0000 	str.w	r0, [sl]
 800704e:	d108      	bne.n	8007062 <_malloc_r+0x336>
 8007050:	ea13 0f0c 	tst.w	r3, ip
 8007054:	d105      	bne.n	8007062 <_malloc_r+0x336>
 8007056:	68ab      	ldr	r3, [r5, #8]
 8007058:	4446      	add	r6, r8
 800705a:	f046 0601 	orr.w	r6, r6, #1
 800705e:	605e      	str	r6, [r3, #4]
 8007060:	e049      	b.n	80070f6 <_malloc_r+0x3ca>
 8007062:	9901      	ldr	r1, [sp, #4]
 8007064:	f8d1 e000 	ldr.w	lr, [r1]
 8007068:	f1be 3fff 	cmp.w	lr, #4294967295
 800706c:	bf15      	itete	ne
 800706e:	1afb      	subne	r3, r7, r3
 8007070:	4b38      	ldreq	r3, [pc, #224]	; (8007154 <_malloc_r+0x428>)
 8007072:	181b      	addne	r3, r3, r0
 8007074:	601f      	streq	r7, [r3, #0]
 8007076:	bf18      	it	ne
 8007078:	f8ca 3000 	strne.w	r3, [sl]
 800707c:	f017 0307 	ands.w	r3, r7, #7
 8007080:	bf1c      	itt	ne
 8007082:	f1c3 0308 	rsbne	r3, r3, #8
 8007086:	18ff      	addne	r7, r7, r3
 8007088:	44b8      	add	r8, r7
 800708a:	441a      	add	r2, r3
 800708c:	ea08 080c 	and.w	r8, r8, ip
 8007090:	ebc8 0802 	rsb	r8, r8, r2
 8007094:	4641      	mov	r1, r8
 8007096:	4648      	mov	r0, r9
 8007098:	f000 f87e 	bl	8007198 <_sbrk_r>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	bf04      	itt	eq
 80070a0:	4638      	moveq	r0, r7
 80070a2:	f04f 0800 	moveq.w	r8, #0
 80070a6:	f8da 3000 	ldr.w	r3, [sl]
 80070aa:	60af      	str	r7, [r5, #8]
 80070ac:	1bc2      	subs	r2, r0, r7
 80070ae:	4442      	add	r2, r8
 80070b0:	4443      	add	r3, r8
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	45ab      	cmp	fp, r5
 80070b8:	f8ca 3000 	str.w	r3, [sl]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	d01a      	beq.n	80070f6 <_malloc_r+0x3ca>
 80070c0:	2e0f      	cmp	r6, #15
 80070c2:	d802      	bhi.n	80070ca <_malloc_r+0x39e>
 80070c4:	2301      	movs	r3, #1
 80070c6:	607b      	str	r3, [r7, #4]
 80070c8:	e021      	b.n	800710e <_malloc_r+0x3e2>
 80070ca:	f8db 3004 	ldr.w	r3, [fp, #4]
 80070ce:	3e0c      	subs	r6, #12
 80070d0:	f026 0607 	bic.w	r6, r6, #7
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	4333      	orrs	r3, r6
 80070da:	f8cb 3004 	str.w	r3, [fp, #4]
 80070de:	eb0b 0306 	add.w	r3, fp, r6
 80070e2:	2205      	movs	r2, #5
 80070e4:	2e0f      	cmp	r6, #15
 80070e6:	605a      	str	r2, [r3, #4]
 80070e8:	609a      	str	r2, [r3, #8]
 80070ea:	d904      	bls.n	80070f6 <_malloc_r+0x3ca>
 80070ec:	f10b 0108 	add.w	r1, fp, #8
 80070f0:	4648      	mov	r0, r9
 80070f2:	f001 fed7 	bl	8008ea4 <_free_r>
 80070f6:	4a19      	ldr	r2, [pc, #100]	; (800715c <_malloc_r+0x430>)
 80070f8:	f8da 3000 	ldr.w	r3, [sl]
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	428b      	cmp	r3, r1
 8007100:	bf88      	it	hi
 8007102:	6013      	strhi	r3, [r2, #0]
 8007104:	4a16      	ldr	r2, [pc, #88]	; (8007160 <_malloc_r+0x434>)
 8007106:	6811      	ldr	r1, [r2, #0]
 8007108:	428b      	cmp	r3, r1
 800710a:	bf88      	it	hi
 800710c:	6013      	strhi	r3, [r2, #0]
 800710e:	68ab      	ldr	r3, [r5, #8]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	f022 0203 	bic.w	r2, r2, #3
 8007116:	4294      	cmp	r4, r2
 8007118:	eba2 0304 	sub.w	r3, r2, r4
 800711c:	d801      	bhi.n	8007122 <_malloc_r+0x3f6>
 800711e:	2b0f      	cmp	r3, #15
 8007120:	dc04      	bgt.n	800712c <_malloc_r+0x400>
 8007122:	4648      	mov	r0, r9
 8007124:	f000 f836 	bl	8007194 <__malloc_unlock>
 8007128:	2600      	movs	r6, #0
 800712a:	e00c      	b.n	8007146 <_malloc_r+0x41a>
 800712c:	68ae      	ldr	r6, [r5, #8]
 800712e:	f044 0201 	orr.w	r2, r4, #1
 8007132:	4434      	add	r4, r6
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	6072      	str	r2, [r6, #4]
 800713a:	60ac      	str	r4, [r5, #8]
 800713c:	6063      	str	r3, [r4, #4]
 800713e:	4648      	mov	r0, r9
 8007140:	f000 f828 	bl	8007194 <__malloc_unlock>
 8007144:	3608      	adds	r6, #8
 8007146:	4630      	mov	r0, r6
 8007148:	b005      	add	sp, #20
 800714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714e:	bf00      	nop
 8007150:	2000457c 	.word	0x2000457c
 8007154:	2000055c 	.word	0x2000055c
 8007158:	00000080 	.word	0x00000080
 800715c:	20004578 	.word	0x20004578
 8007160:	20004574 	.word	0x20004574
 8007164:	20004580 	.word	0x20004580
 8007168:	0000007f 	.word	0x0000007f

0800716c <memcpy>:
 800716c:	b510      	push	{r4, lr}
 800716e:	1e43      	subs	r3, r0, #1
 8007170:	440a      	add	r2, r1
 8007172:	4291      	cmp	r1, r2
 8007174:	d004      	beq.n	8007180 <memcpy+0x14>
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800717e:	e7f8      	b.n	8007172 <memcpy+0x6>
 8007180:	bd10      	pop	{r4, pc}

08007182 <memset>:
 8007182:	4402      	add	r2, r0
 8007184:	4603      	mov	r3, r0
 8007186:	4293      	cmp	r3, r2
 8007188:	d002      	beq.n	8007190 <memset+0xe>
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7fa      	b.n	8007186 <memset+0x4>
 8007190:	4770      	bx	lr

08007192 <__malloc_lock>:
 8007192:	4770      	bx	lr

08007194 <__malloc_unlock>:
 8007194:	4770      	bx	lr
	...

08007198 <_sbrk_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4c06      	ldr	r4, [pc, #24]	; (80071b4 <_sbrk_r+0x1c>)
 800719c:	2300      	movs	r3, #0
 800719e:	4605      	mov	r5, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	f002 fc86 	bl	8009ab4 <_sbrk>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_sbrk_r+0x1a>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_sbrk_r+0x1a>
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	20004c68 	.word	0x20004c68

080071b8 <sprintf>:
 80071b8:	b40e      	push	{r1, r2, r3}
 80071ba:	b500      	push	{lr}
 80071bc:	b09c      	sub	sp, #112	; 0x70
 80071be:	f44f 7102 	mov.w	r1, #520	; 0x208
 80071c2:	ab1d      	add	r3, sp, #116	; 0x74
 80071c4:	f8ad 1014 	strh.w	r1, [sp, #20]
 80071c8:	9002      	str	r0, [sp, #8]
 80071ca:	9006      	str	r0, [sp, #24]
 80071cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071d0:	480a      	ldr	r0, [pc, #40]	; (80071fc <sprintf+0x44>)
 80071d2:	9104      	str	r1, [sp, #16]
 80071d4:	9107      	str	r1, [sp, #28]
 80071d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80071da:	f853 2b04 	ldr.w	r2, [r3], #4
 80071de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80071e2:	6800      	ldr	r0, [r0, #0]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	a902      	add	r1, sp, #8
 80071e8:	f000 f812 	bl	8007210 <_svfprintf_r>
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	2200      	movs	r2, #0
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	b01c      	add	sp, #112	; 0x70
 80071f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f8:	b003      	add	sp, #12
 80071fa:	4770      	bx	lr
 80071fc:	20000650 	.word	0x20000650

08007200 <strcpy>:
 8007200:	4603      	mov	r3, r0
 8007202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007206:	f803 2b01 	strb.w	r2, [r3], #1
 800720a:	2a00      	cmp	r2, #0
 800720c:	d1f9      	bne.n	8007202 <strcpy+0x2>
 800720e:	4770      	bx	lr

08007210 <_svfprintf_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	b0bd      	sub	sp, #244	; 0xf4
 8007216:	468b      	mov	fp, r1
 8007218:	9205      	str	r2, [sp, #20]
 800721a:	461f      	mov	r7, r3
 800721c:	4682      	mov	sl, r0
 800721e:	f001 feff 	bl	8009020 <_localeconv_r>
 8007222:	6803      	ldr	r3, [r0, #0]
 8007224:	930d      	str	r3, [sp, #52]	; 0x34
 8007226:	4618      	mov	r0, r3
 8007228:	f7f8 fff2 	bl	8000210 <strlen>
 800722c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007230:	9008      	str	r0, [sp, #32]
 8007232:	0619      	lsls	r1, r3, #24
 8007234:	d515      	bpl.n	8007262 <_svfprintf_r+0x52>
 8007236:	f8db 3010 	ldr.w	r3, [fp, #16]
 800723a:	b993      	cbnz	r3, 8007262 <_svfprintf_r+0x52>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	4650      	mov	r0, sl
 8007240:	f7ff fd74 	bl	8006d2c <_malloc_r>
 8007244:	f8cb 0000 	str.w	r0, [fp]
 8007248:	f8cb 0010 	str.w	r0, [fp, #16]
 800724c:	b930      	cbnz	r0, 800725c <_svfprintf_r+0x4c>
 800724e:	230c      	movs	r3, #12
 8007250:	f8ca 3000 	str.w	r3, [sl]
 8007254:	f04f 30ff 	mov.w	r0, #4294967295
 8007258:	f000 bf95 	b.w	8008186 <_svfprintf_r+0xf76>
 800725c:	2340      	movs	r3, #64	; 0x40
 800725e:	f8cb 3014 	str.w	r3, [fp, #20]
 8007262:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80074c8 <_svfprintf_r+0x2b8>
 8007266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800726a:	2300      	movs	r3, #0
 800726c:	ac2c      	add	r4, sp, #176	; 0xb0
 800726e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007270:	9321      	str	r3, [sp, #132]	; 0x84
 8007272:	9320      	str	r3, [sp, #128]	; 0x80
 8007274:	9304      	str	r3, [sp, #16]
 8007276:	9311      	str	r3, [sp, #68]	; 0x44
 8007278:	9310      	str	r3, [sp, #64]	; 0x40
 800727a:	930a      	str	r3, [sp, #40]	; 0x28
 800727c:	9d05      	ldr	r5, [sp, #20]
 800727e:	462b      	mov	r3, r5
 8007280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007284:	b11a      	cbz	r2, 800728e <_svfprintf_r+0x7e>
 8007286:	2a25      	cmp	r2, #37	; 0x25
 8007288:	d001      	beq.n	800728e <_svfprintf_r+0x7e>
 800728a:	461d      	mov	r5, r3
 800728c:	e7f7      	b.n	800727e <_svfprintf_r+0x6e>
 800728e:	9b05      	ldr	r3, [sp, #20]
 8007290:	1aee      	subs	r6, r5, r3
 8007292:	d017      	beq.n	80072c4 <_svfprintf_r+0xb4>
 8007294:	e884 0048 	stmia.w	r4, {r3, r6}
 8007298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800729a:	4433      	add	r3, r6
 800729c:	9321      	str	r3, [sp, #132]	; 0x84
 800729e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80072a0:	3301      	adds	r3, #1
 80072a2:	2b07      	cmp	r3, #7
 80072a4:	9320      	str	r3, [sp, #128]	; 0x80
 80072a6:	dc01      	bgt.n	80072ac <_svfprintf_r+0x9c>
 80072a8:	3408      	adds	r4, #8
 80072aa:	e008      	b.n	80072be <_svfprintf_r+0xae>
 80072ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80072ae:	4659      	mov	r1, fp
 80072b0:	4650      	mov	r0, sl
 80072b2:	f002 f98f 	bl	80095d4 <__ssprint_r>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f040 862c 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80072bc:	ac2c      	add	r4, sp, #176	; 0xb0
 80072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c0:	4433      	add	r3, r6
 80072c2:	930a      	str	r3, [sp, #40]	; 0x28
 80072c4:	782b      	ldrb	r3, [r5, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 861d 	beq.w	8007f06 <_svfprintf_r+0xcf6>
 80072cc:	2200      	movs	r2, #0
 80072ce:	1c6b      	adds	r3, r5, #1
 80072d0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80072d4:	4611      	mov	r1, r2
 80072d6:	f04f 39ff 	mov.w	r9, #4294967295
 80072da:	9209      	str	r2, [sp, #36]	; 0x24
 80072dc:	4615      	mov	r5, r2
 80072de:	200a      	movs	r0, #10
 80072e0:	1c5e      	adds	r6, r3, #1
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	9605      	str	r6, [sp, #20]
 80072e6:	9302      	str	r3, [sp, #8]
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	3b20      	subs	r3, #32
 80072ec:	2b58      	cmp	r3, #88	; 0x58
 80072ee:	f200 8263 	bhi.w	80077b8 <_svfprintf_r+0x5a8>
 80072f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80072f6:	005c      	.short	0x005c
 80072f8:	02610261 	.word	0x02610261
 80072fc:	0261006b 	.word	0x0261006b
 8007300:	02610261 	.word	0x02610261
 8007304:	02610261 	.word	0x02610261
 8007308:	006e0261 	.word	0x006e0261
 800730c:	02610059 	.word	0x02610059
 8007310:	007c0079 	.word	0x007c0079
 8007314:	00a30261 	.word	0x00a30261
 8007318:	00a600a6 	.word	0x00a600a6
 800731c:	00a600a6 	.word	0x00a600a6
 8007320:	00a600a6 	.word	0x00a600a6
 8007324:	00a600a6 	.word	0x00a600a6
 8007328:	026100a6 	.word	0x026100a6
 800732c:	02610261 	.word	0x02610261
 8007330:	02610261 	.word	0x02610261
 8007334:	02610261 	.word	0x02610261
 8007338:	02610261 	.word	0x02610261
 800733c:	00d60261 	.word	0x00d60261
 8007340:	0261010b 	.word	0x0261010b
 8007344:	0261010b 	.word	0x0261010b
 8007348:	02610261 	.word	0x02610261
 800734c:	00b90261 	.word	0x00b90261
 8007350:	02610261 	.word	0x02610261
 8007354:	02610152 	.word	0x02610152
 8007358:	02610261 	.word	0x02610261
 800735c:	02610261 	.word	0x02610261
 8007360:	02610199 	.word	0x02610199
 8007364:	00660261 	.word	0x00660261
 8007368:	02610261 	.word	0x02610261
 800736c:	02610261 	.word	0x02610261
 8007370:	02610261 	.word	0x02610261
 8007374:	02610261 	.word	0x02610261
 8007378:	02610261 	.word	0x02610261
 800737c:	006100cd 	.word	0x006100cd
 8007380:	010b010b 	.word	0x010b010b
 8007384:	00bc010b 	.word	0x00bc010b
 8007388:	02610061 	.word	0x02610061
 800738c:	00bf0261 	.word	0x00bf0261
 8007390:	01340261 	.word	0x01340261
 8007394:	016f0154 	.word	0x016f0154
 8007398:	026100ca 	.word	0x026100ca
 800739c:	02610180 	.word	0x02610180
 80073a0:	0261019b 	.word	0x0261019b
 80073a4:	01b30261 	.word	0x01b30261
 80073a8:	2201      	movs	r2, #1
 80073aa:	212b      	movs	r1, #43	; 0x2b
 80073ac:	e002      	b.n	80073b4 <_svfprintf_r+0x1a4>
 80073ae:	b909      	cbnz	r1, 80073b4 <_svfprintf_r+0x1a4>
 80073b0:	2201      	movs	r2, #1
 80073b2:	2120      	movs	r1, #32
 80073b4:	9b05      	ldr	r3, [sp, #20]
 80073b6:	e793      	b.n	80072e0 <_svfprintf_r+0xd0>
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	d077      	beq.n	80074ac <_svfprintf_r+0x29c>
 80073bc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80073c0:	e074      	b.n	80074ac <_svfprintf_r+0x29c>
 80073c2:	b10a      	cbz	r2, 80073c8 <_svfprintf_r+0x1b8>
 80073c4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80073c8:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <_svfprintf_r+0x2c0>)
 80073ca:	e14b      	b.n	8007664 <_svfprintf_r+0x454>
 80073cc:	f045 0501 	orr.w	r5, r5, #1
 80073d0:	e7f0      	b.n	80073b4 <_svfprintf_r+0x1a4>
 80073d2:	683e      	ldr	r6, [r7, #0]
 80073d4:	9609      	str	r6, [sp, #36]	; 0x24
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	f107 0304 	add.w	r3, r7, #4
 80073dc:	db01      	blt.n	80073e2 <_svfprintf_r+0x1d2>
 80073de:	461f      	mov	r7, r3
 80073e0:	e7e8      	b.n	80073b4 <_svfprintf_r+0x1a4>
 80073e2:	4276      	negs	r6, r6
 80073e4:	9609      	str	r6, [sp, #36]	; 0x24
 80073e6:	461f      	mov	r7, r3
 80073e8:	f045 0504 	orr.w	r5, r5, #4
 80073ec:	e7e2      	b.n	80073b4 <_svfprintf_r+0x1a4>
 80073ee:	9e05      	ldr	r6, [sp, #20]
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	7836      	ldrb	r6, [r6, #0]
 80073f4:	9602      	str	r6, [sp, #8]
 80073f6:	2e2a      	cmp	r6, #42	; 0x2a
 80073f8:	f103 0301 	add.w	r3, r3, #1
 80073fc:	d002      	beq.n	8007404 <_svfprintf_r+0x1f4>
 80073fe:	f04f 0900 	mov.w	r9, #0
 8007402:	e00a      	b.n	800741a <_svfprintf_r+0x20a>
 8007404:	f8d7 9000 	ldr.w	r9, [r7]
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	1d3e      	adds	r6, r7, #4
 800740c:	f1b9 0f00 	cmp.w	r9, #0
 8007410:	4637      	mov	r7, r6
 8007412:	dacf      	bge.n	80073b4 <_svfprintf_r+0x1a4>
 8007414:	f04f 39ff 	mov.w	r9, #4294967295
 8007418:	e7cc      	b.n	80073b4 <_svfprintf_r+0x1a4>
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	9b02      	ldr	r3, [sp, #8]
 800741e:	3b30      	subs	r3, #48	; 0x30
 8007420:	2b09      	cmp	r3, #9
 8007422:	d808      	bhi.n	8007436 <_svfprintf_r+0x226>
 8007424:	fb00 3909 	mla	r9, r0, r9, r3
 8007428:	9b05      	ldr	r3, [sp, #20]
 800742a:	461e      	mov	r6, r3
 800742c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007430:	9302      	str	r3, [sp, #8]
 8007432:	4633      	mov	r3, r6
 8007434:	e7f1      	b.n	800741a <_svfprintf_r+0x20a>
 8007436:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800743a:	e755      	b.n	80072e8 <_svfprintf_r+0xd8>
 800743c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8007440:	e7b8      	b.n	80073b4 <_svfprintf_r+0x1a4>
 8007442:	2300      	movs	r3, #0
 8007444:	9309      	str	r3, [sp, #36]	; 0x24
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800744a:	3b30      	subs	r3, #48	; 0x30
 800744c:	fb00 3306 	mla	r3, r0, r6, r3
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	9b05      	ldr	r3, [sp, #20]
 8007454:	461e      	mov	r6, r3
 8007456:	f816 3b01 	ldrb.w	r3, [r6], #1
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	9b02      	ldr	r3, [sp, #8]
 800745e:	9605      	str	r6, [sp, #20]
 8007460:	3b30      	subs	r3, #48	; 0x30
 8007462:	2b09      	cmp	r3, #9
 8007464:	d9ef      	bls.n	8007446 <_svfprintf_r+0x236>
 8007466:	e73f      	b.n	80072e8 <_svfprintf_r+0xd8>
 8007468:	f045 0508 	orr.w	r5, r5, #8
 800746c:	e7a2      	b.n	80073b4 <_svfprintf_r+0x1a4>
 800746e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8007472:	e79f      	b.n	80073b4 <_svfprintf_r+0x1a4>
 8007474:	9b05      	ldr	r3, [sp, #20]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b6c      	cmp	r3, #108	; 0x6c
 800747a:	d103      	bne.n	8007484 <_svfprintf_r+0x274>
 800747c:	9b05      	ldr	r3, [sp, #20]
 800747e:	3301      	adds	r3, #1
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	e002      	b.n	800748a <_svfprintf_r+0x27a>
 8007484:	f045 0510 	orr.w	r5, r5, #16
 8007488:	e794      	b.n	80073b4 <_svfprintf_r+0x1a4>
 800748a:	f045 0520 	orr.w	r5, r5, #32
 800748e:	e791      	b.n	80073b4 <_svfprintf_r+0x1a4>
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	9303      	str	r3, [sp, #12]
 8007494:	2600      	movs	r6, #0
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800749c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80074a0:	e199      	b.n	80077d6 <_svfprintf_r+0x5c6>
 80074a2:	b10a      	cbz	r2, 80074a8 <_svfprintf_r+0x298>
 80074a4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80074a8:	f045 0510 	orr.w	r5, r5, #16
 80074ac:	06aa      	lsls	r2, r5, #26
 80074ae:	d511      	bpl.n	80074d4 <_svfprintf_r+0x2c4>
 80074b0:	3707      	adds	r7, #7
 80074b2:	f027 0707 	bic.w	r7, r7, #7
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	e9d7 6700 	ldrd	r6, r7, [r7]
 80074c0:	e017      	b.n	80074f2 <_svfprintf_r+0x2e2>
 80074c2:	bf00      	nop
 80074c4:	f3af 8000 	nop.w
	...
 80074d0:	0800b0ff 	.word	0x0800b0ff
 80074d4:	f015 0f10 	tst.w	r5, #16
 80074d8:	f107 0304 	add.w	r3, r7, #4
 80074dc:	d002      	beq.n	80074e4 <_svfprintf_r+0x2d4>
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	683e      	ldr	r6, [r7, #0]
 80074e2:	e005      	b.n	80074f0 <_svfprintf_r+0x2e0>
 80074e4:	683e      	ldr	r6, [r7, #0]
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074ec:	bf18      	it	ne
 80074ee:	b236      	sxthne	r6, r6
 80074f0:	17f7      	asrs	r7, r6, #31
 80074f2:	2e00      	cmp	r6, #0
 80074f4:	f177 0300 	sbcs.w	r3, r7, #0
 80074f8:	f280 80de 	bge.w	80076b8 <_svfprintf_r+0x4a8>
 80074fc:	4276      	negs	r6, r6
 80074fe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007502:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8007506:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800750a:	e0d5      	b.n	80076b8 <_svfprintf_r+0x4a8>
 800750c:	b10a      	cbz	r2, 8007512 <_svfprintf_r+0x302>
 800750e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007512:	3707      	adds	r7, #7
 8007514:	f027 0707 	bic.w	r7, r7, #7
 8007518:	f107 0308 	add.w	r3, r7, #8
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	ed97 7b00 	vldr	d7, [r7]
 8007522:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007526:	9b06      	ldr	r3, [sp, #24]
 8007528:	9312      	str	r3, [sp, #72]	; 0x48
 800752a:	9b07      	ldr	r3, [sp, #28]
 800752c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007530:	9313      	str	r3, [sp, #76]	; 0x4c
 8007532:	f04f 32ff 	mov.w	r2, #4294967295
 8007536:	4bab      	ldr	r3, [pc, #684]	; (80077e4 <_svfprintf_r+0x5d4>)
 8007538:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800753c:	f7f9 fb12 	bl	8000b64 <__aeabi_dcmpun>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 84f1 	bne.w	8007f28 <_svfprintf_r+0xd18>
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	4ba6      	ldr	r3, [pc, #664]	; (80077e4 <_svfprintf_r+0x5d4>)
 800754c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007550:	f7f9 faea 	bl	8000b28 <__aeabi_dcmple>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 84e7 	bne.w	8007f28 <_svfprintf_r+0xd18>
 800755a:	f000 bdfd 	b.w	8008158 <_svfprintf_r+0xf48>
 800755e:	b10a      	cbz	r2, 8007564 <_svfprintf_r+0x354>
 8007560:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007564:	f015 0f20 	tst.w	r5, #32
 8007568:	f107 0304 	add.w	r3, r7, #4
 800756c:	d007      	beq.n	800757e <_svfprintf_r+0x36e>
 800756e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	17ce      	asrs	r6, r1, #31
 8007574:	4608      	mov	r0, r1
 8007576:	4631      	mov	r1, r6
 8007578:	e9c2 0100 	strd	r0, r1, [r2]
 800757c:	e00b      	b.n	8007596 <_svfprintf_r+0x386>
 800757e:	06e9      	lsls	r1, r5, #27
 8007580:	d406      	bmi.n	8007590 <_svfprintf_r+0x380>
 8007582:	066a      	lsls	r2, r5, #25
 8007584:	d504      	bpl.n	8007590 <_svfprintf_r+0x380>
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800758c:	8011      	strh	r1, [r2, #0]
 800758e:	e002      	b.n	8007596 <_svfprintf_r+0x386>
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007594:	6011      	str	r1, [r2, #0]
 8007596:	461f      	mov	r7, r3
 8007598:	e670      	b.n	800727c <_svfprintf_r+0x6c>
 800759a:	f045 0510 	orr.w	r5, r5, #16
 800759e:	f015 0320 	ands.w	r3, r5, #32
 80075a2:	d009      	beq.n	80075b8 <_svfprintf_r+0x3a8>
 80075a4:	3707      	adds	r7, #7
 80075a6:	f027 0707 	bic.w	r7, r7, #7
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	e9d7 6700 	ldrd	r6, r7, [r7]
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	2300      	movs	r3, #0
 80075b6:	e07b      	b.n	80076b0 <_svfprintf_r+0x4a0>
 80075b8:	1d3a      	adds	r2, r7, #4
 80075ba:	f015 0110 	ands.w	r1, r5, #16
 80075be:	9203      	str	r2, [sp, #12]
 80075c0:	d105      	bne.n	80075ce <_svfprintf_r+0x3be>
 80075c2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80075c6:	d002      	beq.n	80075ce <_svfprintf_r+0x3be>
 80075c8:	883e      	ldrh	r6, [r7, #0]
 80075ca:	2700      	movs	r7, #0
 80075cc:	e7f2      	b.n	80075b4 <_svfprintf_r+0x3a4>
 80075ce:	683e      	ldr	r6, [r7, #0]
 80075d0:	2700      	movs	r7, #0
 80075d2:	e06d      	b.n	80076b0 <_svfprintf_r+0x4a0>
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	2330      	movs	r3, #48	; 0x30
 80075da:	2278      	movs	r2, #120	; 0x78
 80075dc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80075e0:	4b81      	ldr	r3, [pc, #516]	; (80077e8 <_svfprintf_r+0x5d8>)
 80075e2:	683e      	ldr	r6, [r7, #0]
 80075e4:	9311      	str	r3, [sp, #68]	; 0x44
 80075e6:	2700      	movs	r7, #0
 80075e8:	f045 0502 	orr.w	r5, r5, #2
 80075ec:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80075f0:	2302      	movs	r3, #2
 80075f2:	9202      	str	r2, [sp, #8]
 80075f4:	e05c      	b.n	80076b0 <_svfprintf_r+0x4a0>
 80075f6:	2600      	movs	r6, #0
 80075f8:	1d3b      	adds	r3, r7, #4
 80075fa:	45b1      	cmp	r9, r6
 80075fc:	9303      	str	r3, [sp, #12]
 80075fe:	f8d7 8000 	ldr.w	r8, [r7]
 8007602:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8007606:	db0a      	blt.n	800761e <_svfprintf_r+0x40e>
 8007608:	464a      	mov	r2, r9
 800760a:	4631      	mov	r1, r6
 800760c:	4640      	mov	r0, r8
 800760e:	f7f8 fe07 	bl	8000220 <memchr>
 8007612:	2800      	cmp	r0, #0
 8007614:	f000 80ea 	beq.w	80077ec <_svfprintf_r+0x5dc>
 8007618:	ebc8 0900 	rsb	r9, r8, r0
 800761c:	e0e7      	b.n	80077ee <_svfprintf_r+0x5de>
 800761e:	4640      	mov	r0, r8
 8007620:	f7f8 fdf6 	bl	8000210 <strlen>
 8007624:	4681      	mov	r9, r0
 8007626:	e0e2      	b.n	80077ee <_svfprintf_r+0x5de>
 8007628:	f045 0510 	orr.w	r5, r5, #16
 800762c:	06ae      	lsls	r6, r5, #26
 800762e:	d508      	bpl.n	8007642 <_svfprintf_r+0x432>
 8007630:	3707      	adds	r7, #7
 8007632:	f027 0707 	bic.w	r7, r7, #7
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	9303      	str	r3, [sp, #12]
 800763c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007640:	e00a      	b.n	8007658 <_svfprintf_r+0x448>
 8007642:	1d3b      	adds	r3, r7, #4
 8007644:	f015 0f10 	tst.w	r5, #16
 8007648:	9303      	str	r3, [sp, #12]
 800764a:	d103      	bne.n	8007654 <_svfprintf_r+0x444>
 800764c:	0668      	lsls	r0, r5, #25
 800764e:	d501      	bpl.n	8007654 <_svfprintf_r+0x444>
 8007650:	883e      	ldrh	r6, [r7, #0]
 8007652:	e000      	b.n	8007656 <_svfprintf_r+0x446>
 8007654:	683e      	ldr	r6, [r7, #0]
 8007656:	2700      	movs	r7, #0
 8007658:	2301      	movs	r3, #1
 800765a:	e029      	b.n	80076b0 <_svfprintf_r+0x4a0>
 800765c:	b10a      	cbz	r2, 8007662 <_svfprintf_r+0x452>
 800765e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8007662:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <_svfprintf_r+0x5d8>)
 8007664:	9311      	str	r3, [sp, #68]	; 0x44
 8007666:	06a9      	lsls	r1, r5, #26
 8007668:	d508      	bpl.n	800767c <_svfprintf_r+0x46c>
 800766a:	3707      	adds	r7, #7
 800766c:	f027 0707 	bic.w	r7, r7, #7
 8007670:	f107 0308 	add.w	r3, r7, #8
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	e9d7 6700 	ldrd	r6, r7, [r7]
 800767a:	e00a      	b.n	8007692 <_svfprintf_r+0x482>
 800767c:	1d3b      	adds	r3, r7, #4
 800767e:	f015 0f10 	tst.w	r5, #16
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	d103      	bne.n	800768e <_svfprintf_r+0x47e>
 8007686:	066a      	lsls	r2, r5, #25
 8007688:	d501      	bpl.n	800768e <_svfprintf_r+0x47e>
 800768a:	883e      	ldrh	r6, [r7, #0]
 800768c:	e000      	b.n	8007690 <_svfprintf_r+0x480>
 800768e:	683e      	ldr	r6, [r7, #0]
 8007690:	2700      	movs	r7, #0
 8007692:	07eb      	lsls	r3, r5, #31
 8007694:	d50b      	bpl.n	80076ae <_svfprintf_r+0x49e>
 8007696:	ea56 0307 	orrs.w	r3, r6, r7
 800769a:	d008      	beq.n	80076ae <_svfprintf_r+0x49e>
 800769c:	2330      	movs	r3, #48	; 0x30
 800769e:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80076a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80076a6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80076aa:	f045 0502 	orr.w	r5, r5, #2
 80076ae:	2302      	movs	r3, #2
 80076b0:	2200      	movs	r2, #0
 80076b2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80076b6:	e000      	b.n	80076ba <_svfprintf_r+0x4aa>
 80076b8:	2301      	movs	r3, #1
 80076ba:	f1b9 0f00 	cmp.w	r9, #0
 80076be:	f2c0 855c 	blt.w	800817a <_svfprintf_r+0xf6a>
 80076c2:	ea56 0207 	orrs.w	r2, r6, r7
 80076c6:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80076ca:	d103      	bne.n	80076d4 <_svfprintf_r+0x4c4>
 80076cc:	f1b9 0f00 	cmp.w	r9, #0
 80076d0:	d05f      	beq.n	8007792 <_svfprintf_r+0x582>
 80076d2:	e006      	b.n	80076e2 <_svfprintf_r+0x4d2>
 80076d4:	460d      	mov	r5, r1
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d025      	beq.n	8007726 <_svfprintf_r+0x516>
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d046      	beq.n	800776c <_svfprintf_r+0x55c>
 80076de:	4629      	mov	r1, r5
 80076e0:	e007      	b.n	80076f2 <_svfprintf_r+0x4e2>
 80076e2:	460d      	mov	r5, r1
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d022      	beq.n	800772e <_svfprintf_r+0x51e>
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d03d      	beq.n	8007768 <_svfprintf_r+0x558>
 80076ec:	4629      	mov	r1, r5
 80076ee:	2600      	movs	r6, #0
 80076f0:	2700      	movs	r7, #0
 80076f2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80076f6:	08f2      	lsrs	r2, r6, #3
 80076f8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80076fc:	08f8      	lsrs	r0, r7, #3
 80076fe:	f006 0307 	and.w	r3, r6, #7
 8007702:	4607      	mov	r7, r0
 8007704:	4616      	mov	r6, r2
 8007706:	3330      	adds	r3, #48	; 0x30
 8007708:	ea56 0207 	orrs.w	r2, r6, r7
 800770c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007710:	d1f1      	bne.n	80076f6 <_svfprintf_r+0x4e6>
 8007712:	07e8      	lsls	r0, r5, #31
 8007714:	d548      	bpl.n	80077a8 <_svfprintf_r+0x598>
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d046      	beq.n	80077a8 <_svfprintf_r+0x598>
 800771a:	2330      	movs	r3, #48	; 0x30
 800771c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8007720:	f108 38ff 	add.w	r8, r8, #4294967295
 8007724:	e040      	b.n	80077a8 <_svfprintf_r+0x598>
 8007726:	2f00      	cmp	r7, #0
 8007728:	bf08      	it	eq
 800772a:	2e0a      	cmpeq	r6, #10
 800772c:	d205      	bcs.n	800773a <_svfprintf_r+0x52a>
 800772e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8007732:	3630      	adds	r6, #48	; 0x30
 8007734:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8007738:	e029      	b.n	800778e <_svfprintf_r+0x57e>
 800773a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	220a      	movs	r2, #10
 8007744:	2300      	movs	r3, #0
 8007746:	f7f9 fa4b 	bl	8000be0 <__aeabi_uldivmod>
 800774a:	3230      	adds	r2, #48	; 0x30
 800774c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8007750:	2300      	movs	r3, #0
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	220a      	movs	r2, #10
 8007758:	f7f9 fa42 	bl	8000be0 <__aeabi_uldivmod>
 800775c:	4606      	mov	r6, r0
 800775e:	460f      	mov	r7, r1
 8007760:	ea56 0307 	orrs.w	r3, r6, r7
 8007764:	d1eb      	bne.n	800773e <_svfprintf_r+0x52e>
 8007766:	e012      	b.n	800778e <_svfprintf_r+0x57e>
 8007768:	2600      	movs	r6, #0
 800776a:	2700      	movs	r7, #0
 800776c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8007770:	f006 030f 	and.w	r3, r6, #15
 8007774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007776:	5cd3      	ldrb	r3, [r2, r3]
 8007778:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800777c:	0933      	lsrs	r3, r6, #4
 800777e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8007782:	093a      	lsrs	r2, r7, #4
 8007784:	461e      	mov	r6, r3
 8007786:	4617      	mov	r7, r2
 8007788:	ea56 0307 	orrs.w	r3, r6, r7
 800778c:	d1f0      	bne.n	8007770 <_svfprintf_r+0x560>
 800778e:	4629      	mov	r1, r5
 8007790:	e00a      	b.n	80077a8 <_svfprintf_r+0x598>
 8007792:	b93b      	cbnz	r3, 80077a4 <_svfprintf_r+0x594>
 8007794:	07ea      	lsls	r2, r5, #31
 8007796:	d505      	bpl.n	80077a4 <_svfprintf_r+0x594>
 8007798:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800779c:	2330      	movs	r3, #48	; 0x30
 800779e:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80077a2:	e001      	b.n	80077a8 <_svfprintf_r+0x598>
 80077a4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80077a8:	464e      	mov	r6, r9
 80077aa:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80077ae:	ebc8 0909 	rsb	r9, r8, r9
 80077b2:	460d      	mov	r5, r1
 80077b4:	2700      	movs	r7, #0
 80077b6:	e01b      	b.n	80077f0 <_svfprintf_r+0x5e0>
 80077b8:	b10a      	cbz	r2, 80077be <_svfprintf_r+0x5ae>
 80077ba:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80077be:	9b02      	ldr	r3, [sp, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 83a0 	beq.w	8007f06 <_svfprintf_r+0xcf6>
 80077c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80077ca:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80077ce:	2600      	movs	r6, #0
 80077d0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80077d4:	9703      	str	r7, [sp, #12]
 80077d6:	f04f 0901 	mov.w	r9, #1
 80077da:	4637      	mov	r7, r6
 80077dc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80077e0:	e006      	b.n	80077f0 <_svfprintf_r+0x5e0>
 80077e2:	bf00      	nop
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	0800b110 	.word	0x0800b110
 80077ec:	4606      	mov	r6, r0
 80077ee:	4637      	mov	r7, r6
 80077f0:	454e      	cmp	r6, r9
 80077f2:	4633      	mov	r3, r6
 80077f4:	bfb8      	it	lt
 80077f6:	464b      	movlt	r3, r9
 80077f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077fa:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80077fe:	b113      	cbz	r3, 8007806 <_svfprintf_r+0x5f6>
 8007800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007802:	3301      	adds	r3, #1
 8007804:	930b      	str	r3, [sp, #44]	; 0x2c
 8007806:	f015 0302 	ands.w	r3, r5, #2
 800780a:	9314      	str	r3, [sp, #80]	; 0x50
 800780c:	bf1e      	ittt	ne
 800780e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8007810:	3302      	addne	r3, #2
 8007812:	930b      	strne	r3, [sp, #44]	; 0x2c
 8007814:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8007818:	9315      	str	r3, [sp, #84]	; 0x54
 800781a:	d139      	bne.n	8007890 <_svfprintf_r+0x680>
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	930c      	str	r3, [sp, #48]	; 0x30
 8007826:	dd33      	ble.n	8007890 <_svfprintf_r+0x680>
 8007828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800782a:	2b10      	cmp	r3, #16
 800782c:	4ba6      	ldr	r3, [pc, #664]	; (8007ac8 <_svfprintf_r+0x8b8>)
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	dd18      	ble.n	8007864 <_svfprintf_r+0x654>
 8007832:	2310      	movs	r3, #16
 8007834:	6063      	str	r3, [r4, #4]
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	3310      	adds	r3, #16
 800783a:	9321      	str	r3, [sp, #132]	; 0x84
 800783c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800783e:	3301      	adds	r3, #1
 8007840:	2b07      	cmp	r3, #7
 8007842:	9320      	str	r3, [sp, #128]	; 0x80
 8007844:	dc01      	bgt.n	800784a <_svfprintf_r+0x63a>
 8007846:	3408      	adds	r4, #8
 8007848:	e008      	b.n	800785c <_svfprintf_r+0x64c>
 800784a:	aa1f      	add	r2, sp, #124	; 0x7c
 800784c:	4659      	mov	r1, fp
 800784e:	4650      	mov	r0, sl
 8007850:	f001 fec0 	bl	80095d4 <__ssprint_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	f040 835d 	bne.w	8007f14 <_svfprintf_r+0xd04>
 800785a:	ac2c      	add	r4, sp, #176	; 0xb0
 800785c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800785e:	3b10      	subs	r3, #16
 8007860:	930c      	str	r3, [sp, #48]	; 0x30
 8007862:	e7e1      	b.n	8007828 <_svfprintf_r+0x618>
 8007864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007866:	6063      	str	r3, [r4, #4]
 8007868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800786a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800786c:	4413      	add	r3, r2
 800786e:	9321      	str	r3, [sp, #132]	; 0x84
 8007870:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007872:	3301      	adds	r3, #1
 8007874:	2b07      	cmp	r3, #7
 8007876:	9320      	str	r3, [sp, #128]	; 0x80
 8007878:	dc01      	bgt.n	800787e <_svfprintf_r+0x66e>
 800787a:	3408      	adds	r4, #8
 800787c:	e008      	b.n	8007890 <_svfprintf_r+0x680>
 800787e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007880:	4659      	mov	r1, fp
 8007882:	4650      	mov	r0, sl
 8007884:	f001 fea6 	bl	80095d4 <__ssprint_r>
 8007888:	2800      	cmp	r0, #0
 800788a:	f040 8343 	bne.w	8007f14 <_svfprintf_r+0xd04>
 800788e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007890:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8007894:	b1bb      	cbz	r3, 80078c6 <_svfprintf_r+0x6b6>
 8007896:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	2301      	movs	r3, #1
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078a2:	3301      	adds	r3, #1
 80078a4:	9321      	str	r3, [sp, #132]	; 0x84
 80078a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078a8:	3301      	adds	r3, #1
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	9320      	str	r3, [sp, #128]	; 0x80
 80078ae:	dc01      	bgt.n	80078b4 <_svfprintf_r+0x6a4>
 80078b0:	3408      	adds	r4, #8
 80078b2:	e008      	b.n	80078c6 <_svfprintf_r+0x6b6>
 80078b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80078b6:	4659      	mov	r1, fp
 80078b8:	4650      	mov	r0, sl
 80078ba:	f001 fe8b 	bl	80095d4 <__ssprint_r>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f040 8328 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80078c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80078c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c8:	b1b3      	cbz	r3, 80078f8 <_svfprintf_r+0x6e8>
 80078ca:	ab18      	add	r3, sp, #96	; 0x60
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	2302      	movs	r3, #2
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d4:	3302      	adds	r3, #2
 80078d6:	9321      	str	r3, [sp, #132]	; 0x84
 80078d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078da:	3301      	adds	r3, #1
 80078dc:	2b07      	cmp	r3, #7
 80078de:	9320      	str	r3, [sp, #128]	; 0x80
 80078e0:	dc01      	bgt.n	80078e6 <_svfprintf_r+0x6d6>
 80078e2:	3408      	adds	r4, #8
 80078e4:	e008      	b.n	80078f8 <_svfprintf_r+0x6e8>
 80078e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80078e8:	4659      	mov	r1, fp
 80078ea:	4650      	mov	r0, sl
 80078ec:	f001 fe72 	bl	80095d4 <__ssprint_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	f040 830f 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80078f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80078f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078fa:	2b80      	cmp	r3, #128	; 0x80
 80078fc:	d135      	bne.n	800796a <_svfprintf_r+0x75a>
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd30      	ble.n	800796a <_svfprintf_r+0x75a>
 8007908:	4a70      	ldr	r2, [pc, #448]	; (8007acc <_svfprintf_r+0x8bc>)
 800790a:	6022      	str	r2, [r4, #0]
 800790c:	2b10      	cmp	r3, #16
 800790e:	dd18      	ble.n	8007942 <_svfprintf_r+0x732>
 8007910:	2210      	movs	r2, #16
 8007912:	6062      	str	r2, [r4, #4]
 8007914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007916:	3210      	adds	r2, #16
 8007918:	9221      	str	r2, [sp, #132]	; 0x84
 800791a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800791c:	3201      	adds	r2, #1
 800791e:	2a07      	cmp	r2, #7
 8007920:	9220      	str	r2, [sp, #128]	; 0x80
 8007922:	dc01      	bgt.n	8007928 <_svfprintf_r+0x718>
 8007924:	3408      	adds	r4, #8
 8007926:	e00a      	b.n	800793e <_svfprintf_r+0x72e>
 8007928:	aa1f      	add	r2, sp, #124	; 0x7c
 800792a:	4659      	mov	r1, fp
 800792c:	4650      	mov	r0, sl
 800792e:	930c      	str	r3, [sp, #48]	; 0x30
 8007930:	f001 fe50 	bl	80095d4 <__ssprint_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 82ed 	bne.w	8007f14 <_svfprintf_r+0xd04>
 800793a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800793c:	ac2c      	add	r4, sp, #176	; 0xb0
 800793e:	3b10      	subs	r3, #16
 8007940:	e7e2      	b.n	8007908 <_svfprintf_r+0x6f8>
 8007942:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	4413      	add	r3, r2
 8007948:	9321      	str	r3, [sp, #132]	; 0x84
 800794a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800794c:	3301      	adds	r3, #1
 800794e:	2b07      	cmp	r3, #7
 8007950:	9320      	str	r3, [sp, #128]	; 0x80
 8007952:	dc01      	bgt.n	8007958 <_svfprintf_r+0x748>
 8007954:	3408      	adds	r4, #8
 8007956:	e008      	b.n	800796a <_svfprintf_r+0x75a>
 8007958:	aa1f      	add	r2, sp, #124	; 0x7c
 800795a:	4659      	mov	r1, fp
 800795c:	4650      	mov	r0, sl
 800795e:	f001 fe39 	bl	80095d4 <__ssprint_r>
 8007962:	2800      	cmp	r0, #0
 8007964:	f040 82d6 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007968:	ac2c      	add	r4, sp, #176	; 0xb0
 800796a:	ebc9 0606 	rsb	r6, r9, r6
 800796e:	2e00      	cmp	r6, #0
 8007970:	dd2e      	ble.n	80079d0 <_svfprintf_r+0x7c0>
 8007972:	4b56      	ldr	r3, [pc, #344]	; (8007acc <_svfprintf_r+0x8bc>)
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	2e10      	cmp	r6, #16
 8007978:	dd16      	ble.n	80079a8 <_svfprintf_r+0x798>
 800797a:	2310      	movs	r3, #16
 800797c:	6063      	str	r3, [r4, #4]
 800797e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007980:	3310      	adds	r3, #16
 8007982:	9321      	str	r3, [sp, #132]	; 0x84
 8007984:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007986:	3301      	adds	r3, #1
 8007988:	2b07      	cmp	r3, #7
 800798a:	9320      	str	r3, [sp, #128]	; 0x80
 800798c:	dc01      	bgt.n	8007992 <_svfprintf_r+0x782>
 800798e:	3408      	adds	r4, #8
 8007990:	e008      	b.n	80079a4 <_svfprintf_r+0x794>
 8007992:	aa1f      	add	r2, sp, #124	; 0x7c
 8007994:	4659      	mov	r1, fp
 8007996:	4650      	mov	r0, sl
 8007998:	f001 fe1c 	bl	80095d4 <__ssprint_r>
 800799c:	2800      	cmp	r0, #0
 800799e:	f040 82b9 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80079a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80079a4:	3e10      	subs	r6, #16
 80079a6:	e7e4      	b.n	8007972 <_svfprintf_r+0x762>
 80079a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079aa:	9821      	ldr	r0, [sp, #132]	; 0x84
 80079ac:	6066      	str	r6, [r4, #4]
 80079ae:	3301      	adds	r3, #1
 80079b0:	4406      	add	r6, r0
 80079b2:	2b07      	cmp	r3, #7
 80079b4:	9621      	str	r6, [sp, #132]	; 0x84
 80079b6:	9320      	str	r3, [sp, #128]	; 0x80
 80079b8:	dc01      	bgt.n	80079be <_svfprintf_r+0x7ae>
 80079ba:	3408      	adds	r4, #8
 80079bc:	e008      	b.n	80079d0 <_svfprintf_r+0x7c0>
 80079be:	aa1f      	add	r2, sp, #124	; 0x7c
 80079c0:	4659      	mov	r1, fp
 80079c2:	4650      	mov	r0, sl
 80079c4:	f001 fe06 	bl	80095d4 <__ssprint_r>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f040 82a3 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80079ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80079d0:	05eb      	lsls	r3, r5, #23
 80079d2:	d414      	bmi.n	80079fe <_svfprintf_r+0x7ee>
 80079d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d6:	e884 0300 	stmia.w	r4, {r8, r9}
 80079da:	444b      	add	r3, r9
 80079dc:	9321      	str	r3, [sp, #132]	; 0x84
 80079de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80079e0:	3301      	adds	r3, #1
 80079e2:	2b07      	cmp	r3, #7
 80079e4:	9320      	str	r3, [sp, #128]	; 0x80
 80079e6:	f340 8244 	ble.w	8007e72 <_svfprintf_r+0xc62>
 80079ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80079ec:	4659      	mov	r1, fp
 80079ee:	4650      	mov	r0, sl
 80079f0:	f001 fdf0 	bl	80095d4 <__ssprint_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	f040 828d 	bne.w	8007f14 <_svfprintf_r+0xd04>
 80079fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80079fc:	e23a      	b.n	8007e74 <_svfprintf_r+0xc64>
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	2b65      	cmp	r3, #101	; 0x65
 8007a02:	f340 81ad 	ble.w	8007d60 <_svfprintf_r+0xb50>
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a0e:	f7f9 f877 	bl	8000b00 <__aeabi_dcmpeq>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d05e      	beq.n	8007ad4 <_svfprintf_r+0x8c4>
 8007a16:	4b2e      	ldr	r3, [pc, #184]	; (8007ad0 <_svfprintf_r+0x8c0>)
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	6063      	str	r3, [r4, #4]
 8007a1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a20:	3301      	adds	r3, #1
 8007a22:	9321      	str	r3, [sp, #132]	; 0x84
 8007a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a26:	3301      	adds	r3, #1
 8007a28:	2b07      	cmp	r3, #7
 8007a2a:	9320      	str	r3, [sp, #128]	; 0x80
 8007a2c:	dc01      	bgt.n	8007a32 <_svfprintf_r+0x822>
 8007a2e:	3408      	adds	r4, #8
 8007a30:	e008      	b.n	8007a44 <_svfprintf_r+0x834>
 8007a32:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a34:	4659      	mov	r1, fp
 8007a36:	4650      	mov	r0, sl
 8007a38:	f001 fdcc 	bl	80095d4 <__ssprint_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f040 8269 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007a42:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a46:	9a04      	ldr	r2, [sp, #16]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	db02      	blt.n	8007a52 <_svfprintf_r+0x842>
 8007a4c:	07ee      	lsls	r6, r5, #31
 8007a4e:	f140 8211 	bpl.w	8007e74 <_svfprintf_r+0xc64>
 8007a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	9a08      	ldr	r2, [sp, #32]
 8007a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a5e:	4413      	add	r3, r2
 8007a60:	9321      	str	r3, [sp, #132]	; 0x84
 8007a62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a64:	3301      	adds	r3, #1
 8007a66:	2b07      	cmp	r3, #7
 8007a68:	9320      	str	r3, [sp, #128]	; 0x80
 8007a6a:	dc01      	bgt.n	8007a70 <_svfprintf_r+0x860>
 8007a6c:	3408      	adds	r4, #8
 8007a6e:	e008      	b.n	8007a82 <_svfprintf_r+0x872>
 8007a70:	aa1f      	add	r2, sp, #124	; 0x7c
 8007a72:	4659      	mov	r1, fp
 8007a74:	4650      	mov	r0, sl
 8007a76:	f001 fdad 	bl	80095d4 <__ssprint_r>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	f040 824a 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007a80:	ac2c      	add	r4, sp, #176	; 0xb0
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	1e5e      	subs	r6, r3, #1
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	f340 81f4 	ble.w	8007e74 <_svfprintf_r+0xc64>
 8007a8c:	4f0f      	ldr	r7, [pc, #60]	; (8007acc <_svfprintf_r+0x8bc>)
 8007a8e:	f04f 0810 	mov.w	r8, #16
 8007a92:	2e10      	cmp	r6, #16
 8007a94:	f340 8159 	ble.w	8007d4a <_svfprintf_r+0xb3a>
 8007a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a9a:	3310      	adds	r3, #16
 8007a9c:	9321      	str	r3, [sp, #132]	; 0x84
 8007a9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	2b07      	cmp	r3, #7
 8007aa4:	e884 0180 	stmia.w	r4, {r7, r8}
 8007aa8:	9320      	str	r3, [sp, #128]	; 0x80
 8007aaa:	dc01      	bgt.n	8007ab0 <_svfprintf_r+0x8a0>
 8007aac:	3408      	adds	r4, #8
 8007aae:	e008      	b.n	8007ac2 <_svfprintf_r+0x8b2>
 8007ab0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f001 fd8d 	bl	80095d4 <__ssprint_r>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f040 822a 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007ac0:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ac2:	3e10      	subs	r6, #16
 8007ac4:	e7e5      	b.n	8007a92 <_svfprintf_r+0x882>
 8007ac6:	bf00      	nop
 8007ac8:	0800b121 	.word	0x0800b121
 8007acc:	0800b0df 	.word	0x0800b0df
 8007ad0:	08009b78 	.word	0x08009b78
 8007ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dc7c      	bgt.n	8007bd4 <_svfprintf_r+0x9c4>
 8007ada:	4b9f      	ldr	r3, [pc, #636]	; (8007d58 <_svfprintf_r+0xb48>)
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	9321      	str	r3, [sp, #132]	; 0x84
 8007ae8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aea:	3301      	adds	r3, #1
 8007aec:	2b07      	cmp	r3, #7
 8007aee:	9320      	str	r3, [sp, #128]	; 0x80
 8007af0:	dc01      	bgt.n	8007af6 <_svfprintf_r+0x8e6>
 8007af2:	3408      	adds	r4, #8
 8007af4:	e008      	b.n	8007b08 <_svfprintf_r+0x8f8>
 8007af6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007af8:	4659      	mov	r1, fp
 8007afa:	4650      	mov	r0, sl
 8007afc:	f001 fd6a 	bl	80095d4 <__ssprint_r>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f040 8207 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007b06:	ac2c      	add	r4, sp, #176	; 0xb0
 8007b08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b0a:	b923      	cbnz	r3, 8007b16 <_svfprintf_r+0x906>
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	b913      	cbnz	r3, 8007b16 <_svfprintf_r+0x906>
 8007b10:	07e8      	lsls	r0, r5, #31
 8007b12:	f140 81af 	bpl.w	8007e74 <_svfprintf_r+0xc64>
 8007b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	9b08      	ldr	r3, [sp, #32]
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	9a08      	ldr	r2, [sp, #32]
 8007b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b22:	4413      	add	r3, r2
 8007b24:	9321      	str	r3, [sp, #132]	; 0x84
 8007b26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007b28:	3301      	adds	r3, #1
 8007b2a:	2b07      	cmp	r3, #7
 8007b2c:	9320      	str	r3, [sp, #128]	; 0x80
 8007b2e:	dc02      	bgt.n	8007b36 <_svfprintf_r+0x926>
 8007b30:	f104 0308 	add.w	r3, r4, #8
 8007b34:	e008      	b.n	8007b48 <_svfprintf_r+0x938>
 8007b36:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b38:	4659      	mov	r1, fp
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f001 fd4a 	bl	80095d4 <__ssprint_r>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f040 81e7 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007b46:	ab2c      	add	r3, sp, #176	; 0xb0
 8007b48:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007b4a:	4276      	negs	r6, r6
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	dd30      	ble.n	8007bb2 <_svfprintf_r+0x9a2>
 8007b50:	4f82      	ldr	r7, [pc, #520]	; (8007d5c <_svfprintf_r+0xb4c>)
 8007b52:	2410      	movs	r4, #16
 8007b54:	2e10      	cmp	r6, #16
 8007b56:	dd16      	ble.n	8007b86 <_svfprintf_r+0x976>
 8007b58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b5a:	601f      	str	r7, [r3, #0]
 8007b5c:	3210      	adds	r2, #16
 8007b5e:	9221      	str	r2, [sp, #132]	; 0x84
 8007b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b62:	605c      	str	r4, [r3, #4]
 8007b64:	3201      	adds	r2, #1
 8007b66:	2a07      	cmp	r2, #7
 8007b68:	9220      	str	r2, [sp, #128]	; 0x80
 8007b6a:	dc01      	bgt.n	8007b70 <_svfprintf_r+0x960>
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	e008      	b.n	8007b82 <_svfprintf_r+0x972>
 8007b70:	aa1f      	add	r2, sp, #124	; 0x7c
 8007b72:	4659      	mov	r1, fp
 8007b74:	4650      	mov	r0, sl
 8007b76:	f001 fd2d 	bl	80095d4 <__ssprint_r>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f040 81ca 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007b80:	ab2c      	add	r3, sp, #176	; 0xb0
 8007b82:	3e10      	subs	r6, #16
 8007b84:	e7e6      	b.n	8007b54 <_svfprintf_r+0x944>
 8007b86:	4a75      	ldr	r2, [pc, #468]	; (8007d5c <_svfprintf_r+0xb4c>)
 8007b88:	e883 0044 	stmia.w	r3, {r2, r6}
 8007b8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b8e:	4416      	add	r6, r2
 8007b90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007b92:	9621      	str	r6, [sp, #132]	; 0x84
 8007b94:	3201      	adds	r2, #1
 8007b96:	2a07      	cmp	r2, #7
 8007b98:	9220      	str	r2, [sp, #128]	; 0x80
 8007b9a:	dc01      	bgt.n	8007ba0 <_svfprintf_r+0x990>
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	e008      	b.n	8007bb2 <_svfprintf_r+0x9a2>
 8007ba0:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ba2:	4659      	mov	r1, fp
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	f001 fd15 	bl	80095d4 <__ssprint_r>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f040 81b2 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007bb0:	ab2c      	add	r3, sp, #176	; 0xb0
 8007bb2:	9a04      	ldr	r2, [sp, #16]
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	9904      	ldr	r1, [sp, #16]
 8007bb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bba:	f8c3 8000 	str.w	r8, [r3]
 8007bbe:	440a      	add	r2, r1
 8007bc0:	9221      	str	r2, [sp, #132]	; 0x84
 8007bc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	2a07      	cmp	r2, #7
 8007bc8:	9220      	str	r2, [sp, #128]	; 0x80
 8007bca:	f73f af0e 	bgt.w	80079ea <_svfprintf_r+0x7da>
 8007bce:	f103 0408 	add.w	r4, r3, #8
 8007bd2:	e14f      	b.n	8007e74 <_svfprintf_r+0xc64>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	42bb      	cmp	r3, r7
 8007bd8:	bfa8      	it	ge
 8007bda:	463b      	movge	r3, r7
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	461e      	mov	r6, r3
 8007be0:	dd15      	ble.n	8007c0e <_svfprintf_r+0x9fe>
 8007be2:	6063      	str	r3, [r4, #4]
 8007be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007be6:	f8c4 8000 	str.w	r8, [r4]
 8007bea:	4433      	add	r3, r6
 8007bec:	9321      	str	r3, [sp, #132]	; 0x84
 8007bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	2b07      	cmp	r3, #7
 8007bf4:	9320      	str	r3, [sp, #128]	; 0x80
 8007bf6:	dc01      	bgt.n	8007bfc <_svfprintf_r+0x9ec>
 8007bf8:	3408      	adds	r4, #8
 8007bfa:	e008      	b.n	8007c0e <_svfprintf_r+0x9fe>
 8007bfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8007bfe:	4659      	mov	r1, fp
 8007c00:	4650      	mov	r0, sl
 8007c02:	f001 fce7 	bl	80095d4 <__ssprint_r>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f040 8184 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007c0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	bfac      	ite	ge
 8007c12:	1bbe      	subge	r6, r7, r6
 8007c14:	463e      	movlt	r6, r7
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	dd30      	ble.n	8007c7c <_svfprintf_r+0xa6c>
 8007c1a:	f04f 0910 	mov.w	r9, #16
 8007c1e:	4b4f      	ldr	r3, [pc, #316]	; (8007d5c <_svfprintf_r+0xb4c>)
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	2e10      	cmp	r6, #16
 8007c24:	dd16      	ble.n	8007c54 <_svfprintf_r+0xa44>
 8007c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c28:	f8c4 9004 	str.w	r9, [r4, #4]
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	9321      	str	r3, [sp, #132]	; 0x84
 8007c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c32:	3301      	adds	r3, #1
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	9320      	str	r3, [sp, #128]	; 0x80
 8007c38:	dc01      	bgt.n	8007c3e <_svfprintf_r+0xa2e>
 8007c3a:	3408      	adds	r4, #8
 8007c3c:	e008      	b.n	8007c50 <_svfprintf_r+0xa40>
 8007c3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c40:	4659      	mov	r1, fp
 8007c42:	4650      	mov	r0, sl
 8007c44:	f001 fcc6 	bl	80095d4 <__ssprint_r>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 8163 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007c4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c50:	3e10      	subs	r6, #16
 8007c52:	e7e4      	b.n	8007c1e <_svfprintf_r+0xa0e>
 8007c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c56:	6066      	str	r6, [r4, #4]
 8007c58:	441e      	add	r6, r3
 8007c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c5c:	9621      	str	r6, [sp, #132]	; 0x84
 8007c5e:	3301      	adds	r3, #1
 8007c60:	2b07      	cmp	r3, #7
 8007c62:	9320      	str	r3, [sp, #128]	; 0x80
 8007c64:	dc01      	bgt.n	8007c6a <_svfprintf_r+0xa5a>
 8007c66:	3408      	adds	r4, #8
 8007c68:	e008      	b.n	8007c7c <_svfprintf_r+0xa6c>
 8007c6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	4650      	mov	r0, sl
 8007c70:	f001 fcb0 	bl	80095d4 <__ssprint_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f040 814d 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007c7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8007c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c7e:	9a04      	ldr	r2, [sp, #16]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	4447      	add	r7, r8
 8007c84:	db01      	blt.n	8007c8a <_svfprintf_r+0xa7a>
 8007c86:	07e9      	lsls	r1, r5, #31
 8007c88:	d517      	bpl.n	8007cba <_svfprintf_r+0xaaa>
 8007c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	9b08      	ldr	r3, [sp, #32]
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	9a08      	ldr	r2, [sp, #32]
 8007c94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c96:	4413      	add	r3, r2
 8007c98:	9321      	str	r3, [sp, #132]	; 0x84
 8007c9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	2b07      	cmp	r3, #7
 8007ca0:	9320      	str	r3, [sp, #128]	; 0x80
 8007ca2:	dc01      	bgt.n	8007ca8 <_svfprintf_r+0xa98>
 8007ca4:	3408      	adds	r4, #8
 8007ca6:	e008      	b.n	8007cba <_svfprintf_r+0xaaa>
 8007ca8:	aa1f      	add	r2, sp, #124	; 0x7c
 8007caa:	4659      	mov	r1, fp
 8007cac:	4650      	mov	r0, sl
 8007cae:	f001 fc91 	bl	80095d4 <__ssprint_r>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f040 812e 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007cb8:	ac2c      	add	r4, sp, #176	; 0xb0
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	9a04      	ldr	r2, [sp, #16]
 8007cbe:	eb08 0603 	add.w	r6, r8, r3
 8007cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cc4:	1bf6      	subs	r6, r6, r7
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	429e      	cmp	r6, r3
 8007cca:	bfa8      	it	ge
 8007ccc:	461e      	movge	r6, r3
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	dd14      	ble.n	8007cfc <_svfprintf_r+0xaec>
 8007cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cd4:	6027      	str	r7, [r4, #0]
 8007cd6:	4433      	add	r3, r6
 8007cd8:	9321      	str	r3, [sp, #132]	; 0x84
 8007cda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007cdc:	6066      	str	r6, [r4, #4]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	2b07      	cmp	r3, #7
 8007ce2:	9320      	str	r3, [sp, #128]	; 0x80
 8007ce4:	dc01      	bgt.n	8007cea <_svfprintf_r+0xada>
 8007ce6:	3408      	adds	r4, #8
 8007ce8:	e008      	b.n	8007cfc <_svfprintf_r+0xaec>
 8007cea:	aa1f      	add	r2, sp, #124	; 0x7c
 8007cec:	4659      	mov	r1, fp
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f001 fc70 	bl	80095d4 <__ssprint_r>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f040 810d 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007cfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8007cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cfe:	9a04      	ldr	r2, [sp, #16]
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	eba2 0303 	sub.w	r3, r2, r3
 8007d06:	bfac      	ite	ge
 8007d08:	1b9e      	subge	r6, r3, r6
 8007d0a:	461e      	movlt	r6, r3
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	f340 80b1 	ble.w	8007e74 <_svfprintf_r+0xc64>
 8007d12:	4f12      	ldr	r7, [pc, #72]	; (8007d5c <_svfprintf_r+0xb4c>)
 8007d14:	f04f 0810 	mov.w	r8, #16
 8007d18:	2e10      	cmp	r6, #16
 8007d1a:	dd16      	ble.n	8007d4a <_svfprintf_r+0xb3a>
 8007d1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d1e:	3310      	adds	r3, #16
 8007d20:	9321      	str	r3, [sp, #132]	; 0x84
 8007d22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d24:	3301      	adds	r3, #1
 8007d26:	2b07      	cmp	r3, #7
 8007d28:	e884 0180 	stmia.w	r4, {r7, r8}
 8007d2c:	9320      	str	r3, [sp, #128]	; 0x80
 8007d2e:	dc01      	bgt.n	8007d34 <_svfprintf_r+0xb24>
 8007d30:	3408      	adds	r4, #8
 8007d32:	e008      	b.n	8007d46 <_svfprintf_r+0xb36>
 8007d34:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d36:	4659      	mov	r1, fp
 8007d38:	4650      	mov	r0, sl
 8007d3a:	f001 fc4b 	bl	80095d4 <__ssprint_r>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f040 80e8 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007d44:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d46:	3e10      	subs	r6, #16
 8007d48:	e7e6      	b.n	8007d18 <_svfprintf_r+0xb08>
 8007d4a:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <_svfprintf_r+0xb4c>)
 8007d4c:	e884 0048 	stmia.w	r4, {r3, r6}
 8007d50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d52:	441e      	add	r6, r3
 8007d54:	9621      	str	r6, [sp, #132]	; 0x84
 8007d56:	e642      	b.n	80079de <_svfprintf_r+0x7ce>
 8007d58:	08009b78 	.word	0x08009b78
 8007d5c:	0800b0df 	.word	0x0800b0df
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	dc01      	bgt.n	8007d6a <_svfprintf_r+0xb5a>
 8007d66:	07ea      	lsls	r2, r5, #31
 8007d68:	d573      	bpl.n	8007e52 <_svfprintf_r+0xc42>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	6063      	str	r3, [r4, #4]
 8007d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d70:	f8c4 8000 	str.w	r8, [r4]
 8007d74:	3301      	adds	r3, #1
 8007d76:	9321      	str	r3, [sp, #132]	; 0x84
 8007d78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	2b07      	cmp	r3, #7
 8007d7e:	9320      	str	r3, [sp, #128]	; 0x80
 8007d80:	dc01      	bgt.n	8007d86 <_svfprintf_r+0xb76>
 8007d82:	3408      	adds	r4, #8
 8007d84:	e008      	b.n	8007d98 <_svfprintf_r+0xb88>
 8007d86:	aa1f      	add	r2, sp, #124	; 0x7c
 8007d88:	4659      	mov	r1, fp
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	f001 fc22 	bl	80095d4 <__ssprint_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f040 80bf 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007d96:	ac2c      	add	r4, sp, #176	; 0xb0
 8007d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da4:	4413      	add	r3, r2
 8007da6:	9321      	str	r3, [sp, #132]	; 0x84
 8007da8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007daa:	3301      	adds	r3, #1
 8007dac:	2b07      	cmp	r3, #7
 8007dae:	9320      	str	r3, [sp, #128]	; 0x80
 8007db0:	dc01      	bgt.n	8007db6 <_svfprintf_r+0xba6>
 8007db2:	3408      	adds	r4, #8
 8007db4:	e008      	b.n	8007dc8 <_svfprintf_r+0xbb8>
 8007db6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007db8:	4659      	mov	r1, fp
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f001 fc0a 	bl	80095d4 <__ssprint_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	f040 80a7 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007dc6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd0:	f7f8 fe96 	bl	8000b00 <__aeabi_dcmpeq>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	1e5e      	subs	r6, r3, #1
 8007dd8:	b9b8      	cbnz	r0, 8007e0a <_svfprintf_r+0xbfa>
 8007dda:	f108 0301 	add.w	r3, r8, #1
 8007dde:	e884 0048 	stmia.w	r4, {r3, r6}
 8007de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	9321      	str	r3, [sp, #132]	; 0x84
 8007dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007dee:	3301      	adds	r3, #1
 8007df0:	2b07      	cmp	r3, #7
 8007df2:	9320      	str	r3, [sp, #128]	; 0x80
 8007df4:	dd34      	ble.n	8007e60 <_svfprintf_r+0xc50>
 8007df6:	aa1f      	add	r2, sp, #124	; 0x7c
 8007df8:	4659      	mov	r1, fp
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	f001 fbea 	bl	80095d4 <__ssprint_r>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f040 8087 	bne.w	8007f14 <_svfprintf_r+0xd04>
 8007e06:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e08:	e02b      	b.n	8007e62 <_svfprintf_r+0xc52>
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	dd29      	ble.n	8007e62 <_svfprintf_r+0xc52>
 8007e0e:	4fa7      	ldr	r7, [pc, #668]	; (80080ac <_svfprintf_r+0xe9c>)
 8007e10:	f04f 0810 	mov.w	r8, #16
 8007e14:	2e10      	cmp	r6, #16
 8007e16:	dd15      	ble.n	8007e44 <_svfprintf_r+0xc34>
 8007e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e1a:	3310      	adds	r3, #16
 8007e1c:	9321      	str	r3, [sp, #132]	; 0x84
 8007e1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e20:	3301      	adds	r3, #1
 8007e22:	2b07      	cmp	r3, #7
 8007e24:	e884 0180 	stmia.w	r4, {r7, r8}
 8007e28:	9320      	str	r3, [sp, #128]	; 0x80
 8007e2a:	dc01      	bgt.n	8007e30 <_svfprintf_r+0xc20>
 8007e2c:	3408      	adds	r4, #8
 8007e2e:	e007      	b.n	8007e40 <_svfprintf_r+0xc30>
 8007e30:	aa1f      	add	r2, sp, #124	; 0x7c
 8007e32:	4659      	mov	r1, fp
 8007e34:	4650      	mov	r0, sl
 8007e36:	f001 fbcd 	bl	80095d4 <__ssprint_r>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d16a      	bne.n	8007f14 <_svfprintf_r+0xd04>
 8007e3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8007e40:	3e10      	subs	r6, #16
 8007e42:	e7e7      	b.n	8007e14 <_svfprintf_r+0xc04>
 8007e44:	4b99      	ldr	r3, [pc, #612]	; (80080ac <_svfprintf_r+0xe9c>)
 8007e46:	e884 0048 	stmia.w	r4, {r3, r6}
 8007e4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e4c:	441e      	add	r6, r3
 8007e4e:	9621      	str	r6, [sp, #132]	; 0x84
 8007e50:	e7cc      	b.n	8007dec <_svfprintf_r+0xbdc>
 8007e52:	2301      	movs	r3, #1
 8007e54:	6063      	str	r3, [r4, #4]
 8007e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e58:	f8c4 8000 	str.w	r8, [r4]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	e7c4      	b.n	8007dea <_svfprintf_r+0xbda>
 8007e60:	3408      	adds	r4, #8
 8007e62:	ab1b      	add	r3, sp, #108	; 0x6c
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e6e:	4413      	add	r3, r2
 8007e70:	e5b4      	b.n	80079dc <_svfprintf_r+0x7cc>
 8007e72:	3408      	adds	r4, #8
 8007e74:	076b      	lsls	r3, r5, #29
 8007e76:	d40b      	bmi.n	8007e90 <_svfprintf_r+0xc80>
 8007e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e7e:	428a      	cmp	r2, r1
 8007e80:	bfac      	ite	ge
 8007e82:	189b      	addge	r3, r3, r2
 8007e84:	185b      	addlt	r3, r3, r1
 8007e86:	930a      	str	r3, [sp, #40]	; 0x28
 8007e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d035      	beq.n	8007efa <_svfprintf_r+0xcea>
 8007e8e:	e02e      	b.n	8007eee <_svfprintf_r+0xcde>
 8007e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e94:	1a9d      	subs	r5, r3, r2
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	ddee      	ble.n	8007e78 <_svfprintf_r+0xc68>
 8007e9a:	2610      	movs	r6, #16
 8007e9c:	4b84      	ldr	r3, [pc, #528]	; (80080b0 <_svfprintf_r+0xea0>)
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	2d10      	cmp	r5, #16
 8007ea2:	dd13      	ble.n	8007ecc <_svfprintf_r+0xcbc>
 8007ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea6:	6066      	str	r6, [r4, #4]
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	9321      	str	r3, [sp, #132]	; 0x84
 8007eac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007eae:	3301      	adds	r3, #1
 8007eb0:	2b07      	cmp	r3, #7
 8007eb2:	9320      	str	r3, [sp, #128]	; 0x80
 8007eb4:	dc01      	bgt.n	8007eba <_svfprintf_r+0xcaa>
 8007eb6:	3408      	adds	r4, #8
 8007eb8:	e006      	b.n	8007ec8 <_svfprintf_r+0xcb8>
 8007eba:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f001 fb88 	bl	80095d4 <__ssprint_r>
 8007ec4:	bb30      	cbnz	r0, 8007f14 <_svfprintf_r+0xd04>
 8007ec6:	ac2c      	add	r4, sp, #176	; 0xb0
 8007ec8:	3d10      	subs	r5, #16
 8007eca:	e7e7      	b.n	8007e9c <_svfprintf_r+0xc8c>
 8007ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ece:	6065      	str	r5, [r4, #4]
 8007ed0:	441d      	add	r5, r3
 8007ed2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ed4:	9521      	str	r5, [sp, #132]	; 0x84
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	9320      	str	r3, [sp, #128]	; 0x80
 8007edc:	ddcc      	ble.n	8007e78 <_svfprintf_r+0xc68>
 8007ede:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	f001 fb76 	bl	80095d4 <__ssprint_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d0c5      	beq.n	8007e78 <_svfprintf_r+0xc68>
 8007eec:	e012      	b.n	8007f14 <_svfprintf_r+0xd04>
 8007eee:	aa1f      	add	r2, sp, #124	; 0x7c
 8007ef0:	4659      	mov	r1, fp
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	f001 fb6e 	bl	80095d4 <__ssprint_r>
 8007ef8:	b960      	cbnz	r0, 8007f14 <_svfprintf_r+0xd04>
 8007efa:	2300      	movs	r3, #0
 8007efc:	9320      	str	r3, [sp, #128]	; 0x80
 8007efe:	9f03      	ldr	r7, [sp, #12]
 8007f00:	ac2c      	add	r4, sp, #176	; 0xb0
 8007f02:	f7ff b9bb 	b.w	800727c <_svfprintf_r+0x6c>
 8007f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f08:	b123      	cbz	r3, 8007f14 <_svfprintf_r+0xd04>
 8007f0a:	aa1f      	add	r2, sp, #124	; 0x7c
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f001 fb60 	bl	80095d4 <__ssprint_r>
 8007f14:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8007f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f1e:	bf18      	it	ne
 8007f20:	f04f 33ff 	movne.w	r3, #4294967295
 8007f24:	4618      	mov	r0, r3
 8007f26:	e12e      	b.n	8008186 <_svfprintf_r+0xf76>
 8007f28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f7f8 fe18 	bl	8000b64 <__aeabi_dcmpun>
 8007f34:	b160      	cbz	r0, 8007f50 <_svfprintf_r+0xd40>
 8007f36:	4b5f      	ldr	r3, [pc, #380]	; (80080b4 <_svfprintf_r+0xea4>)
 8007f38:	4a5f      	ldr	r2, [pc, #380]	; (80080b8 <_svfprintf_r+0xea8>)
 8007f3a:	9902      	ldr	r1, [sp, #8]
 8007f3c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8007f40:	2947      	cmp	r1, #71	; 0x47
 8007f42:	bfcc      	ite	gt
 8007f44:	4690      	movgt	r8, r2
 8007f46:	4698      	movle	r8, r3
 8007f48:	f04f 0903 	mov.w	r9, #3
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	e44e      	b.n	80077ee <_svfprintf_r+0x5de>
 8007f50:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007f54:	d00a      	beq.n	8007f6c <_svfprintf_r+0xd5c>
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	f023 0320 	bic.w	r3, r3, #32
 8007f5c:	2b47      	cmp	r3, #71	; 0x47
 8007f5e:	d107      	bne.n	8007f70 <_svfprintf_r+0xd60>
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	bf08      	it	eq
 8007f66:	f04f 0901 	moveq.w	r9, #1
 8007f6a:	e001      	b.n	8007f70 <_svfprintf_r+0xd60>
 8007f6c:	f04f 0906 	mov.w	r9, #6
 8007f70:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8007f74:	930c      	str	r3, [sp, #48]	; 0x30
 8007f76:	9b07      	ldr	r3, [sp, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da07      	bge.n	8007f8c <_svfprintf_r+0xd7c>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f88:	232d      	movs	r3, #45	; 0x2d
 8007f8a:	e004      	b.n	8007f96 <_svfprintf_r+0xd86>
 8007f8c:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007f90:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8007f94:	2300      	movs	r3, #0
 8007f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	f023 0720 	bic.w	r7, r3, #32
 8007f9e:	2f46      	cmp	r7, #70	; 0x46
 8007fa0:	d004      	beq.n	8007fac <_svfprintf_r+0xd9c>
 8007fa2:	2f45      	cmp	r7, #69	; 0x45
 8007fa4:	d105      	bne.n	8007fb2 <_svfprintf_r+0xda2>
 8007fa6:	f109 0601 	add.w	r6, r9, #1
 8007faa:	e003      	b.n	8007fb4 <_svfprintf_r+0xda4>
 8007fac:	464e      	mov	r6, r9
 8007fae:	2103      	movs	r1, #3
 8007fb0:	e001      	b.n	8007fb6 <_svfprintf_r+0xda6>
 8007fb2:	464e      	mov	r6, r9
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	ab1a      	add	r3, sp, #104	; 0x68
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	ab19      	add	r3, sp, #100	; 0x64
 8007fc2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8007fc6:	4650      	mov	r0, sl
 8007fc8:	f000 f976 	bl	80082b8 <_dtoa_r>
 8007fcc:	2f47      	cmp	r7, #71	; 0x47
 8007fce:	4680      	mov	r8, r0
 8007fd0:	d102      	bne.n	8007fd8 <_svfprintf_r+0xdc8>
 8007fd2:	07eb      	lsls	r3, r5, #31
 8007fd4:	f140 80cd 	bpl.w	8008172 <_svfprintf_r+0xf62>
 8007fd8:	eb08 0306 	add.w	r3, r8, r6
 8007fdc:	2f46      	cmp	r7, #70	; 0x46
 8007fde:	9304      	str	r3, [sp, #16]
 8007fe0:	d111      	bne.n	8008006 <_svfprintf_r+0xdf6>
 8007fe2:	f898 3000 	ldrb.w	r3, [r8]
 8007fe6:	2b30      	cmp	r3, #48	; 0x30
 8007fe8:	d109      	bne.n	8007ffe <_svfprintf_r+0xdee>
 8007fea:	2200      	movs	r2, #0
 8007fec:	2300      	movs	r3, #0
 8007fee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ff2:	f7f8 fd85 	bl	8000b00 <__aeabi_dcmpeq>
 8007ff6:	b910      	cbnz	r0, 8007ffe <_svfprintf_r+0xdee>
 8007ff8:	f1c6 0601 	rsb	r6, r6, #1
 8007ffc:	9619      	str	r6, [sp, #100]	; 0x64
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008002:	441a      	add	r2, r3
 8008004:	9204      	str	r2, [sp, #16]
 8008006:	2200      	movs	r2, #0
 8008008:	2300      	movs	r3, #0
 800800a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800800e:	f7f8 fd77 	bl	8000b00 <__aeabi_dcmpeq>
 8008012:	b908      	cbnz	r0, 8008018 <_svfprintf_r+0xe08>
 8008014:	2230      	movs	r2, #48	; 0x30
 8008016:	e002      	b.n	800801e <_svfprintf_r+0xe0e>
 8008018:	9b04      	ldr	r3, [sp, #16]
 800801a:	931d      	str	r3, [sp, #116]	; 0x74
 800801c:	e007      	b.n	800802e <_svfprintf_r+0xe1e>
 800801e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008020:	9904      	ldr	r1, [sp, #16]
 8008022:	4299      	cmp	r1, r3
 8008024:	d903      	bls.n	800802e <_svfprintf_r+0xe1e>
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	911d      	str	r1, [sp, #116]	; 0x74
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e7f7      	b.n	800801e <_svfprintf_r+0xe0e>
 800802e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008030:	2f47      	cmp	r7, #71	; 0x47
 8008032:	ebc8 0303 	rsb	r3, r8, r3
 8008036:	9304      	str	r3, [sp, #16]
 8008038:	d108      	bne.n	800804c <_svfprintf_r+0xe3c>
 800803a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800803c:	1cdf      	adds	r7, r3, #3
 800803e:	db01      	blt.n	8008044 <_svfprintf_r+0xe34>
 8008040:	4599      	cmp	r9, r3
 8008042:	da68      	bge.n	8008116 <_svfprintf_r+0xf06>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	3b02      	subs	r3, #2
 8008048:	9302      	str	r3, [sp, #8]
 800804a:	e002      	b.n	8008052 <_svfprintf_r+0xe42>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	2b65      	cmp	r3, #101	; 0x65
 8008050:	dc4a      	bgt.n	80080e8 <_svfprintf_r+0xed8>
 8008052:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008054:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8008058:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800805c:	3b01      	subs	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	9319      	str	r3, [sp, #100]	; 0x64
 8008062:	bfba      	itte	lt
 8008064:	425b      	neglt	r3, r3
 8008066:	222d      	movlt	r2, #45	; 0x2d
 8008068:	222b      	movge	r2, #43	; 0x2b
 800806a:	2b09      	cmp	r3, #9
 800806c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8008070:	dd24      	ble.n	80080bc <_svfprintf_r+0xeac>
 8008072:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008076:	200a      	movs	r0, #10
 8008078:	fb93 f1f0 	sdiv	r1, r3, r0
 800807c:	fb00 3311 	mls	r3, r0, r1, r3
 8008080:	3330      	adds	r3, #48	; 0x30
 8008082:	2909      	cmp	r1, #9
 8008084:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008088:	460b      	mov	r3, r1
 800808a:	dcf5      	bgt.n	8008078 <_svfprintf_r+0xe68>
 800808c:	3330      	adds	r3, #48	; 0x30
 800808e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008092:	1e51      	subs	r1, r2, #1
 8008094:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8008098:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800809c:	4281      	cmp	r1, r0
 800809e:	461a      	mov	r2, r3
 80080a0:	d213      	bcs.n	80080ca <_svfprintf_r+0xeba>
 80080a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080a6:	f803 2b01 	strb.w	r2, [r3], #1
 80080aa:	e7f7      	b.n	800809c <_svfprintf_r+0xe8c>
 80080ac:	0800b0df 	.word	0x0800b0df
 80080b0:	0800b121 	.word	0x0800b121
 80080b4:	0800b0f7 	.word	0x0800b0f7
 80080b8:	0800b0fb 	.word	0x0800b0fb
 80080bc:	2230      	movs	r2, #48	; 0x30
 80080be:	4413      	add	r3, r2
 80080c0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80080c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80080c8:	aa1c      	add	r2, sp, #112	; 0x70
 80080ca:	ab1b      	add	r3, sp, #108	; 0x6c
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	9a04      	ldr	r2, [sp, #16]
 80080d0:	9310      	str	r3, [sp, #64]	; 0x40
 80080d2:	2a01      	cmp	r2, #1
 80080d4:	eb03 0902 	add.w	r9, r3, r2
 80080d8:	dc02      	bgt.n	80080e0 <_svfprintf_r+0xed0>
 80080da:	f015 0701 	ands.w	r7, r5, #1
 80080de:	d032      	beq.n	8008146 <_svfprintf_r+0xf36>
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	2700      	movs	r7, #0
 80080e4:	4499      	add	r9, r3
 80080e6:	e02e      	b.n	8008146 <_svfprintf_r+0xf36>
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	2b66      	cmp	r3, #102	; 0x66
 80080ec:	d113      	bne.n	8008116 <_svfprintf_r+0xf06>
 80080ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	dd07      	ble.n	8008104 <_svfprintf_r+0xef4>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	d101      	bne.n	80080fe <_svfprintf_r+0xeee>
 80080fa:	07ee      	lsls	r6, r5, #31
 80080fc:	d521      	bpl.n	8008142 <_svfprintf_r+0xf32>
 80080fe:	9a08      	ldr	r2, [sp, #32]
 8008100:	4413      	add	r3, r2
 8008102:	e006      	b.n	8008112 <_svfprintf_r+0xf02>
 8008104:	f1b9 0f00 	cmp.w	r9, #0
 8008108:	d101      	bne.n	800810e <_svfprintf_r+0xefe>
 800810a:	07ed      	lsls	r5, r5, #31
 800810c:	d514      	bpl.n	8008138 <_svfprintf_r+0xf28>
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	3301      	adds	r3, #1
 8008112:	444b      	add	r3, r9
 8008114:	e015      	b.n	8008142 <_svfprintf_r+0xf32>
 8008116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008118:	9a04      	ldr	r2, [sp, #16]
 800811a:	4293      	cmp	r3, r2
 800811c:	db03      	blt.n	8008126 <_svfprintf_r+0xf16>
 800811e:	07e8      	lsls	r0, r5, #31
 8008120:	d50d      	bpl.n	800813e <_svfprintf_r+0xf2e>
 8008122:	9a08      	ldr	r2, [sp, #32]
 8008124:	e006      	b.n	8008134 <_svfprintf_r+0xf24>
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	9908      	ldr	r1, [sp, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	440a      	add	r2, r1
 800812e:	dc05      	bgt.n	800813c <_svfprintf_r+0xf2c>
 8008130:	f1c3 0301 	rsb	r3, r3, #1
 8008134:	4413      	add	r3, r2
 8008136:	e002      	b.n	800813e <_svfprintf_r+0xf2e>
 8008138:	2301      	movs	r3, #1
 800813a:	e002      	b.n	8008142 <_svfprintf_r+0xf32>
 800813c:	4613      	mov	r3, r2
 800813e:	2267      	movs	r2, #103	; 0x67
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008144:	4699      	mov	r9, r3
 8008146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008148:	b113      	cbz	r3, 8008150 <_svfprintf_r+0xf40>
 800814a:	232d      	movs	r3, #45	; 0x2d
 800814c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008152:	2600      	movs	r6, #0
 8008154:	f7ff bb4c 	b.w	80077f0 <_svfprintf_r+0x5e0>
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008160:	f7f8 fcd8 	bl	8000b14 <__aeabi_dcmplt>
 8008164:	b110      	cbz	r0, 800816c <_svfprintf_r+0xf5c>
 8008166:	232d      	movs	r3, #45	; 0x2d
 8008168:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800816c:	4b07      	ldr	r3, [pc, #28]	; (800818c <_svfprintf_r+0xf7c>)
 800816e:	4a08      	ldr	r2, [pc, #32]	; (8008190 <_svfprintf_r+0xf80>)
 8008170:	e6e3      	b.n	8007f3a <_svfprintf_r+0xd2a>
 8008172:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008174:	1a1b      	subs	r3, r3, r0
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	e75f      	b.n	800803a <_svfprintf_r+0xe2a>
 800817a:	ea56 0207 	orrs.w	r2, r6, r7
 800817e:	f47f aaaa 	bne.w	80076d6 <_svfprintf_r+0x4c6>
 8008182:	f7ff baaf 	b.w	80076e4 <_svfprintf_r+0x4d4>
 8008186:	b03d      	add	sp, #244	; 0xf4
 8008188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818c:	0800b0ef 	.word	0x0800b0ef
 8008190:	0800b0f3 	.word	0x0800b0f3

08008194 <quorem>:
 8008194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	6903      	ldr	r3, [r0, #16]
 800819a:	690c      	ldr	r4, [r1, #16]
 800819c:	429c      	cmp	r4, r3
 800819e:	4680      	mov	r8, r0
 80081a0:	f300 8083 	bgt.w	80082aa <quorem+0x116>
 80081a4:	3c01      	subs	r4, #1
 80081a6:	f101 0714 	add.w	r7, r1, #20
 80081aa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80081ae:	f100 0614 	add.w	r6, r0, #20
 80081b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80081b6:	eb06 030e 	add.w	r3, r6, lr
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	3501      	adds	r5, #1
 80081be:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80081c2:	fbb3 f5f5 	udiv	r5, r3, r5
 80081c6:	eb07 090e 	add.w	r9, r7, lr
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	d039      	beq.n	8008242 <quorem+0xae>
 80081ce:	f04f 0a00 	mov.w	sl, #0
 80081d2:	4638      	mov	r0, r7
 80081d4:	46b4      	mov	ip, r6
 80081d6:	46d3      	mov	fp, sl
 80081d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80081dc:	b293      	uxth	r3, r2
 80081de:	fb05 a303 	mla	r3, r5, r3, sl
 80081e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	ebc3 030b 	rsb	r3, r3, fp
 80081ec:	0c12      	lsrs	r2, r2, #16
 80081ee:	f8bc b000 	ldrh.w	fp, [ip]
 80081f2:	fb05 a202 	mla	r2, r5, r2, sl
 80081f6:	fa13 f38b 	uxtah	r3, r3, fp
 80081fa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80081fe:	fa1f fb82 	uxth.w	fp, r2
 8008202:	f8dc 2000 	ldr.w	r2, [ip]
 8008206:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800820a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008214:	4581      	cmp	r9, r0
 8008216:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800821a:	f84c 3b04 	str.w	r3, [ip], #4
 800821e:	d2db      	bcs.n	80081d8 <quorem+0x44>
 8008220:	f856 300e 	ldr.w	r3, [r6, lr]
 8008224:	b96b      	cbnz	r3, 8008242 <quorem+0xae>
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	3b04      	subs	r3, #4
 800822a:	429e      	cmp	r6, r3
 800822c:	461a      	mov	r2, r3
 800822e:	d302      	bcc.n	8008236 <quorem+0xa2>
 8008230:	f8c8 4010 	str.w	r4, [r8, #16]
 8008234:	e005      	b.n	8008242 <quorem+0xae>
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	3b04      	subs	r3, #4
 800823a:	2a00      	cmp	r2, #0
 800823c:	d1f8      	bne.n	8008230 <quorem+0x9c>
 800823e:	3c01      	subs	r4, #1
 8008240:	e7f3      	b.n	800822a <quorem+0x96>
 8008242:	4640      	mov	r0, r8
 8008244:	f001 f8fd 	bl	8009442 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	db2c      	blt.n	80082a6 <quorem+0x112>
 800824c:	3501      	adds	r5, #1
 800824e:	4630      	mov	r0, r6
 8008250:	f04f 0e00 	mov.w	lr, #0
 8008254:	f857 1b04 	ldr.w	r1, [r7], #4
 8008258:	f8d0 c000 	ldr.w	ip, [r0]
 800825c:	b28a      	uxth	r2, r1
 800825e:	ebc2 030e 	rsb	r3, r2, lr
 8008262:	0c09      	lsrs	r1, r1, #16
 8008264:	fa13 f38c 	uxtah	r3, r3, ip
 8008268:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800826c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008270:	b29b      	uxth	r3, r3
 8008272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008276:	45b9      	cmp	r9, r7
 8008278:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800827c:	f840 3b04 	str.w	r3, [r0], #4
 8008280:	d2e8      	bcs.n	8008254 <quorem+0xc0>
 8008282:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008286:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800828a:	b962      	cbnz	r2, 80082a6 <quorem+0x112>
 800828c:	3b04      	subs	r3, #4
 800828e:	429e      	cmp	r6, r3
 8008290:	461a      	mov	r2, r3
 8008292:	d302      	bcc.n	800829a <quorem+0x106>
 8008294:	f8c8 4010 	str.w	r4, [r8, #16]
 8008298:	e005      	b.n	80082a6 <quorem+0x112>
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	3b04      	subs	r3, #4
 800829e:	2a00      	cmp	r2, #0
 80082a0:	d1f8      	bne.n	8008294 <quorem+0x100>
 80082a2:	3c01      	subs	r4, #1
 80082a4:	e7f3      	b.n	800828e <quorem+0xfa>
 80082a6:	4628      	mov	r0, r5
 80082a8:	e000      	b.n	80082ac <quorem+0x118>
 80082aa:	2000      	movs	r0, #0
 80082ac:	b003      	add	sp, #12
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	0000      	movs	r0, r0
 80082b4:	0000      	movs	r0, r0
	...

080082b8 <_dtoa_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	ec59 8b10 	vmov	r8, r9, d0
 80082c0:	b097      	sub	sp, #92	; 0x5c
 80082c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082c4:	9106      	str	r1, [sp, #24]
 80082c6:	4682      	mov	sl, r0
 80082c8:	9209      	str	r2, [sp, #36]	; 0x24
 80082ca:	9310      	str	r3, [sp, #64]	; 0x40
 80082cc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80082ce:	e9cd 8900 	strd	r8, r9, [sp]
 80082d2:	b945      	cbnz	r5, 80082e6 <_dtoa_r+0x2e>
 80082d4:	2010      	movs	r0, #16
 80082d6:	f7fe fd21 	bl	8006d1c <malloc>
 80082da:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80082de:	6045      	str	r5, [r0, #4]
 80082e0:	6085      	str	r5, [r0, #8]
 80082e2:	6005      	str	r5, [r0, #0]
 80082e4:	60c5      	str	r5, [r0, #12]
 80082e6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80082ea:	6819      	ldr	r1, [r3, #0]
 80082ec:	b159      	cbz	r1, 8008306 <_dtoa_r+0x4e>
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	604a      	str	r2, [r1, #4]
 80082f2:	2301      	movs	r3, #1
 80082f4:	4093      	lsls	r3, r2
 80082f6:	608b      	str	r3, [r1, #8]
 80082f8:	4650      	mov	r0, sl
 80082fa:	f000 feca 	bl	8009092 <_Bfree>
 80082fe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	4a9f      	ldr	r2, [pc, #636]	; (8008588 <_dtoa_r+0x2d0>)
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfbf      	itttt	lt
 800830e:	2301      	movlt	r3, #1
 8008310:	6023      	strlt	r3, [r4, #0]
 8008312:	9b01      	ldrlt	r3, [sp, #4]
 8008314:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008318:	bfb8      	it	lt
 800831a:	9301      	strlt	r3, [sp, #4]
 800831c:	9f01      	ldr	r7, [sp, #4]
 800831e:	bfa4      	itt	ge
 8008320:	2300      	movge	r3, #0
 8008322:	6023      	strge	r3, [r4, #0]
 8008324:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8008328:	0d1b      	lsrs	r3, r3, #20
 800832a:	051b      	lsls	r3, r3, #20
 800832c:	4293      	cmp	r3, r2
 800832e:	d11d      	bne.n	800836c <_dtoa_r+0xb4>
 8008330:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008332:	f242 730f 	movw	r3, #9999	; 0x270f
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	b943      	cbnz	r3, 800834e <_dtoa_r+0x96>
 800833c:	4a93      	ldr	r2, [pc, #588]	; (800858c <_dtoa_r+0x2d4>)
 800833e:	4b94      	ldr	r3, [pc, #592]	; (8008590 <_dtoa_r+0x2d8>)
 8008340:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8008344:	2800      	cmp	r0, #0
 8008346:	bf14      	ite	ne
 8008348:	4618      	movne	r0, r3
 800834a:	4610      	moveq	r0, r2
 800834c:	e000      	b.n	8008350 <_dtoa_r+0x98>
 800834e:	4890      	ldr	r0, [pc, #576]	; (8008590 <_dtoa_r+0x2d8>)
 8008350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 854a 	beq.w	8008dec <_dtoa_r+0xb34>
 8008358:	78c3      	ldrb	r3, [r0, #3]
 800835a:	b113      	cbz	r3, 8008362 <_dtoa_r+0xaa>
 800835c:	f100 0308 	add.w	r3, r0, #8
 8008360:	e000      	b.n	8008364 <_dtoa_r+0xac>
 8008362:	1cc3      	adds	r3, r0, #3
 8008364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	f000 bd40 	b.w	8008dec <_dtoa_r+0xb34>
 800836c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	4620      	mov	r0, r4
 8008376:	4629      	mov	r1, r5
 8008378:	f7f8 fbc2 	bl	8000b00 <__aeabi_dcmpeq>
 800837c:	4680      	mov	r8, r0
 800837e:	b158      	cbz	r0, 8008398 <_dtoa_r+0xe0>
 8008380:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008382:	2301      	movs	r3, #1
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8522 	beq.w	8008dd2 <_dtoa_r+0xb1a>
 800838e:	4881      	ldr	r0, [pc, #516]	; (8008594 <_dtoa_r+0x2dc>)
 8008390:	6018      	str	r0, [r3, #0]
 8008392:	3801      	subs	r0, #1
 8008394:	f000 bd2a 	b.w	8008dec <_dtoa_r+0xb34>
 8008398:	aa14      	add	r2, sp, #80	; 0x50
 800839a:	a915      	add	r1, sp, #84	; 0x54
 800839c:	ec45 4b10 	vmov	d0, r4, r5
 80083a0:	4650      	mov	r0, sl
 80083a2:	f001 f8c9 	bl	8009538 <__d2b>
 80083a6:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80083aa:	9002      	str	r0, [sp, #8]
 80083ac:	b15e      	cbz	r6, 80083c6 <_dtoa_r+0x10e>
 80083ae:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80083b2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80083b6:	4620      	mov	r0, r4
 80083b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80083bc:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80083c0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80083c4:	e01d      	b.n	8008402 <_dtoa_r+0x14a>
 80083c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80083ca:	441e      	add	r6, r3
 80083cc:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	dd0a      	ble.n	80083ea <_dtoa_r+0x132>
 80083d4:	9a00      	ldr	r2, [sp, #0]
 80083d6:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80083da:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80083de:	fa22 f000 	lsr.w	r0, r2, r0
 80083e2:	fa07 f303 	lsl.w	r3, r7, r3
 80083e6:	4318      	orrs	r0, r3
 80083e8:	e004      	b.n	80083f4 <_dtoa_r+0x13c>
 80083ea:	f1c3 0020 	rsb	r0, r3, #32
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	fa03 f000 	lsl.w	r0, r3, r0
 80083f4:	f7f8 f8a6 	bl	8000544 <__aeabi_ui2d>
 80083f8:	2301      	movs	r3, #1
 80083fa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80083fe:	3e01      	subs	r6, #1
 8008400:	9311      	str	r3, [sp, #68]	; 0x44
 8008402:	2200      	movs	r2, #0
 8008404:	4b64      	ldr	r3, [pc, #400]	; (8008598 <_dtoa_r+0x2e0>)
 8008406:	f7f7 ff5f 	bl	80002c8 <__aeabi_dsub>
 800840a:	a359      	add	r3, pc, #356	; (adr r3, 8008570 <_dtoa_r+0x2b8>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f8 f90e 	bl	8000630 <__aeabi_dmul>
 8008414:	a358      	add	r3, pc, #352	; (adr r3, 8008578 <_dtoa_r+0x2c0>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	f7f7 ff57 	bl	80002cc <__adddf3>
 800841e:	4604      	mov	r4, r0
 8008420:	4630      	mov	r0, r6
 8008422:	460d      	mov	r5, r1
 8008424:	f7f8 f89e 	bl	8000564 <__aeabi_i2d>
 8008428:	a355      	add	r3, pc, #340	; (adr r3, 8008580 <_dtoa_r+0x2c8>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	f7f8 f8ff 	bl	8000630 <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f7 ff47 	bl	80002cc <__adddf3>
 800843e:	4604      	mov	r4, r0
 8008440:	460d      	mov	r5, r1
 8008442:	f7f8 fba5 	bl	8000b90 <__aeabi_d2iz>
 8008446:	2200      	movs	r2, #0
 8008448:	4683      	mov	fp, r0
 800844a:	2300      	movs	r3, #0
 800844c:	4620      	mov	r0, r4
 800844e:	4629      	mov	r1, r5
 8008450:	f7f8 fb60 	bl	8000b14 <__aeabi_dcmplt>
 8008454:	b158      	cbz	r0, 800846e <_dtoa_r+0x1b6>
 8008456:	4658      	mov	r0, fp
 8008458:	f7f8 f884 	bl	8000564 <__aeabi_i2d>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4620      	mov	r0, r4
 8008462:	4629      	mov	r1, r5
 8008464:	f7f8 fb4c 	bl	8000b00 <__aeabi_dcmpeq>
 8008468:	b908      	cbnz	r0, 800846e <_dtoa_r+0x1b6>
 800846a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800846e:	f1bb 0f16 	cmp.w	fp, #22
 8008472:	d80d      	bhi.n	8008490 <_dtoa_r+0x1d8>
 8008474:	4949      	ldr	r1, [pc, #292]	; (800859c <_dtoa_r+0x2e4>)
 8008476:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800847a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800847e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008482:	f7f8 fb65 	bl	8000b50 <__aeabi_dcmpgt>
 8008486:	b130      	cbz	r0, 8008496 <_dtoa_r+0x1de>
 8008488:	f10b 3bff 	add.w	fp, fp, #4294967295
 800848c:	2300      	movs	r3, #0
 800848e:	e000      	b.n	8008492 <_dtoa_r+0x1da>
 8008490:	2301      	movs	r3, #1
 8008492:	930d      	str	r3, [sp, #52]	; 0x34
 8008494:	e000      	b.n	8008498 <_dtoa_r+0x1e0>
 8008496:	900d      	str	r0, [sp, #52]	; 0x34
 8008498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800849a:	1b9e      	subs	r6, r3, r6
 800849c:	1e73      	subs	r3, r6, #1
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	bf43      	ittte	mi
 80084a2:	f1c3 0900 	rsbmi	r9, r3, #0
 80084a6:	2300      	movmi	r3, #0
 80084a8:	9305      	strmi	r3, [sp, #20]
 80084aa:	f04f 0900 	movpl.w	r9, #0
 80084ae:	f1bb 0f00 	cmp.w	fp, #0
 80084b2:	db07      	blt.n	80084c4 <_dtoa_r+0x20c>
 80084b4:	9b05      	ldr	r3, [sp, #20]
 80084b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80084ba:	445b      	add	r3, fp
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	2300      	movs	r3, #0
 80084c0:	9307      	str	r3, [sp, #28]
 80084c2:	e006      	b.n	80084d2 <_dtoa_r+0x21a>
 80084c4:	f1cb 0300 	rsb	r3, fp, #0
 80084c8:	9307      	str	r3, [sp, #28]
 80084ca:	2300      	movs	r3, #0
 80084cc:	ebcb 0909 	rsb	r9, fp, r9
 80084d0:	930c      	str	r3, [sp, #48]	; 0x30
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	2b09      	cmp	r3, #9
 80084d6:	d827      	bhi.n	8008528 <_dtoa_r+0x270>
 80084d8:	2b05      	cmp	r3, #5
 80084da:	bfc4      	itt	gt
 80084dc:	3b04      	subgt	r3, #4
 80084de:	9306      	strgt	r3, [sp, #24]
 80084e0:	9b06      	ldr	r3, [sp, #24]
 80084e2:	f1a3 0302 	sub.w	r3, r3, #2
 80084e6:	bfcc      	ite	gt
 80084e8:	2500      	movgt	r5, #0
 80084ea:	2501      	movle	r5, #1
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d820      	bhi.n	8008532 <_dtoa_r+0x27a>
 80084f0:	e8df f003 	tbb	[pc, r3]
 80084f4:	04020e06 	.word	0x04020e06
 80084f8:	2301      	movs	r3, #1
 80084fa:	e002      	b.n	8008502 <_dtoa_r+0x24a>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e008      	b.n	8008512 <_dtoa_r+0x25a>
 8008500:	2300      	movs	r3, #0
 8008502:	9308      	str	r3, [sp, #32]
 8008504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	dd1c      	ble.n	8008544 <_dtoa_r+0x28c>
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	4698      	mov	r8, r3
 800850e:	e01e      	b.n	800854e <_dtoa_r+0x296>
 8008510:	2300      	movs	r3, #0
 8008512:	9308      	str	r3, [sp, #32]
 8008514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008516:	445b      	add	r3, fp
 8008518:	f103 0801 	add.w	r8, r3, #1
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	4643      	mov	r3, r8
 8008520:	2b01      	cmp	r3, #1
 8008522:	bfb8      	it	lt
 8008524:	2301      	movlt	r3, #1
 8008526:	e012      	b.n	800854e <_dtoa_r+0x296>
 8008528:	2501      	movs	r5, #1
 800852a:	2300      	movs	r3, #0
 800852c:	9306      	str	r3, [sp, #24]
 800852e:	9508      	str	r5, [sp, #32]
 8008530:	e001      	b.n	8008536 <_dtoa_r+0x27e>
 8008532:	2301      	movs	r3, #1
 8008534:	9308      	str	r3, [sp, #32]
 8008536:	f04f 33ff 	mov.w	r3, #4294967295
 800853a:	9303      	str	r3, [sp, #12]
 800853c:	4698      	mov	r8, r3
 800853e:	2200      	movs	r2, #0
 8008540:	2312      	movs	r3, #18
 8008542:	e003      	b.n	800854c <_dtoa_r+0x294>
 8008544:	2301      	movs	r3, #1
 8008546:	9303      	str	r3, [sp, #12]
 8008548:	4698      	mov	r8, r3
 800854a:	461a      	mov	r2, r3
 800854c:	9209      	str	r2, [sp, #36]	; 0x24
 800854e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8008552:	2200      	movs	r2, #0
 8008554:	6062      	str	r2, [r4, #4]
 8008556:	2104      	movs	r1, #4
 8008558:	f101 0214 	add.w	r2, r1, #20
 800855c:	429a      	cmp	r2, r3
 800855e:	d81f      	bhi.n	80085a0 <_dtoa_r+0x2e8>
 8008560:	6862      	ldr	r2, [r4, #4]
 8008562:	3201      	adds	r2, #1
 8008564:	6062      	str	r2, [r4, #4]
 8008566:	0049      	lsls	r1, r1, #1
 8008568:	e7f6      	b.n	8008558 <_dtoa_r+0x2a0>
 800856a:	bf00      	nop
 800856c:	f3af 8000 	nop.w
 8008570:	636f4361 	.word	0x636f4361
 8008574:	3fd287a7 	.word	0x3fd287a7
 8008578:	8b60c8b3 	.word	0x8b60c8b3
 800857c:	3fc68a28 	.word	0x3fc68a28
 8008580:	509f79fb 	.word	0x509f79fb
 8008584:	3fd34413 	.word	0x3fd34413
 8008588:	7ff00000 	.word	0x7ff00000
 800858c:	0800b131 	.word	0x0800b131
 8008590:	0800b13a 	.word	0x0800b13a
 8008594:	08009b79 	.word	0x08009b79
 8008598:	3ff80000 	.word	0x3ff80000
 800859c:	0800b148 	.word	0x0800b148
 80085a0:	6861      	ldr	r1, [r4, #4]
 80085a2:	4650      	mov	r0, sl
 80085a4:	f000 fd40 	bl	8009028 <_Balloc>
 80085a8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80085ac:	6020      	str	r0, [r4, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	f1b8 0f0e 	cmp.w	r8, #14
 80085b6:	f200 815d 	bhi.w	8008874 <_dtoa_r+0x5bc>
 80085ba:	2d00      	cmp	r5, #0
 80085bc:	f000 815a 	beq.w	8008874 <_dtoa_r+0x5bc>
 80085c0:	ed9d 7b00 	vldr	d7, [sp]
 80085c4:	f1bb 0f00 	cmp.w	fp, #0
 80085c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80085cc:	dd31      	ble.n	8008632 <_dtoa_r+0x37a>
 80085ce:	4aa0      	ldr	r2, [pc, #640]	; (8008850 <_dtoa_r+0x598>)
 80085d0:	f00b 030f 	and.w	r3, fp, #15
 80085d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085d8:	ed93 7b00 	vldr	d7, [r3]
 80085dc:	ea4f 142b 	mov.w	r4, fp, asr #4
 80085e0:	06e2      	lsls	r2, r4, #27
 80085e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80085e6:	d50c      	bpl.n	8008602 <_dtoa_r+0x34a>
 80085e8:	4b9a      	ldr	r3, [pc, #616]	; (8008854 <_dtoa_r+0x59c>)
 80085ea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085f2:	f7f8 f947 	bl	8000884 <__aeabi_ddiv>
 80085f6:	f004 040f 	and.w	r4, r4, #15
 80085fa:	e9cd 0100 	strd	r0, r1, [sp]
 80085fe:	2603      	movs	r6, #3
 8008600:	e000      	b.n	8008604 <_dtoa_r+0x34c>
 8008602:	2602      	movs	r6, #2
 8008604:	4d93      	ldr	r5, [pc, #588]	; (8008854 <_dtoa_r+0x59c>)
 8008606:	b16c      	cbz	r4, 8008624 <_dtoa_r+0x36c>
 8008608:	07e3      	lsls	r3, r4, #31
 800860a:	d508      	bpl.n	800861e <_dtoa_r+0x366>
 800860c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008614:	f7f8 f80c 	bl	8000630 <__aeabi_dmul>
 8008618:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800861c:	3601      	adds	r6, #1
 800861e:	1064      	asrs	r4, r4, #1
 8008620:	3508      	adds	r5, #8
 8008622:	e7f0      	b.n	8008606 <_dtoa_r+0x34e>
 8008624:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862c:	f7f8 f92a 	bl	8000884 <__aeabi_ddiv>
 8008630:	e020      	b.n	8008674 <_dtoa_r+0x3bc>
 8008632:	f1cb 0400 	rsb	r4, fp, #0
 8008636:	b304      	cbz	r4, 800867a <_dtoa_r+0x3c2>
 8008638:	4b85      	ldr	r3, [pc, #532]	; (8008850 <_dtoa_r+0x598>)
 800863a:	4d86      	ldr	r5, [pc, #536]	; (8008854 <_dtoa_r+0x59c>)
 800863c:	f004 020f 	and.w	r2, r4, #15
 8008640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800864c:	f7f7 fff0 	bl	8000630 <__aeabi_dmul>
 8008650:	e9cd 0100 	strd	r0, r1, [sp]
 8008654:	1124      	asrs	r4, r4, #4
 8008656:	2300      	movs	r3, #0
 8008658:	2602      	movs	r6, #2
 800865a:	b154      	cbz	r4, 8008672 <_dtoa_r+0x3ba>
 800865c:	07e7      	lsls	r7, r4, #31
 800865e:	d505      	bpl.n	800866c <_dtoa_r+0x3b4>
 8008660:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008664:	f7f7 ffe4 	bl	8000630 <__aeabi_dmul>
 8008668:	3601      	adds	r6, #1
 800866a:	2301      	movs	r3, #1
 800866c:	1064      	asrs	r4, r4, #1
 800866e:	3508      	adds	r5, #8
 8008670:	e7f3      	b.n	800865a <_dtoa_r+0x3a2>
 8008672:	b11b      	cbz	r3, 800867c <_dtoa_r+0x3c4>
 8008674:	e9cd 0100 	strd	r0, r1, [sp]
 8008678:	e000      	b.n	800867c <_dtoa_r+0x3c4>
 800867a:	2602      	movs	r6, #2
 800867c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800867e:	b1eb      	cbz	r3, 80086bc <_dtoa_r+0x404>
 8008680:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008684:	2200      	movs	r2, #0
 8008686:	4b74      	ldr	r3, [pc, #464]	; (8008858 <_dtoa_r+0x5a0>)
 8008688:	4620      	mov	r0, r4
 800868a:	4629      	mov	r1, r5
 800868c:	f7f8 fa42 	bl	8000b14 <__aeabi_dcmplt>
 8008690:	b1a0      	cbz	r0, 80086bc <_dtoa_r+0x404>
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	d011      	beq.n	80086bc <_dtoa_r+0x404>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f340 80e6 	ble.w	800886c <_dtoa_r+0x5b4>
 80086a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80086a4:	930a      	str	r3, [sp, #40]	; 0x28
 80086a6:	2200      	movs	r2, #0
 80086a8:	4b6c      	ldr	r3, [pc, #432]	; (800885c <_dtoa_r+0x5a4>)
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f7 ffbf 	bl	8000630 <__aeabi_dmul>
 80086b2:	3601      	adds	r6, #1
 80086b4:	e9cd 0100 	strd	r0, r1, [sp]
 80086b8:	9f03      	ldr	r7, [sp, #12]
 80086ba:	e002      	b.n	80086c2 <_dtoa_r+0x40a>
 80086bc:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80086c0:	4647      	mov	r7, r8
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7f7 ff4e 	bl	8000564 <__aeabi_i2d>
 80086c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086cc:	f7f7 ffb0 	bl	8000630 <__aeabi_dmul>
 80086d0:	2200      	movs	r2, #0
 80086d2:	4b63      	ldr	r3, [pc, #396]	; (8008860 <_dtoa_r+0x5a8>)
 80086d4:	f7f7 fdfa 	bl	80002cc <__adddf3>
 80086d8:	4604      	mov	r4, r0
 80086da:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80086de:	b9cf      	cbnz	r7, 8008714 <_dtoa_r+0x45c>
 80086e0:	2200      	movs	r2, #0
 80086e2:	4b60      	ldr	r3, [pc, #384]	; (8008864 <_dtoa_r+0x5ac>)
 80086e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086e8:	f7f7 fdee 	bl	80002c8 <__aeabi_dsub>
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	e9cd 0100 	strd	r0, r1, [sp]
 80086f4:	f7f8 fa2c 	bl	8000b50 <__aeabi_dcmpgt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f040 8241 	bne.w	8008b80 <_dtoa_r+0x8c8>
 80086fe:	4622      	mov	r2, r4
 8008700:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008704:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008708:	f7f8 fa04 	bl	8000b14 <__aeabi_dcmplt>
 800870c:	2800      	cmp	r0, #0
 800870e:	f040 822e 	bne.w	8008b6e <_dtoa_r+0x8b6>
 8008712:	e0ab      	b.n	800886c <_dtoa_r+0x5b4>
 8008714:	9a08      	ldr	r2, [sp, #32]
 8008716:	4b4e      	ldr	r3, [pc, #312]	; (8008850 <_dtoa_r+0x598>)
 8008718:	1e79      	subs	r1, r7, #1
 800871a:	2a00      	cmp	r2, #0
 800871c:	d04a      	beq.n	80087b4 <_dtoa_r+0x4fc>
 800871e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	2000      	movs	r0, #0
 8008728:	494f      	ldr	r1, [pc, #316]	; (8008868 <_dtoa_r+0x5b0>)
 800872a:	f7f8 f8ab 	bl	8000884 <__aeabi_ddiv>
 800872e:	4622      	mov	r2, r4
 8008730:	462b      	mov	r3, r5
 8008732:	f7f7 fdc9 	bl	80002c8 <__aeabi_dsub>
 8008736:	9c04      	ldr	r4, [sp, #16]
 8008738:	4605      	mov	r5, r0
 800873a:	460e      	mov	r6, r1
 800873c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008740:	f7f8 fa26 	bl	8000b90 <__aeabi_d2iz>
 8008744:	9012      	str	r0, [sp, #72]	; 0x48
 8008746:	f7f7 ff0d 	bl	8000564 <__aeabi_i2d>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008752:	f7f7 fdb9 	bl	80002c8 <__aeabi_dsub>
 8008756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008758:	3330      	adds	r3, #48	; 0x30
 800875a:	f804 3b01 	strb.w	r3, [r4], #1
 800875e:	462a      	mov	r2, r5
 8008760:	4633      	mov	r3, r6
 8008762:	e9cd 0100 	strd	r0, r1, [sp]
 8008766:	f7f8 f9d5 	bl	8000b14 <__aeabi_dcmplt>
 800876a:	2800      	cmp	r0, #0
 800876c:	f040 8321 	bne.w	8008db2 <_dtoa_r+0xafa>
 8008770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008774:	2000      	movs	r0, #0
 8008776:	4938      	ldr	r1, [pc, #224]	; (8008858 <_dtoa_r+0x5a0>)
 8008778:	f7f7 fda6 	bl	80002c8 <__aeabi_dsub>
 800877c:	462a      	mov	r2, r5
 800877e:	4633      	mov	r3, r6
 8008780:	f7f8 f9c8 	bl	8000b14 <__aeabi_dcmplt>
 8008784:	2800      	cmp	r0, #0
 8008786:	f040 80d2 	bne.w	800892e <_dtoa_r+0x676>
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	1ae3      	subs	r3, r4, r3
 800878e:	42bb      	cmp	r3, r7
 8008790:	da6c      	bge.n	800886c <_dtoa_r+0x5b4>
 8008792:	2200      	movs	r2, #0
 8008794:	4b31      	ldr	r3, [pc, #196]	; (800885c <_dtoa_r+0x5a4>)
 8008796:	4628      	mov	r0, r5
 8008798:	4631      	mov	r1, r6
 800879a:	f7f7 ff49 	bl	8000630 <__aeabi_dmul>
 800879e:	2200      	movs	r2, #0
 80087a0:	4605      	mov	r5, r0
 80087a2:	460e      	mov	r6, r1
 80087a4:	4b2d      	ldr	r3, [pc, #180]	; (800885c <_dtoa_r+0x5a4>)
 80087a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087aa:	f7f7 ff41 	bl	8000630 <__aeabi_dmul>
 80087ae:	e9cd 0100 	strd	r0, r1, [sp]
 80087b2:	e7c3      	b.n	800873c <_dtoa_r+0x484>
 80087b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80087b8:	4622      	mov	r2, r4
 80087ba:	462b      	mov	r3, r5
 80087bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c0:	f7f7 ff36 	bl	8000630 <__aeabi_dmul>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80087ca:	19dc      	adds	r4, r3, r7
 80087cc:	461d      	mov	r5, r3
 80087ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087d2:	f7f8 f9dd 	bl	8000b90 <__aeabi_d2iz>
 80087d6:	4606      	mov	r6, r0
 80087d8:	f7f7 fec4 	bl	8000564 <__aeabi_i2d>
 80087dc:	3630      	adds	r6, #48	; 0x30
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e6:	f7f7 fd6f 	bl	80002c8 <__aeabi_dsub>
 80087ea:	f805 6b01 	strb.w	r6, [r5], #1
 80087ee:	42ac      	cmp	r4, r5
 80087f0:	e9cd 0100 	strd	r0, r1, [sp]
 80087f4:	f04f 0200 	mov.w	r2, #0
 80087f8:	d123      	bne.n	8008842 <_dtoa_r+0x58a>
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <_dtoa_r+0x5b0>)
 80087fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008800:	f7f7 fd64 	bl	80002cc <__adddf3>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800880c:	f7f8 f9a0 	bl	8000b50 <__aeabi_dcmpgt>
 8008810:	2800      	cmp	r0, #0
 8008812:	f040 808c 	bne.w	800892e <_dtoa_r+0x676>
 8008816:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800881a:	2000      	movs	r0, #0
 800881c:	4912      	ldr	r1, [pc, #72]	; (8008868 <_dtoa_r+0x5b0>)
 800881e:	f7f7 fd53 	bl	80002c8 <__aeabi_dsub>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800882a:	f7f8 f973 	bl	8000b14 <__aeabi_dcmplt>
 800882e:	b1e8      	cbz	r0, 800886c <_dtoa_r+0x5b4>
 8008830:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	f104 32ff 	add.w	r2, r4, #4294967295
 800883a:	f040 82ba 	bne.w	8008db2 <_dtoa_r+0xafa>
 800883e:	4614      	mov	r4, r2
 8008840:	e7f6      	b.n	8008830 <_dtoa_r+0x578>
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <_dtoa_r+0x5a4>)
 8008844:	f7f7 fef4 	bl	8000630 <__aeabi_dmul>
 8008848:	e9cd 0100 	strd	r0, r1, [sp]
 800884c:	e7bf      	b.n	80087ce <_dtoa_r+0x516>
 800884e:	bf00      	nop
 8008850:	0800b148 	.word	0x0800b148
 8008854:	0800b210 	.word	0x0800b210
 8008858:	3ff00000 	.word	0x3ff00000
 800885c:	40240000 	.word	0x40240000
 8008860:	401c0000 	.word	0x401c0000
 8008864:	40140000 	.word	0x40140000
 8008868:	3fe00000 	.word	0x3fe00000
 800886c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8008870:	e88d 0018 	stmia.w	sp, {r3, r4}
 8008874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008876:	2b00      	cmp	r3, #0
 8008878:	db7c      	blt.n	8008974 <_dtoa_r+0x6bc>
 800887a:	f1bb 0f0e 	cmp.w	fp, #14
 800887e:	dc79      	bgt.n	8008974 <_dtoa_r+0x6bc>
 8008880:	4b8f      	ldr	r3, [pc, #572]	; (8008ac0 <_dtoa_r+0x808>)
 8008882:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008886:	e9d3 6700 	ldrd	r6, r7, [r3]
 800888a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	da14      	bge.n	80088ba <_dtoa_r+0x602>
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	dc11      	bgt.n	80088ba <_dtoa_r+0x602>
 8008896:	f040 816c 	bne.w	8008b72 <_dtoa_r+0x8ba>
 800889a:	2200      	movs	r2, #0
 800889c:	4b89      	ldr	r3, [pc, #548]	; (8008ac4 <_dtoa_r+0x80c>)
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fec5 	bl	8000630 <__aeabi_dmul>
 80088a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088aa:	f7f8 f947 	bl	8000b3c <__aeabi_dcmpge>
 80088ae:	4645      	mov	r5, r8
 80088b0:	4646      	mov	r6, r8
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f040 815f 	bne.w	8008b76 <_dtoa_r+0x8be>
 80088b8:	e166      	b.n	8008b88 <_dtoa_r+0x8d0>
 80088ba:	9c04      	ldr	r4, [sp, #16]
 80088bc:	4632      	mov	r2, r6
 80088be:	463b      	mov	r3, r7
 80088c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088c4:	f7f7 ffde 	bl	8000884 <__aeabi_ddiv>
 80088c8:	f7f8 f962 	bl	8000b90 <__aeabi_d2iz>
 80088cc:	4605      	mov	r5, r0
 80088ce:	f7f7 fe49 	bl	8000564 <__aeabi_i2d>
 80088d2:	4632      	mov	r2, r6
 80088d4:	463b      	mov	r3, r7
 80088d6:	f7f7 feab 	bl	8000630 <__aeabi_dmul>
 80088da:	460b      	mov	r3, r1
 80088dc:	4602      	mov	r2, r0
 80088de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088e2:	f7f7 fcf1 	bl	80002c8 <__aeabi_dsub>
 80088e6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80088ea:	f804 eb01 	strb.w	lr, [r4], #1
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	ebc3 0e04 	rsb	lr, r3, r4
 80088f4:	45f0      	cmp	r8, lr
 80088f6:	e9cd 0100 	strd	r0, r1, [sp]
 80088fa:	d12e      	bne.n	800895a <_dtoa_r+0x6a2>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	f7f7 fce4 	bl	80002cc <__adddf3>
 8008904:	4680      	mov	r8, r0
 8008906:	4689      	mov	r9, r1
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4630      	mov	r0, r6
 800890e:	4639      	mov	r1, r7
 8008910:	f7f8 f900 	bl	8000b14 <__aeabi_dcmplt>
 8008914:	b978      	cbnz	r0, 8008936 <_dtoa_r+0x67e>
 8008916:	4642      	mov	r2, r8
 8008918:	464b      	mov	r3, r9
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f8 f8ef 	bl	8000b00 <__aeabi_dcmpeq>
 8008922:	2800      	cmp	r0, #0
 8008924:	f000 8247 	beq.w	8008db6 <_dtoa_r+0xafe>
 8008928:	07e9      	lsls	r1, r5, #31
 800892a:	d404      	bmi.n	8008936 <_dtoa_r+0x67e>
 800892c:	e243      	b.n	8008db6 <_dtoa_r+0xafe>
 800892e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008932:	e000      	b.n	8008936 <_dtoa_r+0x67e>
 8008934:	461c      	mov	r4, r3
 8008936:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800893a:	2a39      	cmp	r2, #57	; 0x39
 800893c:	f104 33ff 	add.w	r3, r4, #4294967295
 8008940:	d107      	bne.n	8008952 <_dtoa_r+0x69a>
 8008942:	9a04      	ldr	r2, [sp, #16]
 8008944:	429a      	cmp	r2, r3
 8008946:	d1f5      	bne.n	8008934 <_dtoa_r+0x67c>
 8008948:	9904      	ldr	r1, [sp, #16]
 800894a:	2230      	movs	r2, #48	; 0x30
 800894c:	f10b 0b01 	add.w	fp, fp, #1
 8008950:	700a      	strb	r2, [r1, #0]
 8008952:	781a      	ldrb	r2, [r3, #0]
 8008954:	3201      	adds	r2, #1
 8008956:	701a      	strb	r2, [r3, #0]
 8008958:	e22d      	b.n	8008db6 <_dtoa_r+0xafe>
 800895a:	2200      	movs	r2, #0
 800895c:	4b5a      	ldr	r3, [pc, #360]	; (8008ac8 <_dtoa_r+0x810>)
 800895e:	f7f7 fe67 	bl	8000630 <__aeabi_dmul>
 8008962:	2200      	movs	r2, #0
 8008964:	2300      	movs	r3, #0
 8008966:	e9cd 0100 	strd	r0, r1, [sp]
 800896a:	f7f8 f8c9 	bl	8000b00 <__aeabi_dcmpeq>
 800896e:	2800      	cmp	r0, #0
 8008970:	d0a4      	beq.n	80088bc <_dtoa_r+0x604>
 8008972:	e220      	b.n	8008db6 <_dtoa_r+0xafe>
 8008974:	9a08      	ldr	r2, [sp, #32]
 8008976:	2a00      	cmp	r2, #0
 8008978:	d02d      	beq.n	80089d6 <_dtoa_r+0x71e>
 800897a:	9a06      	ldr	r2, [sp, #24]
 800897c:	2a01      	cmp	r2, #1
 800897e:	dc0a      	bgt.n	8008996 <_dtoa_r+0x6de>
 8008980:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008982:	b112      	cbz	r2, 800898a <_dtoa_r+0x6d2>
 8008984:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008988:	e002      	b.n	8008990 <_dtoa_r+0x6d8>
 800898a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800898c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008990:	9d07      	ldr	r5, [sp, #28]
 8008992:	464c      	mov	r4, r9
 8008994:	e015      	b.n	80089c2 <_dtoa_r+0x70a>
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	f108 35ff 	add.w	r5, r8, #4294967295
 800899c:	42ab      	cmp	r3, r5
 800899e:	bfbf      	itttt	lt
 80089a0:	9b07      	ldrlt	r3, [sp, #28]
 80089a2:	9507      	strlt	r5, [sp, #28]
 80089a4:	1aea      	sublt	r2, r5, r3
 80089a6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80089a8:	bfb7      	itett	lt
 80089aa:	189b      	addlt	r3, r3, r2
 80089ac:	1b5d      	subge	r5, r3, r5
 80089ae:	930c      	strlt	r3, [sp, #48]	; 0x30
 80089b0:	2500      	movlt	r5, #0
 80089b2:	f1b8 0f00 	cmp.w	r8, #0
 80089b6:	bfb9      	ittee	lt
 80089b8:	ebc8 0409 	rsblt	r4, r8, r9
 80089bc:	2300      	movlt	r3, #0
 80089be:	464c      	movge	r4, r9
 80089c0:	4643      	movge	r3, r8
 80089c2:	9a05      	ldr	r2, [sp, #20]
 80089c4:	2101      	movs	r1, #1
 80089c6:	441a      	add	r2, r3
 80089c8:	4650      	mov	r0, sl
 80089ca:	4499      	add	r9, r3
 80089cc:	9205      	str	r2, [sp, #20]
 80089ce:	f000 fbff 	bl	80091d0 <__i2b>
 80089d2:	4606      	mov	r6, r0
 80089d4:	e002      	b.n	80089dc <_dtoa_r+0x724>
 80089d6:	9d07      	ldr	r5, [sp, #28]
 80089d8:	9e08      	ldr	r6, [sp, #32]
 80089da:	464c      	mov	r4, r9
 80089dc:	b15c      	cbz	r4, 80089f6 <_dtoa_r+0x73e>
 80089de:	9b05      	ldr	r3, [sp, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	dd08      	ble.n	80089f6 <_dtoa_r+0x73e>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	9a05      	ldr	r2, [sp, #20]
 80089e8:	bfa8      	it	ge
 80089ea:	4623      	movge	r3, r4
 80089ec:	ebc3 0909 	rsb	r9, r3, r9
 80089f0:	1ae4      	subs	r4, r4, r3
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	9305      	str	r3, [sp, #20]
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd1d      	ble.n	8008a38 <_dtoa_r+0x780>
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	b1ab      	cbz	r3, 8008a2c <_dtoa_r+0x774>
 8008a00:	b185      	cbz	r5, 8008a24 <_dtoa_r+0x76c>
 8008a02:	4631      	mov	r1, r6
 8008a04:	462a      	mov	r2, r5
 8008a06:	4650      	mov	r0, sl
 8008a08:	f000 fc7c 	bl	8009304 <__pow5mult>
 8008a0c:	9a02      	ldr	r2, [sp, #8]
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4606      	mov	r6, r0
 8008a12:	4650      	mov	r0, sl
 8008a14:	f000 fbe5 	bl	80091e2 <__multiply>
 8008a18:	9902      	ldr	r1, [sp, #8]
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	f000 fb38 	bl	8009092 <_Bfree>
 8008a22:	9702      	str	r7, [sp, #8]
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	1b5a      	subs	r2, r3, r5
 8008a28:	d006      	beq.n	8008a38 <_dtoa_r+0x780>
 8008a2a:	e000      	b.n	8008a2e <_dtoa_r+0x776>
 8008a2c:	9a07      	ldr	r2, [sp, #28]
 8008a2e:	9902      	ldr	r1, [sp, #8]
 8008a30:	4650      	mov	r0, sl
 8008a32:	f000 fc67 	bl	8009304 <__pow5mult>
 8008a36:	9002      	str	r0, [sp, #8]
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	f000 fbc8 	bl	80091d0 <__i2b>
 8008a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a42:	4605      	mov	r5, r0
 8008a44:	b35b      	cbz	r3, 8008a9e <_dtoa_r+0x7e6>
 8008a46:	461a      	mov	r2, r3
 8008a48:	4601      	mov	r1, r0
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f000 fc5a 	bl	8009304 <__pow5mult>
 8008a50:	9b06      	ldr	r3, [sp, #24]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	4605      	mov	r5, r0
 8008a56:	dc18      	bgt.n	8008a8a <_dtoa_r+0x7d2>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	b983      	cbnz	r3, 8008a7e <_dtoa_r+0x7c6>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a62:	b973      	cbnz	r3, 8008a82 <_dtoa_r+0x7ca>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8008a6a:	0d3f      	lsrs	r7, r7, #20
 8008a6c:	053f      	lsls	r7, r7, #20
 8008a6e:	b14f      	cbz	r7, 8008a84 <_dtoa_r+0x7cc>
 8008a70:	9b05      	ldr	r3, [sp, #20]
 8008a72:	3301      	adds	r3, #1
 8008a74:	f109 0901 	add.w	r9, r9, #1
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	2701      	movs	r7, #1
 8008a7c:	e002      	b.n	8008a84 <_dtoa_r+0x7cc>
 8008a7e:	2700      	movs	r7, #0
 8008a80:	e000      	b.n	8008a84 <_dtoa_r+0x7cc>
 8008a82:	9f00      	ldr	r7, [sp, #0]
 8008a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a86:	b173      	cbz	r3, 8008aa6 <_dtoa_r+0x7ee>
 8008a88:	e000      	b.n	8008a8c <_dtoa_r+0x7d4>
 8008a8a:	2700      	movs	r7, #0
 8008a8c:	692b      	ldr	r3, [r5, #16]
 8008a8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008a92:	6918      	ldr	r0, [r3, #16]
 8008a94:	f000 fb4f 	bl	8009136 <__hi0bits>
 8008a98:	f1c0 0020 	rsb	r0, r0, #32
 8008a9c:	e004      	b.n	8008aa8 <_dtoa_r+0x7f0>
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	ddd9      	ble.n	8008a58 <_dtoa_r+0x7a0>
 8008aa4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	4418      	add	r0, r3
 8008aac:	f010 001f 	ands.w	r0, r0, #31
 8008ab0:	d00e      	beq.n	8008ad0 <_dtoa_r+0x818>
 8008ab2:	f1c0 0320 	rsb	r3, r0, #32
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	dd08      	ble.n	8008acc <_dtoa_r+0x814>
 8008aba:	f1c0 001c 	rsb	r0, r0, #28
 8008abe:	e008      	b.n	8008ad2 <_dtoa_r+0x81a>
 8008ac0:	0800b148 	.word	0x0800b148
 8008ac4:	40140000 	.word	0x40140000
 8008ac8:	40240000 	.word	0x40240000
 8008acc:	d006      	beq.n	8008adc <_dtoa_r+0x824>
 8008ace:	4618      	mov	r0, r3
 8008ad0:	301c      	adds	r0, #28
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	4403      	add	r3, r0
 8008ad6:	4481      	add	r9, r0
 8008ad8:	4404      	add	r4, r0
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	f1b9 0f00 	cmp.w	r9, #0
 8008ae0:	dd05      	ble.n	8008aee <_dtoa_r+0x836>
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	9902      	ldr	r1, [sp, #8]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	f000 fc5a 	bl	80093a0 <__lshift>
 8008aec:	9002      	str	r0, [sp, #8]
 8008aee:	9b05      	ldr	r3, [sp, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd05      	ble.n	8008b00 <_dtoa_r+0x848>
 8008af4:	4629      	mov	r1, r5
 8008af6:	461a      	mov	r2, r3
 8008af8:	4650      	mov	r0, sl
 8008afa:	f000 fc51 	bl	80093a0 <__lshift>
 8008afe:	4605      	mov	r5, r0
 8008b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b02:	b1eb      	cbz	r3, 8008b40 <_dtoa_r+0x888>
 8008b04:	4629      	mov	r1, r5
 8008b06:	9802      	ldr	r0, [sp, #8]
 8008b08:	f000 fc9b 	bl	8009442 <__mcmp>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	da17      	bge.n	8008b40 <_dtoa_r+0x888>
 8008b10:	2300      	movs	r3, #0
 8008b12:	220a      	movs	r2, #10
 8008b14:	9902      	ldr	r1, [sp, #8]
 8008b16:	4650      	mov	r0, sl
 8008b18:	f000 fad2 	bl	80090c0 <__multadd>
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	9002      	str	r0, [sp, #8]
 8008b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 8158 	beq.w	8008dda <_dtoa_r+0xb22>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	220a      	movs	r2, #10
 8008b30:	4650      	mov	r0, sl
 8008b32:	f000 fac5 	bl	80090c0 <__multadd>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	dc37      	bgt.n	8008bae <_dtoa_r+0x8f6>
 8008b3e:	e033      	b.n	8008ba8 <_dtoa_r+0x8f0>
 8008b40:	f1b8 0f00 	cmp.w	r8, #0
 8008b44:	dc2a      	bgt.n	8008b9c <_dtoa_r+0x8e4>
 8008b46:	9b06      	ldr	r3, [sp, #24]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	dd27      	ble.n	8008b9c <_dtoa_r+0x8e4>
 8008b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b50:	9b03      	ldr	r3, [sp, #12]
 8008b52:	b983      	cbnz	r3, 8008b76 <_dtoa_r+0x8be>
 8008b54:	4629      	mov	r1, r5
 8008b56:	2205      	movs	r2, #5
 8008b58:	4650      	mov	r0, sl
 8008b5a:	f000 fab1 	bl	80090c0 <__multadd>
 8008b5e:	4601      	mov	r1, r0
 8008b60:	4605      	mov	r5, r0
 8008b62:	9802      	ldr	r0, [sp, #8]
 8008b64:	f000 fc6d 	bl	8009442 <__mcmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	dc0d      	bgt.n	8008b88 <_dtoa_r+0x8d0>
 8008b6c:	e003      	b.n	8008b76 <_dtoa_r+0x8be>
 8008b6e:	463d      	mov	r5, r7
 8008b70:	e000      	b.n	8008b74 <_dtoa_r+0x8bc>
 8008b72:	2500      	movs	r5, #0
 8008b74:	462e      	mov	r6, r5
 8008b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b78:	9c04      	ldr	r4, [sp, #16]
 8008b7a:	ea6f 0b03 	mvn.w	fp, r3
 8008b7e:	e00a      	b.n	8008b96 <_dtoa_r+0x8de>
 8008b80:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008b84:	463d      	mov	r5, r7
 8008b86:	463e      	mov	r6, r7
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	9a04      	ldr	r2, [sp, #16]
 8008b8c:	1c5c      	adds	r4, r3, #1
 8008b8e:	2331      	movs	r3, #49	; 0x31
 8008b90:	7013      	strb	r3, [r2, #0]
 8008b92:	f10b 0b01 	add.w	fp, fp, #1
 8008b96:	46b0      	mov	r8, r6
 8008b98:	2600      	movs	r6, #0
 8008b9a:	e0f7      	b.n	8008d8c <_dtoa_r+0xad4>
 8008b9c:	9b08      	ldr	r3, [sp, #32]
 8008b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ba2:	b923      	cbnz	r3, 8008bae <_dtoa_r+0x8f6>
 8008ba4:	9c04      	ldr	r4, [sp, #16]
 8008ba6:	e0b1      	b.n	8008d0c <_dtoa_r+0xa54>
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	dcd0      	bgt.n	8008b50 <_dtoa_r+0x898>
 8008bae:	2c00      	cmp	r4, #0
 8008bb0:	dd05      	ble.n	8008bbe <_dtoa_r+0x906>
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	f000 fbf2 	bl	80093a0 <__lshift>
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	b19f      	cbz	r7, 8008be8 <_dtoa_r+0x930>
 8008bc0:	6871      	ldr	r1, [r6, #4]
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fa30 	bl	8009028 <_Balloc>
 8008bc8:	6932      	ldr	r2, [r6, #16]
 8008bca:	3202      	adds	r2, #2
 8008bcc:	4604      	mov	r4, r0
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	f106 010c 	add.w	r1, r6, #12
 8008bd4:	300c      	adds	r0, #12
 8008bd6:	f7fe fac9 	bl	800716c <memcpy>
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4650      	mov	r0, sl
 8008be0:	f000 fbde 	bl	80093a0 <__lshift>
 8008be4:	4680      	mov	r8, r0
 8008be6:	e000      	b.n	8008bea <_dtoa_r+0x932>
 8008be8:	46b0      	mov	r8, r6
 8008bea:	9b00      	ldr	r3, [sp, #0]
 8008bec:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	9802      	ldr	r0, [sp, #8]
 8008bfa:	f7ff facb 	bl	8008194 <quorem>
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4604      	mov	r4, r0
 8008c02:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008c06:	9802      	ldr	r0, [sp, #8]
 8008c08:	f000 fc1b 	bl	8009442 <__mcmp>
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	9000      	str	r0, [sp, #0]
 8008c10:	4629      	mov	r1, r5
 8008c12:	4650      	mov	r0, sl
 8008c14:	f000 fc31 	bl	800947a <__mdiff>
 8008c18:	68c3      	ldr	r3, [r0, #12]
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	b93b      	cbnz	r3, 8008c2e <_dtoa_r+0x976>
 8008c1e:	4601      	mov	r1, r0
 8008c20:	9007      	str	r0, [sp, #28]
 8008c22:	9802      	ldr	r0, [sp, #8]
 8008c24:	f000 fc0d 	bl	8009442 <__mcmp>
 8008c28:	9a07      	ldr	r2, [sp, #28]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	e000      	b.n	8008c30 <_dtoa_r+0x978>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4611      	mov	r1, r2
 8008c32:	4650      	mov	r0, sl
 8008c34:	9307      	str	r3, [sp, #28]
 8008c36:	f000 fa2c 	bl	8009092 <_Bfree>
 8008c3a:	9b07      	ldr	r3, [sp, #28]
 8008c3c:	b94b      	cbnz	r3, 8008c52 <_dtoa_r+0x99a>
 8008c3e:	9a06      	ldr	r2, [sp, #24]
 8008c40:	b93a      	cbnz	r2, 8008c52 <_dtoa_r+0x99a>
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	b92a      	cbnz	r2, 8008c52 <_dtoa_r+0x99a>
 8008c46:	2f39      	cmp	r7, #57	; 0x39
 8008c48:	d028      	beq.n	8008c9c <_dtoa_r+0x9e4>
 8008c4a:	9b00      	ldr	r3, [sp, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	dc1a      	bgt.n	8008c86 <_dtoa_r+0x9ce>
 8008c50:	e01b      	b.n	8008c8a <_dtoa_r+0x9d2>
 8008c52:	9a00      	ldr	r2, [sp, #0]
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	db04      	blt.n	8008c62 <_dtoa_r+0x9aa>
 8008c58:	d11a      	bne.n	8008c90 <_dtoa_r+0x9d8>
 8008c5a:	9a06      	ldr	r2, [sp, #24]
 8008c5c:	b9c2      	cbnz	r2, 8008c90 <_dtoa_r+0x9d8>
 8008c5e:	9a05      	ldr	r2, [sp, #20]
 8008c60:	b9b2      	cbnz	r2, 8008c90 <_dtoa_r+0x9d8>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	dd11      	ble.n	8008c8a <_dtoa_r+0x9d2>
 8008c66:	2201      	movs	r2, #1
 8008c68:	9902      	ldr	r1, [sp, #8]
 8008c6a:	4650      	mov	r0, sl
 8008c6c:	f000 fb98 	bl	80093a0 <__lshift>
 8008c70:	4629      	mov	r1, r5
 8008c72:	9002      	str	r0, [sp, #8]
 8008c74:	f000 fbe5 	bl	8009442 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc02      	bgt.n	8008c82 <_dtoa_r+0x9ca>
 8008c7c:	d105      	bne.n	8008c8a <_dtoa_r+0x9d2>
 8008c7e:	07fa      	lsls	r2, r7, #31
 8008c80:	d503      	bpl.n	8008c8a <_dtoa_r+0x9d2>
 8008c82:	2f39      	cmp	r7, #57	; 0x39
 8008c84:	d00a      	beq.n	8008c9c <_dtoa_r+0x9e4>
 8008c86:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8008c8a:	f109 0401 	add.w	r4, r9, #1
 8008c8e:	e00c      	b.n	8008caa <_dtoa_r+0x9f2>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f109 0401 	add.w	r4, r9, #1
 8008c96:	dd0b      	ble.n	8008cb0 <_dtoa_r+0x9f8>
 8008c98:	2f39      	cmp	r7, #57	; 0x39
 8008c9a:	d105      	bne.n	8008ca8 <_dtoa_r+0x9f0>
 8008c9c:	2339      	movs	r3, #57	; 0x39
 8008c9e:	f889 3000 	strb.w	r3, [r9]
 8008ca2:	f109 0901 	add.w	r9, r9, #1
 8008ca6:	e054      	b.n	8008d52 <_dtoa_r+0xa9a>
 8008ca8:	3701      	adds	r7, #1
 8008caa:	f889 7000 	strb.w	r7, [r9]
 8008cae:	e06d      	b.n	8008d8c <_dtoa_r+0xad4>
 8008cb0:	9b04      	ldr	r3, [sp, #16]
 8008cb2:	9a03      	ldr	r2, [sp, #12]
 8008cb4:	f804 7c01 	strb.w	r7, [r4, #-1]
 8008cb8:	1ae3      	subs	r3, r4, r3
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	46a1      	mov	r9, r4
 8008cbe:	d03a      	beq.n	8008d36 <_dtoa_r+0xa7e>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	220a      	movs	r2, #10
 8008cc4:	9902      	ldr	r1, [sp, #8]
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	f000 f9fa 	bl	80090c0 <__multadd>
 8008ccc:	4546      	cmp	r6, r8
 8008cce:	9002      	str	r0, [sp, #8]
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	f04f 020a 	mov.w	r2, #10
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4650      	mov	r0, sl
 8008cdc:	d104      	bne.n	8008ce8 <_dtoa_r+0xa30>
 8008cde:	f000 f9ef 	bl	80090c0 <__multadd>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	e786      	b.n	8008bf6 <_dtoa_r+0x93e>
 8008ce8:	f000 f9ea 	bl	80090c0 <__multadd>
 8008cec:	4641      	mov	r1, r8
 8008cee:	4606      	mov	r6, r0
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	f000 f9e3 	bl	80090c0 <__multadd>
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	e77b      	b.n	8008bf6 <_dtoa_r+0x93e>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	9902      	ldr	r1, [sp, #8]
 8008d04:	4650      	mov	r0, sl
 8008d06:	f000 f9db 	bl	80090c0 <__multadd>
 8008d0a:	9002      	str	r0, [sp, #8]
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	9802      	ldr	r0, [sp, #8]
 8008d10:	f7ff fa40 	bl	8008194 <quorem>
 8008d14:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008d18:	f804 7b01 	strb.w	r7, [r4], #1
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	9a03      	ldr	r2, [sp, #12]
 8008d20:	1ae3      	subs	r3, r4, r3
 8008d22:	4293      	cmp	r3, r2
 8008d24:	dbeb      	blt.n	8008cfe <_dtoa_r+0xa46>
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	2a01      	cmp	r2, #1
 8008d2a:	bfac      	ite	ge
 8008d2c:	189b      	addge	r3, r3, r2
 8008d2e:	3301      	addlt	r3, #1
 8008d30:	46b0      	mov	r8, r6
 8008d32:	4699      	mov	r9, r3
 8008d34:	2600      	movs	r6, #0
 8008d36:	2201      	movs	r2, #1
 8008d38:	9902      	ldr	r1, [sp, #8]
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	f000 fb30 	bl	80093a0 <__lshift>
 8008d40:	4629      	mov	r1, r5
 8008d42:	9002      	str	r0, [sp, #8]
 8008d44:	f000 fb7d 	bl	8009442 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	dc02      	bgt.n	8008d52 <_dtoa_r+0xa9a>
 8008d4c:	d115      	bne.n	8008d7a <_dtoa_r+0xac2>
 8008d4e:	07fb      	lsls	r3, r7, #31
 8008d50:	d513      	bpl.n	8008d7a <_dtoa_r+0xac2>
 8008d52:	464c      	mov	r4, r9
 8008d54:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008d58:	2b39      	cmp	r3, #57	; 0x39
 8008d5a:	f104 32ff 	add.w	r2, r4, #4294967295
 8008d5e:	d109      	bne.n	8008d74 <_dtoa_r+0xabc>
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d104      	bne.n	8008d70 <_dtoa_r+0xab8>
 8008d66:	f10b 0b01 	add.w	fp, fp, #1
 8008d6a:	2331      	movs	r3, #49	; 0x31
 8008d6c:	9a04      	ldr	r2, [sp, #16]
 8008d6e:	e002      	b.n	8008d76 <_dtoa_r+0xabe>
 8008d70:	4614      	mov	r4, r2
 8008d72:	e7ef      	b.n	8008d54 <_dtoa_r+0xa9c>
 8008d74:	3301      	adds	r3, #1
 8008d76:	7013      	strb	r3, [r2, #0]
 8008d78:	e008      	b.n	8008d8c <_dtoa_r+0xad4>
 8008d7a:	464c      	mov	r4, r9
 8008d7c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8008d80:	2b30      	cmp	r3, #48	; 0x30
 8008d82:	f104 32ff 	add.w	r2, r4, #4294967295
 8008d86:	d101      	bne.n	8008d8c <_dtoa_r+0xad4>
 8008d88:	4614      	mov	r4, r2
 8008d8a:	e7f7      	b.n	8008d7c <_dtoa_r+0xac4>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4650      	mov	r0, sl
 8008d90:	f000 f97f 	bl	8009092 <_Bfree>
 8008d94:	f1b8 0f00 	cmp.w	r8, #0
 8008d98:	d00d      	beq.n	8008db6 <_dtoa_r+0xafe>
 8008d9a:	b12e      	cbz	r6, 8008da8 <_dtoa_r+0xaf0>
 8008d9c:	4546      	cmp	r6, r8
 8008d9e:	d003      	beq.n	8008da8 <_dtoa_r+0xaf0>
 8008da0:	4631      	mov	r1, r6
 8008da2:	4650      	mov	r0, sl
 8008da4:	f000 f975 	bl	8009092 <_Bfree>
 8008da8:	4641      	mov	r1, r8
 8008daa:	4650      	mov	r0, sl
 8008dac:	f000 f971 	bl	8009092 <_Bfree>
 8008db0:	e001      	b.n	8008db6 <_dtoa_r+0xafe>
 8008db2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8008db6:	9902      	ldr	r1, [sp, #8]
 8008db8:	4650      	mov	r0, sl
 8008dba:	f000 f96a 	bl	8009092 <_Bfree>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dc2:	7023      	strb	r3, [r4, #0]
 8008dc4:	f10b 0301 	add.w	r3, fp, #1
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dcc:	b11b      	cbz	r3, 8008dd6 <_dtoa_r+0xb1e>
 8008dce:	601c      	str	r4, [r3, #0]
 8008dd0:	e001      	b.n	8008dd6 <_dtoa_r+0xb1e>
 8008dd2:	4808      	ldr	r0, [pc, #32]	; (8008df4 <_dtoa_r+0xb3c>)
 8008dd4:	e00a      	b.n	8008dec <_dtoa_r+0xb34>
 8008dd6:	9804      	ldr	r0, [sp, #16]
 8008dd8:	e008      	b.n	8008dec <_dtoa_r+0xb34>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f73f aee1 	bgt.w	8008ba4 <_dtoa_r+0x8ec>
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	f77f aedd 	ble.w	8008ba4 <_dtoa_r+0x8ec>
 8008dea:	e6b1      	b.n	8008b50 <_dtoa_r+0x898>
 8008dec:	b017      	add	sp, #92	; 0x5c
 8008dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df2:	bf00      	nop
 8008df4:	08009b78 	.word	0x08009b78

08008df8 <_malloc_trim_r>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4f25      	ldr	r7, [pc, #148]	; (8008e94 <_malloc_trim_r+0x9c>)
 8008dfe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008ea0 <_malloc_trim_r+0xa8>
 8008e02:	4689      	mov	r9, r1
 8008e04:	4606      	mov	r6, r0
 8008e06:	f7fe f9c4 	bl	8007192 <__malloc_lock>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	685d      	ldr	r5, [r3, #4]
 8008e0e:	f1a8 0411 	sub.w	r4, r8, #17
 8008e12:	f025 0503 	bic.w	r5, r5, #3
 8008e16:	442c      	add	r4, r5
 8008e18:	ebc9 0404 	rsb	r4, r9, r4
 8008e1c:	fbb4 f4f8 	udiv	r4, r4, r8
 8008e20:	3c01      	subs	r4, #1
 8008e22:	fb08 f404 	mul.w	r4, r8, r4
 8008e26:	4544      	cmp	r4, r8
 8008e28:	da05      	bge.n	8008e36 <_malloc_trim_r+0x3e>
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7fe f9b2 	bl	8007194 <__malloc_unlock>
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e36:	2100      	movs	r1, #0
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7fe f9ad 	bl	8007198 <_sbrk_r>
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	442b      	add	r3, r5
 8008e42:	4298      	cmp	r0, r3
 8008e44:	d1f1      	bne.n	8008e2a <_malloc_trim_r+0x32>
 8008e46:	4261      	negs	r1, r4
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7fe f9a5 	bl	8007198 <_sbrk_r>
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d110      	bne.n	8008e74 <_malloc_trim_r+0x7c>
 8008e52:	2100      	movs	r1, #0
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7fe f99f 	bl	8007198 <_sbrk_r>
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	1a83      	subs	r3, r0, r2
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	dde3      	ble.n	8008e2a <_malloc_trim_r+0x32>
 8008e62:	490d      	ldr	r1, [pc, #52]	; (8008e98 <_malloc_trim_r+0xa0>)
 8008e64:	6809      	ldr	r1, [r1, #0]
 8008e66:	1a40      	subs	r0, r0, r1
 8008e68:	490c      	ldr	r1, [pc, #48]	; (8008e9c <_malloc_trim_r+0xa4>)
 8008e6a:	f043 0301 	orr.w	r3, r3, #1
 8008e6e:	6008      	str	r0, [r1, #0]
 8008e70:	6053      	str	r3, [r2, #4]
 8008e72:	e7da      	b.n	8008e2a <_malloc_trim_r+0x32>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <_malloc_trim_r+0xa4>)
 8008e78:	1b2d      	subs	r5, r5, r4
 8008e7a:	f045 0501 	orr.w	r5, r5, #1
 8008e7e:	605d      	str	r5, [r3, #4]
 8008e80:	6813      	ldr	r3, [r2, #0]
 8008e82:	4630      	mov	r0, r6
 8008e84:	1b1c      	subs	r4, r3, r4
 8008e86:	6014      	str	r4, [r2, #0]
 8008e88:	f7fe f984 	bl	8007194 <__malloc_unlock>
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e92:	bf00      	nop
 8008e94:	20000150 	.word	0x20000150
 8008e98:	2000055c 	.word	0x2000055c
 8008e9c:	20004580 	.word	0x20004580
 8008ea0:	00000080 	.word	0x00000080

08008ea4 <_free_r>:
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4688      	mov	r8, r1
 8008eac:	2900      	cmp	r1, #0
 8008eae:	f000 80ad 	beq.w	800900c <_free_r+0x168>
 8008eb2:	f7fe f96e 	bl	8007192 <__malloc_lock>
 8008eb6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008eba:	4d55      	ldr	r5, [pc, #340]	; (8009010 <_free_r+0x16c>)
 8008ebc:	f022 0001 	bic.w	r0, r2, #1
 8008ec0:	f1a8 0308 	sub.w	r3, r8, #8
 8008ec4:	181f      	adds	r7, r3, r0
 8008ec6:	68a9      	ldr	r1, [r5, #8]
 8008ec8:	687e      	ldr	r6, [r7, #4]
 8008eca:	428f      	cmp	r7, r1
 8008ecc:	f026 0603 	bic.w	r6, r6, #3
 8008ed0:	f002 0201 	and.w	r2, r2, #1
 8008ed4:	d11b      	bne.n	8008f0e <_free_r+0x6a>
 8008ed6:	4430      	add	r0, r6
 8008ed8:	b93a      	cbnz	r2, 8008eea <_free_r+0x46>
 8008eda:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	4410      	add	r0, r2
 8008ee2:	6899      	ldr	r1, [r3, #8]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	60ca      	str	r2, [r1, #12]
 8008ee8:	6091      	str	r1, [r2, #8]
 8008eea:	f040 0201 	orr.w	r2, r0, #1
 8008eee:	605a      	str	r2, [r3, #4]
 8008ef0:	60ab      	str	r3, [r5, #8]
 8008ef2:	4b48      	ldr	r3, [pc, #288]	; (8009014 <_free_r+0x170>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4298      	cmp	r0, r3
 8008ef8:	d304      	bcc.n	8008f04 <_free_r+0x60>
 8008efa:	4b47      	ldr	r3, [pc, #284]	; (8009018 <_free_r+0x174>)
 8008efc:	4620      	mov	r0, r4
 8008efe:	6819      	ldr	r1, [r3, #0]
 8008f00:	f7ff ff7a 	bl	8008df8 <_malloc_trim_r>
 8008f04:	4620      	mov	r0, r4
 8008f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	f7fe b943 	b.w	8007194 <__malloc_unlock>
 8008f0e:	607e      	str	r6, [r7, #4]
 8008f10:	b97a      	cbnz	r2, 8008f32 <_free_r+0x8e>
 8008f12:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008f16:	1a5b      	subs	r3, r3, r1
 8008f18:	4408      	add	r0, r1
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	f105 0e08 	add.w	lr, r5, #8
 8008f20:	4571      	cmp	r1, lr
 8008f22:	d008      	beq.n	8008f36 <_free_r+0x92>
 8008f24:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008f28:	f8c1 e00c 	str.w	lr, [r1, #12]
 8008f2c:	f8ce 1008 	str.w	r1, [lr, #8]
 8008f30:	e002      	b.n	8008f38 <_free_r+0x94>
 8008f32:	2200      	movs	r2, #0
 8008f34:	e000      	b.n	8008f38 <_free_r+0x94>
 8008f36:	2201      	movs	r2, #1
 8008f38:	19b9      	adds	r1, r7, r6
 8008f3a:	6849      	ldr	r1, [r1, #4]
 8008f3c:	07c9      	lsls	r1, r1, #31
 8008f3e:	d40e      	bmi.n	8008f5e <_free_r+0xba>
 8008f40:	4430      	add	r0, r6
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	b942      	cbnz	r2, 8008f58 <_free_r+0xb4>
 8008f46:	4e35      	ldr	r6, [pc, #212]	; (800901c <_free_r+0x178>)
 8008f48:	42b1      	cmp	r1, r6
 8008f4a:	d105      	bne.n	8008f58 <_free_r+0xb4>
 8008f4c:	616b      	str	r3, [r5, #20]
 8008f4e:	612b      	str	r3, [r5, #16]
 8008f50:	2201      	movs	r2, #1
 8008f52:	60d9      	str	r1, [r3, #12]
 8008f54:	6099      	str	r1, [r3, #8]
 8008f56:	e002      	b.n	8008f5e <_free_r+0xba>
 8008f58:	68fe      	ldr	r6, [r7, #12]
 8008f5a:	60ce      	str	r6, [r1, #12]
 8008f5c:	60b1      	str	r1, [r6, #8]
 8008f5e:	f040 0101 	orr.w	r1, r0, #1
 8008f62:	6059      	str	r1, [r3, #4]
 8008f64:	5018      	str	r0, [r3, r0]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d1cc      	bne.n	8008f04 <_free_r+0x60>
 8008f6a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008f6e:	d212      	bcs.n	8008f96 <_free_r+0xf2>
 8008f70:	08c0      	lsrs	r0, r0, #3
 8008f72:	1081      	asrs	r1, r0, #2
 8008f74:	2201      	movs	r2, #1
 8008f76:	fa02 f101 	lsl.w	r1, r2, r1
 8008f7a:	686a      	ldr	r2, [r5, #4]
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	606a      	str	r2, [r5, #4]
 8008f82:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008f86:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8008f8a:	6099      	str	r1, [r3, #8]
 8008f8c:	3a08      	subs	r2, #8
 8008f8e:	60da      	str	r2, [r3, #12]
 8008f90:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8008f94:	e038      	b.n	8009008 <_free_r+0x164>
 8008f96:	0a42      	lsrs	r2, r0, #9
 8008f98:	2a04      	cmp	r2, #4
 8008f9a:	d802      	bhi.n	8008fa2 <_free_r+0xfe>
 8008f9c:	0982      	lsrs	r2, r0, #6
 8008f9e:	3238      	adds	r2, #56	; 0x38
 8008fa0:	e015      	b.n	8008fce <_free_r+0x12a>
 8008fa2:	2a14      	cmp	r2, #20
 8008fa4:	d801      	bhi.n	8008faa <_free_r+0x106>
 8008fa6:	325b      	adds	r2, #91	; 0x5b
 8008fa8:	e011      	b.n	8008fce <_free_r+0x12a>
 8008faa:	2a54      	cmp	r2, #84	; 0x54
 8008fac:	d802      	bhi.n	8008fb4 <_free_r+0x110>
 8008fae:	0b02      	lsrs	r2, r0, #12
 8008fb0:	326e      	adds	r2, #110	; 0x6e
 8008fb2:	e00c      	b.n	8008fce <_free_r+0x12a>
 8008fb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008fb8:	d802      	bhi.n	8008fc0 <_free_r+0x11c>
 8008fba:	0bc2      	lsrs	r2, r0, #15
 8008fbc:	3277      	adds	r2, #119	; 0x77
 8008fbe:	e006      	b.n	8008fce <_free_r+0x12a>
 8008fc0:	f240 5154 	movw	r1, #1364	; 0x554
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	bf9a      	itte	ls
 8008fc8:	0c82      	lsrls	r2, r0, #18
 8008fca:	327c      	addls	r2, #124	; 0x7c
 8008fcc:	227e      	movhi	r2, #126	; 0x7e
 8008fce:	1c51      	adds	r1, r2, #1
 8008fd0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008fd4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008fd8:	4f0d      	ldr	r7, [pc, #52]	; (8009010 <_free_r+0x16c>)
 8008fda:	428e      	cmp	r6, r1
 8008fdc:	d10b      	bne.n	8008ff6 <_free_r+0x152>
 8008fde:	2101      	movs	r1, #1
 8008fe0:	1092      	asrs	r2, r2, #2
 8008fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	4311      	orrs	r1, r2
 8008fea:	6079      	str	r1, [r7, #4]
 8008fec:	4631      	mov	r1, r6
 8008fee:	e008      	b.n	8009002 <_free_r+0x15e>
 8008ff0:	6889      	ldr	r1, [r1, #8]
 8008ff2:	428e      	cmp	r6, r1
 8008ff4:	d004      	beq.n	8009000 <_free_r+0x15c>
 8008ff6:	684a      	ldr	r2, [r1, #4]
 8008ff8:	f022 0203 	bic.w	r2, r2, #3
 8008ffc:	4290      	cmp	r0, r2
 8008ffe:	d3f7      	bcc.n	8008ff0 <_free_r+0x14c>
 8009000:	68ce      	ldr	r6, [r1, #12]
 8009002:	60de      	str	r6, [r3, #12]
 8009004:	6099      	str	r1, [r3, #8]
 8009006:	60b3      	str	r3, [r6, #8]
 8009008:	60cb      	str	r3, [r1, #12]
 800900a:	e77b      	b.n	8008f04 <_free_r+0x60>
 800900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009010:	20000150 	.word	0x20000150
 8009014:	20000558 	.word	0x20000558
 8009018:	2000457c 	.word	0x2000457c
 800901c:	20000158 	.word	0x20000158

08009020 <_localeconv_r>:
 8009020:	4800      	ldr	r0, [pc, #0]	; (8009024 <_localeconv_r+0x4>)
 8009022:	4770      	bx	lr
 8009024:	20000654 	.word	0x20000654

08009028 <_Balloc>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800902c:	4604      	mov	r4, r0
 800902e:	460e      	mov	r6, r1
 8009030:	b93d      	cbnz	r5, 8009042 <_Balloc+0x1a>
 8009032:	2010      	movs	r0, #16
 8009034:	f7fd fe72 	bl	8006d1c <malloc>
 8009038:	6260      	str	r0, [r4, #36]	; 0x24
 800903a:	6045      	str	r5, [r0, #4]
 800903c:	6085      	str	r5, [r0, #8]
 800903e:	6005      	str	r5, [r0, #0]
 8009040:	60c5      	str	r5, [r0, #12]
 8009042:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009044:	68eb      	ldr	r3, [r5, #12]
 8009046:	b143      	cbz	r3, 800905a <_Balloc+0x32>
 8009048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009050:	b178      	cbz	r0, 8009072 <_Balloc+0x4a>
 8009052:	6802      	ldr	r2, [r0, #0]
 8009054:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009058:	e017      	b.n	800908a <_Balloc+0x62>
 800905a:	2221      	movs	r2, #33	; 0x21
 800905c:	2104      	movs	r1, #4
 800905e:	4620      	mov	r0, r4
 8009060:	f000 fb37 	bl	80096d2 <_calloc_r>
 8009064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009066:	60e8      	str	r0, [r5, #12]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ec      	bne.n	8009048 <_Balloc+0x20>
 800906e:	2000      	movs	r0, #0
 8009070:	bd70      	pop	{r4, r5, r6, pc}
 8009072:	2101      	movs	r1, #1
 8009074:	fa01 f506 	lsl.w	r5, r1, r6
 8009078:	1d6a      	adds	r2, r5, #5
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fb28 	bl	80096d2 <_calloc_r>
 8009082:	2800      	cmp	r0, #0
 8009084:	d0f3      	beq.n	800906e <_Balloc+0x46>
 8009086:	6046      	str	r6, [r0, #4]
 8009088:	6085      	str	r5, [r0, #8]
 800908a:	2300      	movs	r3, #0
 800908c:	6103      	str	r3, [r0, #16]
 800908e:	60c3      	str	r3, [r0, #12]
 8009090:	bd70      	pop	{r4, r5, r6, pc}

08009092 <_Bfree>:
 8009092:	b570      	push	{r4, r5, r6, lr}
 8009094:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009096:	4606      	mov	r6, r0
 8009098:	460d      	mov	r5, r1
 800909a:	b93c      	cbnz	r4, 80090ac <_Bfree+0x1a>
 800909c:	2010      	movs	r0, #16
 800909e:	f7fd fe3d 	bl	8006d1c <malloc>
 80090a2:	6270      	str	r0, [r6, #36]	; 0x24
 80090a4:	6044      	str	r4, [r0, #4]
 80090a6:	6084      	str	r4, [r0, #8]
 80090a8:	6004      	str	r4, [r0, #0]
 80090aa:	60c4      	str	r4, [r0, #12]
 80090ac:	b13d      	cbz	r5, 80090be <_Bfree+0x2c>
 80090ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090b0:	686a      	ldr	r2, [r5, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090b8:	6029      	str	r1, [r5, #0]
 80090ba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80090be:	bd70      	pop	{r4, r5, r6, pc}

080090c0 <__multadd>:
 80090c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	690d      	ldr	r5, [r1, #16]
 80090c6:	461f      	mov	r7, r3
 80090c8:	4606      	mov	r6, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	f101 0e14 	add.w	lr, r1, #20
 80090d0:	2300      	movs	r3, #0
 80090d2:	f8de 0000 	ldr.w	r0, [lr]
 80090d6:	b281      	uxth	r1, r0
 80090d8:	fb02 7101 	mla	r1, r2, r1, r7
 80090dc:	0c0f      	lsrs	r7, r1, #16
 80090de:	0c00      	lsrs	r0, r0, #16
 80090e0:	fb02 7000 	mla	r0, r2, r0, r7
 80090e4:	b289      	uxth	r1, r1
 80090e6:	3301      	adds	r3, #1
 80090e8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090ec:	429d      	cmp	r5, r3
 80090ee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090f2:	f84e 1b04 	str.w	r1, [lr], #4
 80090f6:	dcec      	bgt.n	80090d2 <__multadd+0x12>
 80090f8:	b1d7      	cbz	r7, 8009130 <__multadd+0x70>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	429d      	cmp	r5, r3
 80090fe:	db12      	blt.n	8009126 <__multadd+0x66>
 8009100:	6861      	ldr	r1, [r4, #4]
 8009102:	4630      	mov	r0, r6
 8009104:	3101      	adds	r1, #1
 8009106:	f7ff ff8f 	bl	8009028 <_Balloc>
 800910a:	6922      	ldr	r2, [r4, #16]
 800910c:	3202      	adds	r2, #2
 800910e:	f104 010c 	add.w	r1, r4, #12
 8009112:	4680      	mov	r8, r0
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	300c      	adds	r0, #12
 8009118:	f7fe f828 	bl	800716c <memcpy>
 800911c:	4621      	mov	r1, r4
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ffb7 	bl	8009092 <_Bfree>
 8009124:	4644      	mov	r4, r8
 8009126:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800912a:	3501      	adds	r5, #1
 800912c:	615f      	str	r7, [r3, #20]
 800912e:	6125      	str	r5, [r4, #16]
 8009130:	4620      	mov	r0, r4
 8009132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009136 <__hi0bits>:
 8009136:	0c03      	lsrs	r3, r0, #16
 8009138:	041b      	lsls	r3, r3, #16
 800913a:	b913      	cbnz	r3, 8009142 <__hi0bits+0xc>
 800913c:	0400      	lsls	r0, r0, #16
 800913e:	2310      	movs	r3, #16
 8009140:	e000      	b.n	8009144 <__hi0bits+0xe>
 8009142:	2300      	movs	r3, #0
 8009144:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009148:	bf04      	itt	eq
 800914a:	0200      	lsleq	r0, r0, #8
 800914c:	3308      	addeq	r3, #8
 800914e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009152:	bf04      	itt	eq
 8009154:	0100      	lsleq	r0, r0, #4
 8009156:	3304      	addeq	r3, #4
 8009158:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800915c:	bf04      	itt	eq
 800915e:	0080      	lsleq	r0, r0, #2
 8009160:	3302      	addeq	r3, #2
 8009162:	2800      	cmp	r0, #0
 8009164:	db03      	blt.n	800916e <__hi0bits+0x38>
 8009166:	0042      	lsls	r2, r0, #1
 8009168:	d503      	bpl.n	8009172 <__hi0bits+0x3c>
 800916a:	1c58      	adds	r0, r3, #1
 800916c:	4770      	bx	lr
 800916e:	4618      	mov	r0, r3
 8009170:	4770      	bx	lr
 8009172:	2020      	movs	r0, #32
 8009174:	4770      	bx	lr

08009176 <__lo0bits>:
 8009176:	6803      	ldr	r3, [r0, #0]
 8009178:	f013 0207 	ands.w	r2, r3, #7
 800917c:	d00b      	beq.n	8009196 <__lo0bits+0x20>
 800917e:	07d9      	lsls	r1, r3, #31
 8009180:	d422      	bmi.n	80091c8 <__lo0bits+0x52>
 8009182:	079a      	lsls	r2, r3, #30
 8009184:	bf4b      	itete	mi
 8009186:	085b      	lsrmi	r3, r3, #1
 8009188:	089b      	lsrpl	r3, r3, #2
 800918a:	6003      	strmi	r3, [r0, #0]
 800918c:	6003      	strpl	r3, [r0, #0]
 800918e:	bf4c      	ite	mi
 8009190:	2001      	movmi	r0, #1
 8009192:	2002      	movpl	r0, #2
 8009194:	4770      	bx	lr
 8009196:	b299      	uxth	r1, r3
 8009198:	b909      	cbnz	r1, 800919e <__lo0bits+0x28>
 800919a:	0c1b      	lsrs	r3, r3, #16
 800919c:	2210      	movs	r2, #16
 800919e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091a2:	bf04      	itt	eq
 80091a4:	0a1b      	lsreq	r3, r3, #8
 80091a6:	3208      	addeq	r2, #8
 80091a8:	0719      	lsls	r1, r3, #28
 80091aa:	bf04      	itt	eq
 80091ac:	091b      	lsreq	r3, r3, #4
 80091ae:	3204      	addeq	r2, #4
 80091b0:	0799      	lsls	r1, r3, #30
 80091b2:	bf04      	itt	eq
 80091b4:	089b      	lsreq	r3, r3, #2
 80091b6:	3202      	addeq	r2, #2
 80091b8:	07d9      	lsls	r1, r3, #31
 80091ba:	d402      	bmi.n	80091c2 <__lo0bits+0x4c>
 80091bc:	085b      	lsrs	r3, r3, #1
 80091be:	d005      	beq.n	80091cc <__lo0bits+0x56>
 80091c0:	3201      	adds	r2, #1
 80091c2:	6003      	str	r3, [r0, #0]
 80091c4:	4610      	mov	r0, r2
 80091c6:	4770      	bx	lr
 80091c8:	2000      	movs	r0, #0
 80091ca:	4770      	bx	lr
 80091cc:	2020      	movs	r0, #32
 80091ce:	4770      	bx	lr

080091d0 <__i2b>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	460c      	mov	r4, r1
 80091d4:	2101      	movs	r1, #1
 80091d6:	f7ff ff27 	bl	8009028 <_Balloc>
 80091da:	2201      	movs	r2, #1
 80091dc:	6144      	str	r4, [r0, #20]
 80091de:	6102      	str	r2, [r0, #16]
 80091e0:	bd10      	pop	{r4, pc}

080091e2 <__multiply>:
 80091e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	4614      	mov	r4, r2
 80091e8:	690a      	ldr	r2, [r1, #16]
 80091ea:	6923      	ldr	r3, [r4, #16]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	bfb8      	it	lt
 80091f0:	460b      	movlt	r3, r1
 80091f2:	4688      	mov	r8, r1
 80091f4:	bfbc      	itt	lt
 80091f6:	46a0      	movlt	r8, r4
 80091f8:	461c      	movlt	r4, r3
 80091fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009206:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800920a:	eb07 0609 	add.w	r6, r7, r9
 800920e:	429e      	cmp	r6, r3
 8009210:	bfc8      	it	gt
 8009212:	3101      	addgt	r1, #1
 8009214:	f7ff ff08 	bl	8009028 <_Balloc>
 8009218:	f100 0514 	add.w	r5, r0, #20
 800921c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8009220:	462b      	mov	r3, r5
 8009222:	2200      	movs	r2, #0
 8009224:	4563      	cmp	r3, ip
 8009226:	d202      	bcs.n	800922e <__multiply+0x4c>
 8009228:	f843 2b04 	str.w	r2, [r3], #4
 800922c:	e7fa      	b.n	8009224 <__multiply+0x42>
 800922e:	f104 0214 	add.w	r2, r4, #20
 8009232:	f108 0114 	add.w	r1, r8, #20
 8009236:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800923a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	9b00      	ldr	r3, [sp, #0]
 8009242:	9201      	str	r2, [sp, #4]
 8009244:	4293      	cmp	r3, r2
 8009246:	d957      	bls.n	80092f8 <__multiply+0x116>
 8009248:	f8b2 b000 	ldrh.w	fp, [r2]
 800924c:	f1bb 0f00 	cmp.w	fp, #0
 8009250:	d023      	beq.n	800929a <__multiply+0xb8>
 8009252:	4689      	mov	r9, r1
 8009254:	46ae      	mov	lr, r5
 8009256:	f04f 0800 	mov.w	r8, #0
 800925a:	f859 4b04 	ldr.w	r4, [r9], #4
 800925e:	f8be a000 	ldrh.w	sl, [lr]
 8009262:	b2a3      	uxth	r3, r4
 8009264:	fb0b a303 	mla	r3, fp, r3, sl
 8009268:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800926c:	f8de 4000 	ldr.w	r4, [lr]
 8009270:	4443      	add	r3, r8
 8009272:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009276:	fb0b 840a 	mla	r4, fp, sl, r8
 800927a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800927e:	46f2      	mov	sl, lr
 8009280:	b29b      	uxth	r3, r3
 8009282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009286:	454f      	cmp	r7, r9
 8009288:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800928c:	f84a 3b04 	str.w	r3, [sl], #4
 8009290:	d901      	bls.n	8009296 <__multiply+0xb4>
 8009292:	46d6      	mov	lr, sl
 8009294:	e7e1      	b.n	800925a <__multiply+0x78>
 8009296:	f8ce 8004 	str.w	r8, [lr, #4]
 800929a:	9b01      	ldr	r3, [sp, #4]
 800929c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80092a0:	3204      	adds	r2, #4
 80092a2:	f1ba 0f00 	cmp.w	sl, #0
 80092a6:	d021      	beq.n	80092ec <__multiply+0x10a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	462c      	mov	r4, r5
 80092ac:	4689      	mov	r9, r1
 80092ae:	f04f 0800 	mov.w	r8, #0
 80092b2:	f8b9 e000 	ldrh.w	lr, [r9]
 80092b6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80092ba:	fb0a be0e 	mla	lr, sl, lr, fp
 80092be:	44f0      	add	r8, lr
 80092c0:	46a3      	mov	fp, r4
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80092c8:	f84b 3b04 	str.w	r3, [fp], #4
 80092cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092d0:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80092d4:	0c1b      	lsrs	r3, r3, #16
 80092d6:	fb0a e303 	mla	r3, sl, r3, lr
 80092da:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80092de:	454f      	cmp	r7, r9
 80092e0:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80092e4:	d901      	bls.n	80092ea <__multiply+0x108>
 80092e6:	465c      	mov	r4, fp
 80092e8:	e7e3      	b.n	80092b2 <__multiply+0xd0>
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	3504      	adds	r5, #4
 80092ee:	e7a7      	b.n	8009240 <__multiply+0x5e>
 80092f0:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80092f4:	b913      	cbnz	r3, 80092fc <__multiply+0x11a>
 80092f6:	3e01      	subs	r6, #1
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	dcf9      	bgt.n	80092f0 <__multiply+0x10e>
 80092fc:	6106      	str	r6, [r0, #16]
 80092fe:	b003      	add	sp, #12
 8009300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009304 <__pow5mult>:
 8009304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009308:	4615      	mov	r5, r2
 800930a:	f012 0203 	ands.w	r2, r2, #3
 800930e:	4606      	mov	r6, r0
 8009310:	460f      	mov	r7, r1
 8009312:	d007      	beq.n	8009324 <__pow5mult+0x20>
 8009314:	3a01      	subs	r2, #1
 8009316:	4c21      	ldr	r4, [pc, #132]	; (800939c <__pow5mult+0x98>)
 8009318:	2300      	movs	r3, #0
 800931a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800931e:	f7ff fecf 	bl	80090c0 <__multadd>
 8009322:	4607      	mov	r7, r0
 8009324:	10ad      	asrs	r5, r5, #2
 8009326:	d036      	beq.n	8009396 <__pow5mult+0x92>
 8009328:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800932a:	b93c      	cbnz	r4, 800933c <__pow5mult+0x38>
 800932c:	2010      	movs	r0, #16
 800932e:	f7fd fcf5 	bl	8006d1c <malloc>
 8009332:	6270      	str	r0, [r6, #36]	; 0x24
 8009334:	6044      	str	r4, [r0, #4]
 8009336:	6084      	str	r4, [r0, #8]
 8009338:	6004      	str	r4, [r0, #0]
 800933a:	60c4      	str	r4, [r0, #12]
 800933c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009344:	b94c      	cbnz	r4, 800935a <__pow5mult+0x56>
 8009346:	f240 2171 	movw	r1, #625	; 0x271
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ff40 	bl	80091d0 <__i2b>
 8009350:	2300      	movs	r3, #0
 8009352:	f8c8 0008 	str.w	r0, [r8, #8]
 8009356:	4604      	mov	r4, r0
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	07eb      	lsls	r3, r5, #31
 8009360:	d50a      	bpl.n	8009378 <__pow5mult+0x74>
 8009362:	4639      	mov	r1, r7
 8009364:	4622      	mov	r2, r4
 8009366:	4630      	mov	r0, r6
 8009368:	f7ff ff3b 	bl	80091e2 <__multiply>
 800936c:	4639      	mov	r1, r7
 800936e:	4681      	mov	r9, r0
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fe8e 	bl	8009092 <_Bfree>
 8009376:	464f      	mov	r7, r9
 8009378:	106d      	asrs	r5, r5, #1
 800937a:	d00c      	beq.n	8009396 <__pow5mult+0x92>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	b108      	cbz	r0, 8009384 <__pow5mult+0x80>
 8009380:	4604      	mov	r4, r0
 8009382:	e7ec      	b.n	800935e <__pow5mult+0x5a>
 8009384:	4622      	mov	r2, r4
 8009386:	4621      	mov	r1, r4
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff ff2a 	bl	80091e2 <__multiply>
 800938e:	6020      	str	r0, [r4, #0]
 8009390:	f8c0 8000 	str.w	r8, [r0]
 8009394:	e7f4      	b.n	8009380 <__pow5mult+0x7c>
 8009396:	4638      	mov	r0, r7
 8009398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800939c:	0800b238 	.word	0x0800b238

080093a0 <__lshift>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	460c      	mov	r4, r1
 80093a6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093aa:	6926      	ldr	r6, [r4, #16]
 80093ac:	6849      	ldr	r1, [r1, #4]
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	4456      	add	r6, sl
 80093b2:	4607      	mov	r7, r0
 80093b4:	4691      	mov	r9, r2
 80093b6:	1c75      	adds	r5, r6, #1
 80093b8:	42ab      	cmp	r3, r5
 80093ba:	da02      	bge.n	80093c2 <__lshift+0x22>
 80093bc:	3101      	adds	r1, #1
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	e7fa      	b.n	80093b8 <__lshift+0x18>
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7ff fe30 	bl	8009028 <_Balloc>
 80093c8:	2300      	movs	r3, #0
 80093ca:	4680      	mov	r8, r0
 80093cc:	f100 0114 	add.w	r1, r0, #20
 80093d0:	461a      	mov	r2, r3
 80093d2:	4553      	cmp	r3, sl
 80093d4:	da03      	bge.n	80093de <__lshift+0x3e>
 80093d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80093da:	3301      	adds	r3, #1
 80093dc:	e7f9      	b.n	80093d2 <__lshift+0x32>
 80093de:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80093e2:	6920      	ldr	r0, [r4, #16]
 80093e4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80093e8:	f019 091f 	ands.w	r9, r9, #31
 80093ec:	f104 0114 	add.w	r1, r4, #20
 80093f0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80093f4:	d014      	beq.n	8009420 <__lshift+0x80>
 80093f6:	f1c9 0c20 	rsb	ip, r9, #32
 80093fa:	2200      	movs	r2, #0
 80093fc:	6808      	ldr	r0, [r1, #0]
 80093fe:	fa00 f009 	lsl.w	r0, r0, r9
 8009402:	4302      	orrs	r2, r0
 8009404:	469a      	mov	sl, r3
 8009406:	f843 2b04 	str.w	r2, [r3], #4
 800940a:	f851 2b04 	ldr.w	r2, [r1], #4
 800940e:	458e      	cmp	lr, r1
 8009410:	fa22 f20c 	lsr.w	r2, r2, ip
 8009414:	d8f2      	bhi.n	80093fc <__lshift+0x5c>
 8009416:	f8ca 2004 	str.w	r2, [sl, #4]
 800941a:	b142      	cbz	r2, 800942e <__lshift+0x8e>
 800941c:	1cb5      	adds	r5, r6, #2
 800941e:	e006      	b.n	800942e <__lshift+0x8e>
 8009420:	3b04      	subs	r3, #4
 8009422:	f851 2b04 	ldr.w	r2, [r1], #4
 8009426:	f843 2f04 	str.w	r2, [r3, #4]!
 800942a:	458e      	cmp	lr, r1
 800942c:	d8f9      	bhi.n	8009422 <__lshift+0x82>
 800942e:	3d01      	subs	r5, #1
 8009430:	4638      	mov	r0, r7
 8009432:	f8c8 5010 	str.w	r5, [r8, #16]
 8009436:	4621      	mov	r1, r4
 8009438:	f7ff fe2b 	bl	8009092 <_Bfree>
 800943c:	4640      	mov	r0, r8
 800943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009442 <__mcmp>:
 8009442:	6903      	ldr	r3, [r0, #16]
 8009444:	690a      	ldr	r2, [r1, #16]
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	b510      	push	{r4, lr}
 800944a:	d111      	bne.n	8009470 <__mcmp+0x2e>
 800944c:	0092      	lsls	r2, r2, #2
 800944e:	3014      	adds	r0, #20
 8009450:	3114      	adds	r1, #20
 8009452:	1883      	adds	r3, r0, r2
 8009454:	440a      	add	r2, r1
 8009456:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800945a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800945e:	428c      	cmp	r4, r1
 8009460:	d002      	beq.n	8009468 <__mcmp+0x26>
 8009462:	d307      	bcc.n	8009474 <__mcmp+0x32>
 8009464:	2001      	movs	r0, #1
 8009466:	bd10      	pop	{r4, pc}
 8009468:	4298      	cmp	r0, r3
 800946a:	d3f4      	bcc.n	8009456 <__mcmp+0x14>
 800946c:	2000      	movs	r0, #0
 800946e:	bd10      	pop	{r4, pc}
 8009470:	4618      	mov	r0, r3
 8009472:	bd10      	pop	{r4, pc}
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	bd10      	pop	{r4, pc}

0800947a <__mdiff>:
 800947a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947e:	460c      	mov	r4, r1
 8009480:	4607      	mov	r7, r0
 8009482:	4611      	mov	r1, r2
 8009484:	4620      	mov	r0, r4
 8009486:	4615      	mov	r5, r2
 8009488:	f7ff ffdb 	bl	8009442 <__mcmp>
 800948c:	1e06      	subs	r6, r0, #0
 800948e:	d108      	bne.n	80094a2 <__mdiff+0x28>
 8009490:	4631      	mov	r1, r6
 8009492:	4638      	mov	r0, r7
 8009494:	f7ff fdc8 	bl	8009028 <_Balloc>
 8009498:	2301      	movs	r3, #1
 800949a:	6103      	str	r3, [r0, #16]
 800949c:	6146      	str	r6, [r0, #20]
 800949e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a2:	bfbc      	itt	lt
 80094a4:	4623      	movlt	r3, r4
 80094a6:	462c      	movlt	r4, r5
 80094a8:	4638      	mov	r0, r7
 80094aa:	6861      	ldr	r1, [r4, #4]
 80094ac:	bfba      	itte	lt
 80094ae:	461d      	movlt	r5, r3
 80094b0:	2601      	movlt	r6, #1
 80094b2:	2600      	movge	r6, #0
 80094b4:	f7ff fdb8 	bl	8009028 <_Balloc>
 80094b8:	692b      	ldr	r3, [r5, #16]
 80094ba:	60c6      	str	r6, [r0, #12]
 80094bc:	6926      	ldr	r6, [r4, #16]
 80094be:	f105 0914 	add.w	r9, r5, #20
 80094c2:	3414      	adds	r4, #20
 80094c4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80094c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80094cc:	f100 0514 	add.w	r5, r0, #20
 80094d0:	f04f 0c00 	mov.w	ip, #0
 80094d4:	f854 3b04 	ldr.w	r3, [r4], #4
 80094d8:	f859 2b04 	ldr.w	r2, [r9], #4
 80094dc:	fa1c f183 	uxtah	r1, ip, r3
 80094e0:	fa1f fe82 	uxth.w	lr, r2
 80094e4:	0c12      	lsrs	r2, r2, #16
 80094e6:	ebce 0101 	rsb	r1, lr, r1
 80094ea:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 80094ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094f2:	b289      	uxth	r1, r1
 80094f4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80094f8:	45c8      	cmp	r8, r9
 80094fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094fe:	46a6      	mov	lr, r4
 8009500:	f845 3b04 	str.w	r3, [r5], #4
 8009504:	d8e6      	bhi.n	80094d4 <__mdiff+0x5a>
 8009506:	45be      	cmp	lr, r7
 8009508:	d20e      	bcs.n	8009528 <__mdiff+0xae>
 800950a:	f85e 1b04 	ldr.w	r1, [lr], #4
 800950e:	fa1c f281 	uxtah	r2, ip, r1
 8009512:	1413      	asrs	r3, r2, #16
 8009514:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8009518:	b292      	uxth	r2, r2
 800951a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800951e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009522:	f845 2b04 	str.w	r2, [r5], #4
 8009526:	e7ee      	b.n	8009506 <__mdiff+0x8c>
 8009528:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800952c:	b90b      	cbnz	r3, 8009532 <__mdiff+0xb8>
 800952e:	3e01      	subs	r6, #1
 8009530:	e7fa      	b.n	8009528 <__mdiff+0xae>
 8009532:	6106      	str	r6, [r0, #16]
 8009534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009538 <__d2b>:
 8009538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800953c:	460e      	mov	r6, r1
 800953e:	2101      	movs	r1, #1
 8009540:	ec59 8b10 	vmov	r8, r9, d0
 8009544:	4615      	mov	r5, r2
 8009546:	f7ff fd6f 	bl	8009028 <_Balloc>
 800954a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800954e:	4607      	mov	r7, r0
 8009550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009554:	b10c      	cbz	r4, 800955a <__d2b+0x22>
 8009556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800955a:	9301      	str	r3, [sp, #4]
 800955c:	f1b8 0f00 	cmp.w	r8, #0
 8009560:	d019      	beq.n	8009596 <__d2b+0x5e>
 8009562:	a802      	add	r0, sp, #8
 8009564:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009568:	f7ff fe05 	bl	8009176 <__lo0bits>
 800956c:	9b00      	ldr	r3, [sp, #0]
 800956e:	b148      	cbz	r0, 8009584 <__d2b+0x4c>
 8009570:	9a01      	ldr	r2, [sp, #4]
 8009572:	f1c0 0120 	rsb	r1, r0, #32
 8009576:	fa02 f101 	lsl.w	r1, r2, r1
 800957a:	430b      	orrs	r3, r1
 800957c:	40c2      	lsrs	r2, r0
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	9201      	str	r2, [sp, #4]
 8009582:	e000      	b.n	8009586 <__d2b+0x4e>
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	61bb      	str	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf14      	ite	ne
 800958e:	2102      	movne	r1, #2
 8009590:	2101      	moveq	r1, #1
 8009592:	6139      	str	r1, [r7, #16]
 8009594:	e007      	b.n	80095a6 <__d2b+0x6e>
 8009596:	a801      	add	r0, sp, #4
 8009598:	f7ff fded 	bl	8009176 <__lo0bits>
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	2101      	movs	r1, #1
 80095a2:	6139      	str	r1, [r7, #16]
 80095a4:	3020      	adds	r0, #32
 80095a6:	b134      	cbz	r4, 80095b6 <__d2b+0x7e>
 80095a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095ac:	4404      	add	r4, r0
 80095ae:	6034      	str	r4, [r6, #0]
 80095b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095b4:	e009      	b.n	80095ca <__d2b+0x92>
 80095b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095be:	6030      	str	r0, [r6, #0]
 80095c0:	6918      	ldr	r0, [r3, #16]
 80095c2:	f7ff fdb8 	bl	8009136 <__hi0bits>
 80095c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095ca:	6028      	str	r0, [r5, #0]
 80095cc:	4638      	mov	r0, r7
 80095ce:	b003      	add	sp, #12
 80095d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080095d4 <__ssprint_r>:
 80095d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	4693      	mov	fp, r2
 80095da:	6892      	ldr	r2, [r2, #8]
 80095dc:	4681      	mov	r9, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b34a      	cbz	r2, 8009636 <__ssprint_r+0x62>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f8db a000 	ldr.w	sl, [fp]
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	461f      	mov	r7, r3
 80095ec:	e006      	b.n	80095fc <__ssprint_r+0x28>
 80095ee:	f8da 3000 	ldr.w	r3, [sl]
 80095f2:	f8da 7004 	ldr.w	r7, [sl, #4]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	f10a 0a08 	add.w	sl, sl, #8
 80095fc:	2f00      	cmp	r7, #0
 80095fe:	d0f6      	beq.n	80095ee <__ssprint_r+0x1a>
 8009600:	68a6      	ldr	r6, [r4, #8]
 8009602:	42b7      	cmp	r7, r6
 8009604:	d360      	bcc.n	80096c8 <__ssprint_r+0xf4>
 8009606:	89a0      	ldrh	r0, [r4, #12]
 8009608:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800960c:	d117      	bne.n	800963e <__ssprint_r+0x6a>
 800960e:	42b7      	cmp	r7, r6
 8009610:	d35a      	bcc.n	80096c8 <__ssprint_r+0xf4>
 8009612:	4632      	mov	r2, r6
 8009614:	9901      	ldr	r1, [sp, #4]
 8009616:	6820      	ldr	r0, [r4, #0]
 8009618:	f000 f888 	bl	800972c <memmove>
 800961c:	68a2      	ldr	r2, [r4, #8]
 800961e:	1b92      	subs	r2, r2, r6
 8009620:	60a2      	str	r2, [r4, #8]
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	4416      	add	r6, r2
 8009626:	f8db 2008 	ldr.w	r2, [fp, #8]
 800962a:	6026      	str	r6, [r4, #0]
 800962c:	1bd7      	subs	r7, r2, r7
 800962e:	f8cb 7008 	str.w	r7, [fp, #8]
 8009632:	2f00      	cmp	r7, #0
 8009634:	d1db      	bne.n	80095ee <__ssprint_r+0x1a>
 8009636:	2000      	movs	r0, #0
 8009638:	f8cb 0004 	str.w	r0, [fp, #4]
 800963c:	e046      	b.n	80096cc <__ssprint_r+0xf8>
 800963e:	6825      	ldr	r5, [r4, #0]
 8009640:	6921      	ldr	r1, [r4, #16]
 8009642:	ebc1 0805 	rsb	r8, r1, r5
 8009646:	f108 0201 	add.w	r2, r8, #1
 800964a:	6965      	ldr	r5, [r4, #20]
 800964c:	443a      	add	r2, r7
 800964e:	2302      	movs	r3, #2
 8009650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009654:	fb95 f5f3 	sdiv	r5, r5, r3
 8009658:	4295      	cmp	r5, r2
 800965a:	bf38      	it	cc
 800965c:	4615      	movcc	r5, r2
 800965e:	0543      	lsls	r3, r0, #21
 8009660:	d510      	bpl.n	8009684 <__ssprint_r+0xb0>
 8009662:	4629      	mov	r1, r5
 8009664:	4648      	mov	r0, r9
 8009666:	f7fd fb61 	bl	8006d2c <_malloc_r>
 800966a:	4606      	mov	r6, r0
 800966c:	b1a0      	cbz	r0, 8009698 <__ssprint_r+0xc4>
 800966e:	4642      	mov	r2, r8
 8009670:	6921      	ldr	r1, [r4, #16]
 8009672:	f7fd fd7b 	bl	800716c <memcpy>
 8009676:	89a2      	ldrh	r2, [r4, #12]
 8009678:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800967c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009680:	81a2      	strh	r2, [r4, #12]
 8009682:	e018      	b.n	80096b6 <__ssprint_r+0xe2>
 8009684:	462a      	mov	r2, r5
 8009686:	4648      	mov	r0, r9
 8009688:	f000 f86c 	bl	8009764 <_realloc_r>
 800968c:	4606      	mov	r6, r0
 800968e:	b990      	cbnz	r0, 80096b6 <__ssprint_r+0xe2>
 8009690:	6921      	ldr	r1, [r4, #16]
 8009692:	4648      	mov	r0, r9
 8009694:	f7ff fc06 	bl	8008ea4 <_free_r>
 8009698:	220c      	movs	r2, #12
 800969a:	f8c9 2000 	str.w	r2, [r9]
 800969e:	89a2      	ldrh	r2, [r4, #12]
 80096a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096a4:	81a2      	strh	r2, [r4, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8cb 2008 	str.w	r2, [fp, #8]
 80096ac:	f8cb 2004 	str.w	r2, [fp, #4]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	e00a      	b.n	80096cc <__ssprint_r+0xf8>
 80096b6:	6126      	str	r6, [r4, #16]
 80096b8:	6165      	str	r5, [r4, #20]
 80096ba:	4446      	add	r6, r8
 80096bc:	ebc8 0505 	rsb	r5, r8, r5
 80096c0:	6026      	str	r6, [r4, #0]
 80096c2:	60a5      	str	r5, [r4, #8]
 80096c4:	463e      	mov	r6, r7
 80096c6:	e7a2      	b.n	800960e <__ssprint_r+0x3a>
 80096c8:	463e      	mov	r6, r7
 80096ca:	e7a2      	b.n	8009612 <__ssprint_r+0x3e>
 80096cc:	b003      	add	sp, #12
 80096ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096d2 <_calloc_r>:
 80096d2:	b510      	push	{r4, lr}
 80096d4:	4351      	muls	r1, r2
 80096d6:	f7fd fb29 	bl	8006d2c <_malloc_r>
 80096da:	4604      	mov	r4, r0
 80096dc:	b320      	cbz	r0, 8009728 <_calloc_r+0x56>
 80096de:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80096e2:	f022 0203 	bic.w	r2, r2, #3
 80096e6:	3a04      	subs	r2, #4
 80096e8:	2a24      	cmp	r2, #36	; 0x24
 80096ea:	d81a      	bhi.n	8009722 <_calloc_r+0x50>
 80096ec:	2a13      	cmp	r2, #19
 80096ee:	d912      	bls.n	8009716 <_calloc_r+0x44>
 80096f0:	2100      	movs	r1, #0
 80096f2:	2a1b      	cmp	r2, #27
 80096f4:	6001      	str	r1, [r0, #0]
 80096f6:	6041      	str	r1, [r0, #4]
 80096f8:	d802      	bhi.n	8009700 <_calloc_r+0x2e>
 80096fa:	f100 0308 	add.w	r3, r0, #8
 80096fe:	e00b      	b.n	8009718 <_calloc_r+0x46>
 8009700:	2a24      	cmp	r2, #36	; 0x24
 8009702:	6081      	str	r1, [r0, #8]
 8009704:	60c1      	str	r1, [r0, #12]
 8009706:	bf11      	iteee	ne
 8009708:	f100 0310 	addne.w	r3, r0, #16
 800970c:	6101      	streq	r1, [r0, #16]
 800970e:	f100 0318 	addeq.w	r3, r0, #24
 8009712:	6141      	streq	r1, [r0, #20]
 8009714:	e000      	b.n	8009718 <_calloc_r+0x46>
 8009716:	4603      	mov	r3, r0
 8009718:	2200      	movs	r2, #0
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	605a      	str	r2, [r3, #4]
 800971e:	609a      	str	r2, [r3, #8]
 8009720:	e002      	b.n	8009728 <_calloc_r+0x56>
 8009722:	2100      	movs	r1, #0
 8009724:	f7fd fd2d 	bl	8007182 <memset>
 8009728:	4620      	mov	r0, r4
 800972a:	bd10      	pop	{r4, pc}

0800972c <memmove>:
 800972c:	4288      	cmp	r0, r1
 800972e:	b510      	push	{r4, lr}
 8009730:	eb01 0302 	add.w	r3, r1, r2
 8009734:	d801      	bhi.n	800973a <memmove+0xe>
 8009736:	1e42      	subs	r2, r0, #1
 8009738:	e00b      	b.n	8009752 <memmove+0x26>
 800973a:	4298      	cmp	r0, r3
 800973c:	d2fb      	bcs.n	8009736 <memmove+0xa>
 800973e:	1881      	adds	r1, r0, r2
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	42d3      	cmn	r3, r2
 8009744:	d004      	beq.n	8009750 <memmove+0x24>
 8009746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800974a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800974e:	e7f8      	b.n	8009742 <memmove+0x16>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	4299      	cmp	r1, r3
 8009754:	d004      	beq.n	8009760 <memmove+0x34>
 8009756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800975e:	e7f8      	b.n	8009752 <memmove+0x26>
 8009760:	bd10      	pop	{r4, pc}
	...

08009764 <_realloc_r>:
 8009764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	4681      	mov	r9, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b929      	cbnz	r1, 800977a <_realloc_r+0x16>
 800976e:	4611      	mov	r1, r2
 8009770:	b003      	add	sp, #12
 8009772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	f7fd bad9 	b.w	8006d2c <_malloc_r>
 800977a:	9201      	str	r2, [sp, #4]
 800977c:	f7fd fd09 	bl	8007192 <__malloc_lock>
 8009780:	9a01      	ldr	r2, [sp, #4]
 8009782:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8009786:	f102 080b 	add.w	r8, r2, #11
 800978a:	f1b8 0f16 	cmp.w	r8, #22
 800978e:	f1a4 0b08 	sub.w	fp, r4, #8
 8009792:	f02e 0503 	bic.w	r5, lr, #3
 8009796:	d903      	bls.n	80097a0 <_realloc_r+0x3c>
 8009798:	f038 0807 	bics.w	r8, r8, #7
 800979c:	d502      	bpl.n	80097a4 <_realloc_r+0x40>
 800979e:	e003      	b.n	80097a8 <_realloc_r+0x44>
 80097a0:	f04f 0810 	mov.w	r8, #16
 80097a4:	4590      	cmp	r8, r2
 80097a6:	d204      	bcs.n	80097b2 <_realloc_r+0x4e>
 80097a8:	230c      	movs	r3, #12
 80097aa:	f8c9 3000 	str.w	r3, [r9]
 80097ae:	2000      	movs	r0, #0
 80097b0:	e17d      	b.n	8009aae <_realloc_r+0x34a>
 80097b2:	45a8      	cmp	r8, r5
 80097b4:	f340 8150 	ble.w	8009a58 <_realloc_r+0x2f4>
 80097b8:	4ba6      	ldr	r3, [pc, #664]	; (8009a54 <_realloc_r+0x2f0>)
 80097ba:	6898      	ldr	r0, [r3, #8]
 80097bc:	eb0b 0105 	add.w	r1, fp, r5
 80097c0:	4281      	cmp	r1, r0
 80097c2:	684f      	ldr	r7, [r1, #4]
 80097c4:	d005      	beq.n	80097d2 <_realloc_r+0x6e>
 80097c6:	f027 0601 	bic.w	r6, r7, #1
 80097ca:	440e      	add	r6, r1
 80097cc:	6876      	ldr	r6, [r6, #4]
 80097ce:	07f6      	lsls	r6, r6, #31
 80097d0:	d426      	bmi.n	8009820 <_realloc_r+0xbc>
 80097d2:	f027 0a03 	bic.w	sl, r7, #3
 80097d6:	4281      	cmp	r1, r0
 80097d8:	eb05 070a 	add.w	r7, r5, sl
 80097dc:	d118      	bne.n	8009810 <_realloc_r+0xac>
 80097de:	f108 0610 	add.w	r6, r8, #16
 80097e2:	42b7      	cmp	r7, r6
 80097e4:	db1f      	blt.n	8009826 <_realloc_r+0xc2>
 80097e6:	eb0b 0008 	add.w	r0, fp, r8
 80097ea:	ebc8 0707 	rsb	r7, r8, r7
 80097ee:	f047 0701 	orr.w	r7, r7, #1
 80097f2:	6098      	str	r0, [r3, #8]
 80097f4:	6047      	str	r7, [r0, #4]
 80097f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	ea43 0308 	orr.w	r3, r3, r8
 8009802:	4648      	mov	r0, r9
 8009804:	f844 3c04 	str.w	r3, [r4, #-4]
 8009808:	f7fd fcc4 	bl	8007194 <__malloc_unlock>
 800980c:	4620      	mov	r0, r4
 800980e:	e14e      	b.n	8009aae <_realloc_r+0x34a>
 8009810:	45b8      	cmp	r8, r7
 8009812:	dc08      	bgt.n	8009826 <_realloc_r+0xc2>
 8009814:	68cb      	ldr	r3, [r1, #12]
 8009816:	688a      	ldr	r2, [r1, #8]
 8009818:	463d      	mov	r5, r7
 800981a:	60d3      	str	r3, [r2, #12]
 800981c:	609a      	str	r2, [r3, #8]
 800981e:	e11b      	b.n	8009a58 <_realloc_r+0x2f4>
 8009820:	f04f 0a00 	mov.w	sl, #0
 8009824:	4651      	mov	r1, sl
 8009826:	f01e 0f01 	tst.w	lr, #1
 800982a:	f040 80c3 	bne.w	80099b4 <_realloc_r+0x250>
 800982e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009832:	ebc7 070b 	rsb	r7, r7, fp
 8009836:	687e      	ldr	r6, [r7, #4]
 8009838:	f026 0603 	bic.w	r6, r6, #3
 800983c:	442e      	add	r6, r5
 800983e:	2900      	cmp	r1, #0
 8009840:	f000 8083 	beq.w	800994a <_realloc_r+0x1e6>
 8009844:	4281      	cmp	r1, r0
 8009846:	44b2      	add	sl, r6
 8009848:	d147      	bne.n	80098da <_realloc_r+0x176>
 800984a:	f108 0110 	add.w	r1, r8, #16
 800984e:	458a      	cmp	sl, r1
 8009850:	db7b      	blt.n	800994a <_realloc_r+0x1e6>
 8009852:	463e      	mov	r6, r7
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800985a:	60ca      	str	r2, [r1, #12]
 800985c:	6091      	str	r1, [r2, #8]
 800985e:	1f2a      	subs	r2, r5, #4
 8009860:	2a24      	cmp	r2, #36	; 0x24
 8009862:	d825      	bhi.n	80098b0 <_realloc_r+0x14c>
 8009864:	2a13      	cmp	r2, #19
 8009866:	d91b      	bls.n	80098a0 <_realloc_r+0x13c>
 8009868:	6821      	ldr	r1, [r4, #0]
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	6861      	ldr	r1, [r4, #4]
 800986e:	60f9      	str	r1, [r7, #12]
 8009870:	2a1b      	cmp	r2, #27
 8009872:	d803      	bhi.n	800987c <_realloc_r+0x118>
 8009874:	f107 0210 	add.w	r2, r7, #16
 8009878:	3408      	adds	r4, #8
 800987a:	e012      	b.n	80098a2 <_realloc_r+0x13e>
 800987c:	68a1      	ldr	r1, [r4, #8]
 800987e:	6139      	str	r1, [r7, #16]
 8009880:	68e1      	ldr	r1, [r4, #12]
 8009882:	6179      	str	r1, [r7, #20]
 8009884:	2a24      	cmp	r2, #36	; 0x24
 8009886:	bf01      	itttt	eq
 8009888:	6922      	ldreq	r2, [r4, #16]
 800988a:	61ba      	streq	r2, [r7, #24]
 800988c:	6961      	ldreq	r1, [r4, #20]
 800988e:	61f9      	streq	r1, [r7, #28]
 8009890:	bf19      	ittee	ne
 8009892:	f107 0218 	addne.w	r2, r7, #24
 8009896:	3410      	addne	r4, #16
 8009898:	f107 0220 	addeq.w	r2, r7, #32
 800989c:	3418      	addeq	r4, #24
 800989e:	e000      	b.n	80098a2 <_realloc_r+0x13e>
 80098a0:	4632      	mov	r2, r6
 80098a2:	6821      	ldr	r1, [r4, #0]
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	6861      	ldr	r1, [r4, #4]
 80098a8:	6051      	str	r1, [r2, #4]
 80098aa:	68a1      	ldr	r1, [r4, #8]
 80098ac:	6091      	str	r1, [r2, #8]
 80098ae:	e005      	b.n	80098bc <_realloc_r+0x158>
 80098b0:	4621      	mov	r1, r4
 80098b2:	4630      	mov	r0, r6
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	f7ff ff39 	bl	800972c <memmove>
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	eb07 0208 	add.w	r2, r7, r8
 80098c0:	ebc8 0a0a 	rsb	sl, r8, sl
 80098c4:	609a      	str	r2, [r3, #8]
 80098c6:	f04a 0301 	orr.w	r3, sl, #1
 80098ca:	6053      	str	r3, [r2, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	ea43 0308 	orr.w	r3, r3, r8
 80098d6:	607b      	str	r3, [r7, #4]
 80098d8:	e0b6      	b.n	8009a48 <_realloc_r+0x2e4>
 80098da:	45d0      	cmp	r8, sl
 80098dc:	dc35      	bgt.n	800994a <_realloc_r+0x1e6>
 80098de:	68cb      	ldr	r3, [r1, #12]
 80098e0:	688a      	ldr	r2, [r1, #8]
 80098e2:	4638      	mov	r0, r7
 80098e4:	60d3      	str	r3, [r2, #12]
 80098e6:	609a      	str	r2, [r3, #8]
 80098e8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	60d3      	str	r3, [r2, #12]
 80098f0:	609a      	str	r2, [r3, #8]
 80098f2:	1f2a      	subs	r2, r5, #4
 80098f4:	2a24      	cmp	r2, #36	; 0x24
 80098f6:	d823      	bhi.n	8009940 <_realloc_r+0x1dc>
 80098f8:	2a13      	cmp	r2, #19
 80098fa:	d91a      	bls.n	8009932 <_realloc_r+0x1ce>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	60bb      	str	r3, [r7, #8]
 8009900:	6863      	ldr	r3, [r4, #4]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	2a1b      	cmp	r2, #27
 8009906:	d803      	bhi.n	8009910 <_realloc_r+0x1ac>
 8009908:	f107 0010 	add.w	r0, r7, #16
 800990c:	3408      	adds	r4, #8
 800990e:	e010      	b.n	8009932 <_realloc_r+0x1ce>
 8009910:	68a3      	ldr	r3, [r4, #8]
 8009912:	613b      	str	r3, [r7, #16]
 8009914:	68e3      	ldr	r3, [r4, #12]
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	2a24      	cmp	r2, #36	; 0x24
 800991a:	bf01      	itttt	eq
 800991c:	6923      	ldreq	r3, [r4, #16]
 800991e:	61bb      	streq	r3, [r7, #24]
 8009920:	6963      	ldreq	r3, [r4, #20]
 8009922:	61fb      	streq	r3, [r7, #28]
 8009924:	bf19      	ittee	ne
 8009926:	f107 0018 	addne.w	r0, r7, #24
 800992a:	3410      	addne	r4, #16
 800992c:	f107 0020 	addeq.w	r0, r7, #32
 8009930:	3418      	addeq	r4, #24
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	6863      	ldr	r3, [r4, #4]
 8009938:	6043      	str	r3, [r0, #4]
 800993a:	68a3      	ldr	r3, [r4, #8]
 800993c:	6083      	str	r3, [r0, #8]
 800993e:	e002      	b.n	8009946 <_realloc_r+0x1e2>
 8009940:	4621      	mov	r1, r4
 8009942:	f7ff fef3 	bl	800972c <memmove>
 8009946:	4655      	mov	r5, sl
 8009948:	e02e      	b.n	80099a8 <_realloc_r+0x244>
 800994a:	45b0      	cmp	r8, r6
 800994c:	dc32      	bgt.n	80099b4 <_realloc_r+0x250>
 800994e:	4638      	mov	r0, r7
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009956:	60d3      	str	r3, [r2, #12]
 8009958:	609a      	str	r2, [r3, #8]
 800995a:	1f2a      	subs	r2, r5, #4
 800995c:	2a24      	cmp	r2, #36	; 0x24
 800995e:	d825      	bhi.n	80099ac <_realloc_r+0x248>
 8009960:	2a13      	cmp	r2, #19
 8009962:	d91a      	bls.n	800999a <_realloc_r+0x236>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	60bb      	str	r3, [r7, #8]
 8009968:	6863      	ldr	r3, [r4, #4]
 800996a:	60fb      	str	r3, [r7, #12]
 800996c:	2a1b      	cmp	r2, #27
 800996e:	d803      	bhi.n	8009978 <_realloc_r+0x214>
 8009970:	f107 0010 	add.w	r0, r7, #16
 8009974:	3408      	adds	r4, #8
 8009976:	e010      	b.n	800999a <_realloc_r+0x236>
 8009978:	68a3      	ldr	r3, [r4, #8]
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	68e3      	ldr	r3, [r4, #12]
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	2a24      	cmp	r2, #36	; 0x24
 8009982:	bf01      	itttt	eq
 8009984:	6923      	ldreq	r3, [r4, #16]
 8009986:	61bb      	streq	r3, [r7, #24]
 8009988:	6963      	ldreq	r3, [r4, #20]
 800998a:	61fb      	streq	r3, [r7, #28]
 800998c:	bf19      	ittee	ne
 800998e:	f107 0018 	addne.w	r0, r7, #24
 8009992:	3410      	addne	r4, #16
 8009994:	f107 0020 	addeq.w	r0, r7, #32
 8009998:	3418      	addeq	r4, #24
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	6003      	str	r3, [r0, #0]
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	6043      	str	r3, [r0, #4]
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	6083      	str	r3, [r0, #8]
 80099a6:	4635      	mov	r5, r6
 80099a8:	46bb      	mov	fp, r7
 80099aa:	e055      	b.n	8009a58 <_realloc_r+0x2f4>
 80099ac:	4621      	mov	r1, r4
 80099ae:	f7ff febd 	bl	800972c <memmove>
 80099b2:	e7f8      	b.n	80099a6 <_realloc_r+0x242>
 80099b4:	4611      	mov	r1, r2
 80099b6:	4648      	mov	r0, r9
 80099b8:	f7fd f9b8 	bl	8006d2c <_malloc_r>
 80099bc:	4606      	mov	r6, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d042      	beq.n	8009a48 <_realloc_r+0x2e4>
 80099c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80099c6:	f023 0301 	bic.w	r3, r3, #1
 80099ca:	f1a0 0208 	sub.w	r2, r0, #8
 80099ce:	445b      	add	r3, fp
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d105      	bne.n	80099e0 <_realloc_r+0x27c>
 80099d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80099d8:	f023 0303 	bic.w	r3, r3, #3
 80099dc:	441d      	add	r5, r3
 80099de:	e03b      	b.n	8009a58 <_realloc_r+0x2f4>
 80099e0:	1f2a      	subs	r2, r5, #4
 80099e2:	2a24      	cmp	r2, #36	; 0x24
 80099e4:	d829      	bhi.n	8009a3a <_realloc_r+0x2d6>
 80099e6:	2a13      	cmp	r2, #19
 80099e8:	d91e      	bls.n	8009a28 <_realloc_r+0x2c4>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	6003      	str	r3, [r0, #0]
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	6043      	str	r3, [r0, #4]
 80099f2:	2a1b      	cmp	r2, #27
 80099f4:	d804      	bhi.n	8009a00 <_realloc_r+0x29c>
 80099f6:	f100 0308 	add.w	r3, r0, #8
 80099fa:	f104 0208 	add.w	r2, r4, #8
 80099fe:	e015      	b.n	8009a2c <_realloc_r+0x2c8>
 8009a00:	68a3      	ldr	r3, [r4, #8]
 8009a02:	6083      	str	r3, [r0, #8]
 8009a04:	68e3      	ldr	r3, [r4, #12]
 8009a06:	60c3      	str	r3, [r0, #12]
 8009a08:	2a24      	cmp	r2, #36	; 0x24
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6923      	ldreq	r3, [r4, #16]
 8009a0e:	6103      	streq	r3, [r0, #16]
 8009a10:	6961      	ldreq	r1, [r4, #20]
 8009a12:	6141      	streq	r1, [r0, #20]
 8009a14:	bf19      	ittee	ne
 8009a16:	f100 0310 	addne.w	r3, r0, #16
 8009a1a:	f104 0210 	addne.w	r2, r4, #16
 8009a1e:	f100 0318 	addeq.w	r3, r0, #24
 8009a22:	f104 0218 	addeq.w	r2, r4, #24
 8009a26:	e001      	b.n	8009a2c <_realloc_r+0x2c8>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	6811      	ldr	r1, [r2, #0]
 8009a2e:	6019      	str	r1, [r3, #0]
 8009a30:	6851      	ldr	r1, [r2, #4]
 8009a32:	6059      	str	r1, [r3, #4]
 8009a34:	6892      	ldr	r2, [r2, #8]
 8009a36:	609a      	str	r2, [r3, #8]
 8009a38:	e002      	b.n	8009a40 <_realloc_r+0x2dc>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	f7ff fe76 	bl	800972c <memmove>
 8009a40:	4621      	mov	r1, r4
 8009a42:	4648      	mov	r0, r9
 8009a44:	f7ff fa2e 	bl	8008ea4 <_free_r>
 8009a48:	4648      	mov	r0, r9
 8009a4a:	f7fd fba3 	bl	8007194 <__malloc_unlock>
 8009a4e:	4630      	mov	r0, r6
 8009a50:	e02d      	b.n	8009aae <_realloc_r+0x34a>
 8009a52:	bf00      	nop
 8009a54:	20000150 	.word	0x20000150
 8009a58:	ebc8 0205 	rsb	r2, r8, r5
 8009a5c:	2a0f      	cmp	r2, #15
 8009a5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009a62:	d914      	bls.n	8009a8e <_realloc_r+0x32a>
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	eb0b 0108 	add.w	r1, fp, r8
 8009a6c:	ea43 0308 	orr.w	r3, r3, r8
 8009a70:	f8cb 3004 	str.w	r3, [fp, #4]
 8009a74:	f042 0301 	orr.w	r3, r2, #1
 8009a78:	440a      	add	r2, r1
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	6853      	ldr	r3, [r2, #4]
 8009a7e:	f043 0301 	orr.w	r3, r3, #1
 8009a82:	6053      	str	r3, [r2, #4]
 8009a84:	3108      	adds	r1, #8
 8009a86:	4648      	mov	r0, r9
 8009a88:	f7ff fa0c 	bl	8008ea4 <_free_r>
 8009a8c:	e00a      	b.n	8009aa4 <_realloc_r+0x340>
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	432b      	orrs	r3, r5
 8009a94:	eb0b 0205 	add.w	r2, fp, r5
 8009a98:	f8cb 3004 	str.w	r3, [fp, #4]
 8009a9c:	6853      	ldr	r3, [r2, #4]
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	6053      	str	r3, [r2, #4]
 8009aa4:	4648      	mov	r0, r9
 8009aa6:	f7fd fb75 	bl	8007194 <__malloc_unlock>
 8009aaa:	f10b 0008 	add.w	r0, fp, #8
 8009aae:	b003      	add	sp, #12
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ab4 <_sbrk>:
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <_sbrk+0x14>)
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	4602      	mov	r2, r0
 8009aba:	b909      	cbnz	r1, 8009ac0 <_sbrk+0xc>
 8009abc:	4903      	ldr	r1, [pc, #12]	; (8009acc <_sbrk+0x18>)
 8009abe:	6019      	str	r1, [r3, #0]
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	4402      	add	r2, r0
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	4770      	bx	lr
 8009ac8:	200045a8 	.word	0x200045a8
 8009acc:	20004c6c 	.word	0x20004c6c

08009ad0 <_init>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr

08009adc <_fini>:
 8009adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ade:	bf00      	nop
 8009ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae2:	bc08      	pop	{r3}
 8009ae4:	469e      	mov	lr, r3
 8009ae6:	4770      	bx	lr
